figures already existed
Results already existed
[[10, 10]]
[10]
Results/2022-02-10-00-20-18_31242/ created
Results/2022-02-10-00-20-18_31242/10 created
figures/2022-02-10-00-20-18_31242/ created
[('VOUT - L - Sb - GND', 0.5), ('VOUT - L - Sa - GND', 0.5), ('VIN - Sa - L - VOUT', 0.4583333333333333), ('VIN - Sb - Sa - GND', 0.4166666666666667), ('VIN - Sa - Sb - GND', 0.4166666666666667), ('VIN - Sb - L - VOUT', 0.375)]
{"['Sa']|[]": 0.33222591362126247, "['Sb']|[]": 0.33222591362126247, "['L']|[]": 0.33222591362126247, "['C']|[]": 0.003322259136212625, "['Sa', 'Sa']|['Sa']": 0.004950495049504951, "['Sa', 'Sb']|['Sa']": 0.49504950495049516, "['Sa', 'L']|['Sa']": 0.49504950495049516, "['Sa', 'C']|['Sa']": 0.004950495049504951, "['Sa', 'Sb']|['Sb']": 0.49504950495049516, "['Sb', 'Sb']|['Sb']": 0.004950495049504951, "['Sb', 'L']|['Sb']": 0.49504950495049516, "['Sb', 'C']|['Sb']": 0.004950495049504951, "['Sa', 'L']|['L']": 0.49504950495049516, "['Sb', 'L']|['L']": 0.49504950495049516, "['L', 'L']|['L']": 0.004950495049504951, "['L', 'C']|['L']": 0.004950495049504951, "['Sa', 'C']|['C']": 0.25, "['Sb', 'C']|['C']": 0.25, "['L', 'C']|['C']": 0.25, "['C', 'C']|['C']": 0.25, "['Sa', 'Sa', 'Sa']|['Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sb']|['Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'L']|['Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'C']|['Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sb']|['Sa', 'Sb']": 0.009708737864077669, "['Sa', 'Sb', 'Sb']|['Sa', 'Sb']": 0.009708737864077669, "['Sa', 'Sb', 'L']|['Sa', 'Sb']": 0.970873786407767, "['Sa', 'Sb', 'C']|['Sa', 'Sb']": 0.009708737864077669, "['Sa', 'Sa', 'L']|['Sa', 'L']": 0.009708737864077669, "['Sa', 'Sb', 'L']|['Sa', 'L']": 0.970873786407767, "['Sa', 'L', 'L']|['Sa', 'L']": 0.009708737864077669, "['Sa', 'L', 'C']|['Sa', 'L']": 0.009708737864077669, "['Sa', 'Sa', 'C']|['Sa', 'C']": 0.25, "['Sa', 'Sb', 'C']|['Sa', 'C']": 0.25, "['Sa', 'L', 'C']|['Sa', 'C']": 0.25, "['Sa', 'C', 'C']|['Sa', 'C']": 0.25, "['Sa', 'Sb', 'Sb']|['Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'Sb']|['Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'L']|['Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'C']|['Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'L']|['Sb', 'L']": 0.970873786407767, "['Sb', 'Sb', 'L']|['Sb', 'L']": 0.009708737864077669, "['Sb', 'L', 'L']|['Sb', 'L']": 0.009708737864077669, "['Sb', 'L', 'C']|['Sb', 'L']": 0.009708737864077669, "['Sa', 'Sb', 'C']|['Sb', 'C']": 0.25, "['Sb', 'Sb', 'C']|['Sb', 'C']": 0.25, "['Sb', 'L', 'C']|['Sb', 'C']": 0.25, "['Sb', 'C', 'C']|['Sb', 'C']": 0.25, "['Sa', 'L', 'L']|['L', 'L']": 0.25, "['Sb', 'L', 'L']|['L', 'L']": 0.25, "['L', 'L', 'L']|['L', 'L']": 0.25, "['L', 'L', 'C']|['L', 'L']": 0.25, "['Sa', 'L', 'C']|['L', 'C']": 0.25, "['Sb', 'L', 'C']|['L', 'C']": 0.25, "['L', 'L', 'C']|['L', 'C']": 0.25, "['L', 'C', 'C']|['L', 'C']": 0.25, "['Sa', 'C', 'C']|['C', 'C']": 0.25, "['Sb', 'C', 'C']|['C', 'C']": 0.25, "['L', 'C', 'C']|['C', 'C']": 0.25, "['C', 'C', 'C']|['C', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa']|['Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb']|['Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'L']|['Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'C']|['Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb']|['Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb']|['Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'L']|['Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'C']|['Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sa', 'L']|['Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'L']|['Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'L', 'L']|['Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'L', 'C']|['Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'Sa', 'C']|['Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'C']|['Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'L', 'C']|['Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'C', 'C']|['Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb']|['Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb']|['Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'L']|['Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'C']|['Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'L']|['Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'L']|['Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'L', 'L']|['Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'L', 'C']|['Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'C']|['Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'C']|['Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'L', 'C']|['Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'C', 'C']|['Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sa', 'L', 'L']|['Sa', 'L', 'L']": 0.25, "['Sa', 'Sb', 'L', 'L']|['Sa', 'L', 'L']": 0.25, "['Sa', 'L', 'L', 'L']|['Sa', 'L', 'L']": 0.25, "['Sa', 'L', 'L', 'C']|['Sa', 'L', 'L']": 0.25, "['Sa', 'Sa', 'L', 'C']|['Sa', 'L', 'C']": 0.25, "['Sa', 'Sb', 'L', 'C']|['Sa', 'L', 'C']": 0.25, "['Sa', 'L', 'L', 'C']|['Sa', 'L', 'C']": 0.25, "['Sa', 'L', 'C', 'C']|['Sa', 'L', 'C']": 0.25, "['Sa', 'Sa', 'C', 'C']|['Sa', 'C', 'C']": 0.25, "['Sa', 'Sb', 'C', 'C']|['Sa', 'C', 'C']": 0.25, "['Sa', 'L', 'C', 'C']|['Sa', 'C', 'C']": 0.25, "['Sa', 'C', 'C', 'C']|['Sa', 'C', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb']|['Sb', 'Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'Sb', 'Sb']|['Sb', 'Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'Sb', 'L']|['Sb', 'Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'Sb', 'C']|['Sb', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'L']|['Sb', 'Sb', 'L']": 0.25, "['Sb', 'Sb', 'Sb', 'L']|['Sb', 'Sb', 'L']": 0.25, "['Sb', 'Sb', 'L', 'L']|['Sb', 'Sb', 'L']": 0.25, "['Sb', 'Sb', 'L', 'C']|['Sb', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'C']|['Sb', 'Sb', 'C']": 0.25, "['Sb', 'Sb', 'Sb', 'C']|['Sb', 'Sb', 'C']": 0.25, "['Sb', 'Sb', 'L', 'C']|['Sb', 'Sb', 'C']": 0.25, "['Sb', 'Sb', 'C', 'C']|['Sb', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'L', 'L']|['Sb', 'L', 'L']": 0.25, "['Sb', 'Sb', 'L', 'L']|['Sb', 'L', 'L']": 0.25, "['Sb', 'L', 'L', 'L']|['Sb', 'L', 'L']": 0.25, "['Sb', 'L', 'L', 'C']|['Sb', 'L', 'L']": 0.25, "['Sa', 'Sb', 'L', 'C']|['Sb', 'L', 'C']": 0.25, "['Sb', 'Sb', 'L', 'C']|['Sb', 'L', 'C']": 0.25, "['Sb', 'L', 'L', 'C']|['Sb', 'L', 'C']": 0.25, "['Sb', 'L', 'C', 'C']|['Sb', 'L', 'C']": 0.25, "['Sa', 'Sb', 'C', 'C']|['Sb', 'C', 'C']": 0.25, "['Sb', 'Sb', 'C', 'C']|['Sb', 'C', 'C']": 0.25, "['Sb', 'L', 'C', 'C']|['Sb', 'C', 'C']": 0.25, "['Sb', 'C', 'C', 'C']|['Sb', 'C', 'C']": 0.25, "['Sa', 'L', 'L', 'L']|['L', 'L', 'L']": 0.25, "['Sb', 'L', 'L', 'L']|['L', 'L', 'L']": 0.25, "['L', 'L', 'L', 'L']|['L', 'L', 'L']": 0.25, "['L', 'L', 'L', 'C']|['L', 'L', 'L']": 0.25, "['Sa', 'L', 'L', 'C']|['L', 'L', 'C']": 0.25, "['Sb', 'L', 'L', 'C']|['L', 'L', 'C']": 0.25, "['L', 'L', 'L', 'C']|['L', 'L', 'C']": 0.25, "['L', 'L', 'C', 'C']|['L', 'L', 'C']": 0.25, "['Sa', 'L', 'C', 'C']|['L', 'C', 'C']": 0.25, "['Sb', 'L', 'C', 'C']|['L', 'C', 'C']": 0.25, "['L', 'L', 'C', 'C']|['L', 'C', 'C']": 0.25, "['L', 'C', 'C', 'C']|['L', 'C', 'C']": 0.25, "['Sa', 'C', 'C', 'C']|['C', 'C', 'C']": 0.25, "['Sb', 'C', 'C', 'C']|['C', 'C', 'C']": 0.25, "['L', 'C', 'C', 'C']|['C', 'C', 'C']": 0.25, "['C', 'C', 'C', 'C']|['C', 'C', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa', 'Sa']|['Sa', 'Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa', 'Sb']|['Sa', 'Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa', 'L']|['Sa', 'Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa', 'C']|['Sa', 'Sa', 'Sa', 'Sa']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa', 'Sb']|['Sa', 'Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'Sb']|['Sa', 'Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'L']|['Sa', 'Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'C']|['Sa', 'Sa', 'Sa', 'Sb']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa', 'L']|['Sa', 'Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'L']|['Sa', 'Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'Sa', 'L', 'L']|['Sa', 'Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'Sa', 'L', 'C']|['Sa', 'Sa', 'Sa', 'L']": 0.25, "['Sa', 'Sa', 'Sa', 'Sa', 'C']|['Sa', 'Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'C']|['Sa', 'Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'L', 'C']|['Sa', 'Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'C', 'C']|['Sa', 'Sa', 'Sa', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'Sb']|['Sa', 'Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'Sb']|['Sa', 'Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'L']|['Sa', 'Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'C']|['Sa', 'Sa', 'Sb', 'Sb']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'L']|['Sa', 'Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'L']|['Sa', 'Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'L', 'L']|['Sa', 'Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'L', 'C']|['Sa', 'Sa', 'Sb', 'L']": 0.25, "['Sa', 'Sa', 'Sa', 'Sb', 'C']|['Sa', 'Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'C']|['Sa', 'Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'L', 'C']|['Sa', 'Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'C', 'C']|['Sa', 'Sa', 'Sb', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'L', 'L']|['Sa', 'Sa', 'L', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'L', 'L']|['Sa', 'Sa', 'L', 'L']": 0.25, "['Sa', 'Sa', 'L', 'L', 'L']|['Sa', 'Sa', 'L', 'L']": 0.25, "['Sa', 'Sa', 'L', 'L', 'C']|['Sa', 'Sa', 'L', 'L']": 0.25, "['Sa', 'Sa', 'Sa', 'L', 'C']|['Sa', 'Sa', 'L', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'L', 'C']|['Sa', 'Sa', 'L', 'C']": 0.25, "['Sa', 'Sa', 'L', 'L', 'C']|['Sa', 'Sa', 'L', 'C']": 0.25, "['Sa', 'Sa', 'L', 'C', 'C']|['Sa', 'Sa', 'L', 'C']": 0.25, "['Sa', 'Sa', 'Sa', 'C', 'C']|['Sa', 'Sa', 'C', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'C', 'C']|['Sa', 'Sa', 'C', 'C']": 0.25, "['Sa', 'Sa', 'L', 'C', 'C']|['Sa', 'Sa', 'C', 'C']": 0.25, "['Sa', 'Sa', 'C', 'C', 'C']|['Sa', 'Sa', 'C', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'Sb']|['Sa', 'Sb', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'Sb']|['Sa', 'Sb', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'L']|['Sa', 'Sb', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'C']|['Sa', 'Sb', 'Sb', 'Sb']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'L']|['Sa', 'Sb', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'L']|['Sa', 'Sb', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'L', 'L']|['Sa', 'Sb', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'L', 'C']|['Sa', 'Sb', 'Sb', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'Sb', 'C']|['Sa', 'Sb', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'C']|['Sa', 'Sb', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'L', 'C']|['Sa', 'Sb', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'C', 'C']|['Sa', 'Sb', 'Sb', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'L', 'L']|['Sa', 'Sb', 'L', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'L', 'L']|['Sa', 'Sb', 'L', 'L']": 0.25, "['Sa', 'Sb', 'L', 'L', 'L']|['Sa', 'Sb', 'L', 'L']": 0.25, "['Sa', 'Sb', 'L', 'L', 'C']|['Sa', 'Sb', 'L', 'L']": 0.25, "['Sa', 'Sa', 'Sb', 'L', 'C']|['Sa', 'Sb', 'L', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'L', 'C']|['Sa', 'Sb', 'L', 'C']": 0.25, "['Sa', 'Sb', 'L', 'L', 'C']|['Sa', 'Sb', 'L', 'C']": 0.25, "['Sa', 'Sb', 'L', 'C', 'C']|['Sa', 'Sb', 'L', 'C']": 0.25, "['Sa', 'Sa', 'Sb', 'C', 'C']|['Sa', 'Sb', 'C', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'C', 'C']|['Sa', 'Sb', 'C', 'C']": 0.25, "['Sa', 'Sb', 'L', 'C', 'C']|['Sa', 'Sb', 'C', 'C']": 0.25, "['Sa', 'Sb', 'C', 'C', 'C']|['Sa', 'Sb', 'C', 'C']": 0.25, "['Sa', 'Sa', 'L', 'L', 'L']|['Sa', 'L', 'L', 'L']": 0.25, "['Sa', 'Sb', 'L', 'L', 'L']|['Sa', 'L', 'L', 'L']": 0.25, "['Sa', 'L', 'L', 'L', 'L']|['Sa', 'L', 'L', 'L']": 0.25, "['Sa', 'L', 'L', 'L', 'C']|['Sa', 'L', 'L', 'L']": 0.25, "['Sa', 'Sa', 'L', 'L', 'C']|['Sa', 'L', 'L', 'C']": 0.25, "['Sa', 'Sb', 'L', 'L', 'C']|['Sa', 'L', 'L', 'C']": 0.25, "['Sa', 'L', 'L', 'L', 'C']|['Sa', 'L', 'L', 'C']": 0.25, "['Sa', 'L', 'L', 'C', 'C']|['Sa', 'L', 'L', 'C']": 0.25, "['Sa', 'Sa', 'L', 'C', 'C']|['Sa', 'L', 'C', 'C']": 0.25, "['Sa', 'Sb', 'L', 'C', 'C']|['Sa', 'L', 'C', 'C']": 0.25, "['Sa', 'L', 'L', 'C', 'C']|['Sa', 'L', 'C', 'C']": 0.25, "['Sa', 'L', 'C', 'C', 'C']|['Sa', 'L', 'C', 'C']": 0.25, "['Sa', 'Sa', 'C', 'C', 'C']|['Sa', 'C', 'C', 'C']": 0.25, "['Sa', 'Sb', 'C', 'C', 'C']|['Sa', 'C', 'C', 'C']": 0.25, "['Sa', 'L', 'C', 'C', 'C']|['Sa', 'C', 'C', 'C']": 0.25, "['Sa', 'C', 'C', 'C', 'C']|['Sa', 'C', 'C', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'Sb']|['Sb', 'Sb', 'Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'Sb', 'Sb', 'Sb']|['Sb', 'Sb', 'Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'Sb', 'Sb', 'L']|['Sb', 'Sb', 'Sb', 'Sb']": 0.25, "['Sb', 'Sb', 'Sb', 'Sb', 'C']|['Sb', 'Sb', 'Sb', 'Sb']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'L']|['Sb', 'Sb', 'Sb', 'L']": 0.25, "['Sb', 'Sb', 'Sb', 'Sb', 'L']|['Sb', 'Sb', 'Sb', 'L']": 0.25, "['Sb', 'Sb', 'Sb', 'L', 'L']|['Sb', 'Sb', 'Sb', 'L']": 0.25, "['Sb', 'Sb', 'Sb', 'L', 'C']|['Sb', 'Sb', 'Sb', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'Sb', 'C']|['Sb', 'Sb', 'Sb', 'C']": 0.25, "['Sb', 'Sb', 'Sb', 'Sb', 'C']|['Sb', 'Sb', 'Sb', 'C']": 0.25, "['Sb', 'Sb', 'Sb', 'L', 'C']|['Sb', 'Sb', 'Sb', 'C']": 0.25, "['Sb', 'Sb', 'Sb', 'C', 'C']|['Sb', 'Sb', 'Sb', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'L', 'L']|['Sb', 'Sb', 'L', 'L']": 0.25, "['Sb', 'Sb', 'Sb', 'L', 'L']|['Sb', 'Sb', 'L', 'L']": 0.25, "['Sb', 'Sb', 'L', 'L', 'L']|['Sb', 'Sb', 'L', 'L']": 0.25, "['Sb', 'Sb', 'L', 'L', 'C']|['Sb', 'Sb', 'L', 'L']": 0.25, "['Sa', 'Sb', 'Sb', 'L', 'C']|['Sb', 'Sb', 'L', 'C']": 0.25, "['Sb', 'Sb', 'Sb', 'L', 'C']|['Sb', 'Sb', 'L', 'C']": 0.25, "['Sb', 'Sb', 'L', 'L', 'C']|['Sb', 'Sb', 'L', 'C']": 0.25, "['Sb', 'Sb', 'L', 'C', 'C']|['Sb', 'Sb', 'L', 'C']": 0.25, "['Sa', 'Sb', 'Sb', 'C', 'C']|['Sb', 'Sb', 'C', 'C']": 0.25, "['Sb', 'Sb', 'Sb', 'C', 'C']|['Sb', 'Sb', 'C', 'C']": 0.25, "['Sb', 'Sb', 'L', 'C', 'C']|['Sb', 'Sb', 'C', 'C']": 0.25, "['Sb', 'Sb', 'C', 'C', 'C']|['Sb', 'Sb', 'C', 'C']": 0.25, "['Sa', 'Sb', 'L', 'L', 'L']|['Sb', 'L', 'L', 'L']": 0.25, "['Sb', 'Sb', 'L', 'L', 'L']|['Sb', 'L', 'L', 'L']": 0.25, "['Sb', 'L', 'L', 'L', 'L']|['Sb', 'L', 'L', 'L']": 0.25, "['Sb', 'L', 'L', 'L', 'C']|['Sb', 'L', 'L', 'L']": 0.25, "['Sa', 'Sb', 'L', 'L', 'C']|['Sb', 'L', 'L', 'C']": 0.25, "['Sb', 'Sb', 'L', 'L', 'C']|['Sb', 'L', 'L', 'C']": 0.25, "['Sb', 'L', 'L', 'L', 'C']|['Sb', 'L', 'L', 'C']": 0.25, "['Sb', 'L', 'L', 'C', 'C']|['Sb', 'L', 'L', 'C']": 0.25, "['Sa', 'Sb', 'L', 'C', 'C']|['Sb', 'L', 'C', 'C']": 0.25, "['Sb', 'Sb', 'L', 'C', 'C']|['Sb', 'L', 'C', 'C']": 0.25, "['Sb', 'L', 'L', 'C', 'C']|['Sb', 'L', 'C', 'C']": 0.25, "['Sb', 'L', 'C', 'C', 'C']|['Sb', 'L', 'C', 'C']": 0.25, "['Sa', 'Sb', 'C', 'C', 'C']|['Sb', 'C', 'C', 'C']": 0.25, "['Sb', 'Sb', 'C', 'C', 'C']|['Sb', 'C', 'C', 'C']": 0.25, "['Sb', 'L', 'C', 'C', 'C']|['Sb', 'C', 'C', 'C']": 0.25, "['Sb', 'C', 'C', 'C', 'C']|['Sb', 'C', 'C', 'C']": 0.25, "['Sa', 'L', 'L', 'L', 'L']|['L', 'L', 'L', 'L']": 0.25, "['Sb', 'L', 'L', 'L', 'L']|['L', 'L', 'L', 'L']": 0.25, "['L', 'L', 'L', 'L', 'L']|['L', 'L', 'L', 'L']": 0.25, "['L', 'L', 'L', 'L', 'C']|['L', 'L', 'L', 'L']": 0.25, "['Sa', 'L', 'L', 'L', 'C']|['L', 'L', 'L', 'C']": 0.25, "['Sb', 'L', 'L', 'L', 'C']|['L', 'L', 'L', 'C']": 0.25, "['L', 'L', 'L', 'L', 'C']|['L', 'L', 'L', 'C']": 0.25, "['L', 'L', 'L', 'C', 'C']|['L', 'L', 'L', 'C']": 0.25, "['Sa', 'L', 'L', 'C', 'C']|['L', 'L', 'C', 'C']": 0.25, "['Sb', 'L', 'L', 'C', 'C']|['L', 'L', 'C', 'C']": 0.25, "['L', 'L', 'L', 'C', 'C']|['L', 'L', 'C', 'C']": 0.25, "['L', 'L', 'C', 'C', 'C']|['L', 'L', 'C', 'C']": 0.25, "['Sa', 'L', 'C', 'C', 'C']|['L', 'C', 'C', 'C']": 0.25, "['Sb', 'L', 'C', 'C', 'C']|['L', 'C', 'C', 'C']": 0.25, "['L', 'L', 'C', 'C', 'C']|['L', 'C', 'C', 'C']": 0.25, "['L', 'C', 'C', 'C', 'C']|['L', 'C', 'C', 'C']": 0.25, "['Sa', 'C', 'C', 'C', 'C']|['C', 'C', 'C', 'C']": 0.25, "['Sb', 'C', 'C', 'C', 'C']|['C', 'C', 'C', 'C']": 0.25, "['L', 'C', 'C', 'C', 'C']|['C', 'C', 'C', 'C']": 0.25, "['C', 'C', 'C', 'C', 'C']|['C', 'C', 'C', 'C']": 0.25}
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
[]
<Synchronized wrapper for c_int(99)>
root offset is:  1
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND']

 PCC-31275
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sa0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.1], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -109091/10000100, 1/1100], [0, -1/(11*Cout), -511/(550*Cout)]]', 'b': '[[0], [1/110], [10/(11*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -1/11, 1/11], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [10/11], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -1100002000/100001100001, 1/100000100], [0, -1/(1000001*Cout), -1000501/(50000050*Cout)]]', 'b': '[[0], [10000/1000001], [10/(1000001*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -100000/1000001, 1/1000001], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [1000000/1000001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '12', '0'], 'net_list': [['Sa0', '12', '0'], ['Sb0', '0', '12'], ['L0', '12', '0'], ['Sb1', 'OUT', 'IN'], ['L1', 'IN', '12']]}
['VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND']

 PCC-31275
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sa0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.3], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -109091/10000100, 1/1100], [0, -1/(11*Cout), -511/(550*Cout)]]', 'b': '[[0], [1/110], [10/(11*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -1/11, 1/11], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [10/11], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -1100002000/100001100001, 1/100000100], [0, -1/(1000001*Cout), -1000501/(50000050*Cout)]]', 'b': '[[0], [10000/1000001], [10/(1000001*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -100000/1000001, 1/1000001], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [1000000/1000001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '12', '0'], 'net_list': [['Sa0', '12', '0'], ['Sb0', '0', '12'], ['L0', '12', '0'], ['Sb1', 'OUT', 'IN'], ['L1', 'IN', '12']]}
['VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND']

 PCC-31275
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sa0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.5], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -109091/10000100, 1/1100], [0, -1/(11*Cout), -511/(550*Cout)]]', 'b': '[[0], [1/110], [10/(11*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -1/11, 1/11], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [10/11], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -1100002000/100001100001, 1/100000100], [0, -1/(1000001*Cout), -1000501/(50000050*Cout)]]', 'b': '[[0], [10000/1000001], [10/(1000001*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -100000/1000001, 1/1000001], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [1000000/1000001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '12', '0'], 'net_list': [['Sa0', '12', '0'], ['Sb0', '0', '12'], ['L0', '12', '0'], ['Sb1', 'OUT', 'IN'], ['L1', 'IN', '12']]}
['VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND']

 PCC-31275
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sa0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.7], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -109091/10000100, 1/1100], [0, -1/(11*Cout), -511/(550*Cout)]]', 'b': '[[0], [1/110], [10/(11*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -1/11, 1/11], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [10/11], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -1100002000/100001100001, 1/100000100], [0, -1/(1000001*Cout), -1000501/(50000050*Cout)]]', 'b': '[[0], [10000/1000001], [10/(1000001*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -100000/1000001, 1/1000001], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [1000000/1000001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '12', '0'], 'net_list': [['Sa0', '12', '0'], ['Sb0', '0', '12'], ['L0', '12', '0'], ['Sb1', 'OUT', 'IN'], ['L1', 'IN', '12']]}
['VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND']

 PCC-31275
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sa0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp <Synchronized wrapper for c_int(100)>
root offset is:  1
['VIN - Sa - L - VOUT', 'VIN - L - L - L - GND', 'VOUT - L - Sa - L - L - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['IN', 'N-L0-L2']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2', 'N-L1-L2']), ('L3', ['N-L3-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L3-Sa0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
PCC-31273 violations

['VIN - Sa - L - VOUT', 'VIN - L - L - L - GND', 'VOUT - L - Sa - L - L - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['IN', 'N-L0-L2']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2', 'N-L1-L2']), ('L3', ['N-L3-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L3-Sa0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
['VIN - Sa - L - VOUT', 'VIN - L - L - L - GND', 'VOUT - L - Sa - L - L - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['IN', 'N-L0-L2']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2', 'N-L1-L2']), ('L3', ['N-L3-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L3-Sa0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
['VIN - Sa - L - VOUT', 'VIN - L - L - L - GND', 'VOUT - L - Sa - L - L - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['IN', 'N-L0-L2']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2', 'N-L1-L2']), ('L3', ['N-L3-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L3-Sa0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
['VIN - Sa - L - VOUT', 'VIN - L - L - L - GND', 'VOUT - L - Sa - L - L - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['IN', 'N-L0-L2']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2', 'N-L1-L2']), ('L3', ['N-L3-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L3-Sa0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
['VIN - Sb - L - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - Sb - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.1], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-11000/1000011, -1000/1000011, 1/100], [-1000/1000011, -275003/25000275, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-10000/1000011], [-100001/10000110], [0]]', 'c': '[[1100000/1000011, 100000/1000011, 0], [100000/1000011, 1100012/1000011, 0], [100000/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[1000000/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001/100001100, -1/100001100, 1/100], [-1/100001100, -100001200001/100001100, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-1/10000110], [-100001/10000110], [0]]', 'c': '[[1000001/1000011, 1/1000011, 0], [1/1000011, 100001200001/1000011, 0], [1/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[10/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '10', '0', '12'], 'net_list': [['Sa0', '10', '0'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '10'], ['Sb1', 'IN', '10'], ['L1', '0', '12']]}
['VIN - Sb - L - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - Sb - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.3], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-11000/1000011, -1000/1000011, 1/100], [-1000/1000011, -275003/25000275, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-10000/1000011], [-100001/10000110], [0]]', 'c': '[[1100000/1000011, 100000/1000011, 0], [100000/1000011, 1100012/1000011, 0], [100000/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[1000000/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001/100001100, -1/100001100, 1/100], [-1/100001100, -100001200001/100001100, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-1/10000110], [-100001/10000110], [0]]', 'c': '[[1000001/1000011, 1/1000011, 0], [1/1000011, 100001200001/1000011, 0], [1/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[10/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '10', '0', '12'], 'net_list': [['Sa0', '10', '0'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '10'], ['Sb1', 'IN', '10'], ['L1', '0', '12']]}
['VIN - Sb - L - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - Sb - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.5], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-11000/1000011, -1000/1000011, 1/100], [-1000/1000011, -275003/25000275, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-10000/1000011], [-100001/10000110], [0]]', 'c': '[[1100000/1000011, 100000/1000011, 0], [100000/1000011, 1100012/1000011, 0], [100000/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[1000000/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001/100001100, -1/100001100, 1/100], [-1/100001100, -100001200001/100001100, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-1/10000110], [-100001/10000110], [0]]', 'c': '[[1000001/1000011, 1/1000011, 0], [1/1000011, 100001200001/1000011, 0], [1/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[10/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '10', '0', '12'], 'net_list': [['Sa0', '10', '0'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '10'], ['Sb1', 'IN', '10'], ['L1', '0', '12']]}
['VIN - Sb - L - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - Sb - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.7], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-11000/1000011, -1000/1000011, 1/100], [-1000/1000011, -275003/25000275, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-10000/1000011], [-100001/10000110], [0]]', 'c': '[[1100000/1000011, 100000/1000011, 0], [100000/1000011, 1100012/1000011, 0], [100000/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[1000000/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001/100001100, -1/100001100, 1/100], [-1/100001100, -100001200001/100001100, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-1/10000110], [-100001/10000110], [0]]', 'c': '[[1000001/1000011, 1/1000011, 0], [1/1000011, 100001200001/1000011, 0], [1/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[10/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '10', '0', '12'], 'net_list': [['Sa0', '10', '0'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '10'], ['Sb1', 'IN', '10'], ['L1', '0', '12']]}
['VIN - Sb - L - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - Sb - L - GND']

 PCC-31273
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-11000/1000011, -1000/1000011, 1/100], [-1000/1000011, -275003/25000275, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-10000/1000011], [-100001/10000110], [0]]', 'c': '[[1100000/1000011, 100000/1000011, 0], [100000/1000011, 1100012/1000011, 0], [100000/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[1000000/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_10(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001/100001100, -1/100001100, 1/100], [-1/100001100, -100001200001/100001100, 0], [-1/Cout, 0, -1/(50*Cout)]]', 'b': '[[-1/10000110], [-100001/10000110], [0]]', 'c': '[[1000001/1000011, 1/1000011, 0], [1/1000011, 100001200001/1000011, 0], [1/1000011, 100001/1000011, 0], [0, 0, 0], [0, 0, 1]]', 'd': '[[10/1000011], [1000010/1000011], [1000010/1000011], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '10', '0', '12'], 'net_list': [['Sa0', '10', '0'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '10'], ['Sb1', 'IN', '10'], ['L1', '0', '12']]}
['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - C - Sb - GND']

 PCC-31273
1
OrderedDict([('C0', ['N-C0-Sa1-Sb0', 'N-C0-Sa2']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sa2', ['IN', 'N-C0-Sa2']), ('Sb0', ['0', 'N-C0-Sa1-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.1], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-50026150551/(2500057500050*Cout), 1/(100002300002*Cout)], [1/1000023000020, -100001200001/100002300002000000]]', 'b': '[[500010/(50001150001*Cout)], [50000/50001150001]]', 'c': '[[1/50001150001, 100001300001/100002300002], [1/50001150001, -1000001/100002300002], [50001/50001150001, 50000/50001150001], [0, 0], [1, 0]]', 'd': '[[1000000/50001150001], [1000000/50001150001], [50001000000/50001150001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-102200613/(110000650*Cout), 1/(2200013*Cout)], [1/22000130, -550006/11000065]]', 'b': '[[2000010/(2200013*Cout)], [1/2200013]]', 'c': '[[200000/2200013, 1100013/2200013], [200000/2200013, -1100000/2200013], [200001/2200013, 1/2200013], [0, 0], [1, 0]]', 'd': '[[2000000/2200013], [2000000/2200013], [2000010/2200013], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'Ra1', 'Rb1', 'Ra2', 'Rb2'], 'node_list': ['IN', 'OUT', 'IN_exact', '7', '0', '9'], 'net_list': [['Sa0', '7', 'IN'], ['Sb0', '0', '9'], ['C0', '7', '9'], ['Sa1', '9', 'IN'], ['Sa2', 'IN', 'OUT']]}
['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - C - Sb - GND']

 PCC-31273
1
OrderedDict([('C0', ['N-C0-Sa1-Sb0', 'N-C0-Sa2']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sa2', ['IN', 'N-C0-Sa2']), ('Sb0', ['0', 'N-C0-Sa1-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.3], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-50026150551/(2500057500050*Cout), 1/(100002300002*Cout)], [1/1000023000020, -100001200001/100002300002000000]]', 'b': '[[500010/(50001150001*Cout)], [50000/50001150001]]', 'c': '[[1/50001150001, 100001300001/100002300002], [1/50001150001, -1000001/100002300002], [50001/50001150001, 50000/50001150001], [0, 0], [1, 0]]', 'd': '[[1000000/50001150001], [1000000/50001150001], [50001000000/50001150001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-102200613/(110000650*Cout), 1/(2200013*Cout)], [1/22000130, -550006/11000065]]', 'b': '[[2000010/(2200013*Cout)], [1/2200013]]', 'c': '[[200000/2200013, 1100013/2200013], [200000/2200013, -1100000/2200013], [200001/2200013, 1/2200013], [0, 0], [1, 0]]', 'd': '[[2000000/2200013], [2000000/2200013], [2000010/2200013], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'Ra1', 'Rb1', 'Ra2', 'Rb2'], 'node_list': ['IN', 'OUT', 'IN_exact', '7', '0', '9'], 'net_list': [['Sa0', '7', 'IN'], ['Sb0', '0', '9'], ['C0', '7', '9'], ['Sa1', '9', 'IN'], ['Sa2', 'IN', 'OUT']]}
['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - C - Sb - GND']

 PCC-31273
1
OrderedDict([('C0', ['N-C0-Sa1-Sb0', 'N-C0-Sa2']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sa2', ['IN', 'N-C0-Sa2']), ('Sb0', ['0', 'N-C0-Sa1-Sb0'])])
{'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -109091/10000100, 1/1100], [0, -1/(11*Cout), -511/(550*Cout)]]', 'b': '[[0], [1/110], [10/(11*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -1/11, 1/11], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [10/11], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/100001, 1000/100001, 0], [1000/100001, -1100002000/100001100001, 1/100000100], [0, -1/(1000001*Cout), -1000501/(50000050*Cout)]]', 'b': '[[0], [10000/1000001], [10/(1000001*Cout)]]', 'c': '[[-100000/100001, 100000/100001, 0], [0, -100000/1000001, 1/1000001], [0, 0, 0], [0, 0, 1]]', 'd': '[[0], [1000000/1000001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Rb1', 'Ra1', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '12', '0'], 'net_list': [['Sa0', '12', '0'], ['Sb0', '0', '12'], ['L0', '12', '0'], ['Sb1', 'OUT', 'IN'], ['L1', 'IN', '12']]}
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - C - C - C - Sb - GND', 'VOUT - C - C - C - Sb - GND']

 PCC-31275
1
OrderedDict([('C0', ['N-C0-C2', 'N-C0-Sb0']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.1], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-51000551/(50000050*Cout), 1/Cout, 1/Cout, -1/Cout], [1/10, -1/10, -1/10, 1/10], [1/10, -1/10, -1/10, 1/10], [-1/10, 1/10, 1/10, -1/10]]', 'b': '[[10/(1000001*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/1000001, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [1000000/1000001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1022011/(1100000*Cout), 1/(100000*Cout), 1/(100000*Cout), -1/(100000*Cout)], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [-1/1000000, 1/1000000, 1/1000000, -1/1000000]]', 'b': '[[10/(11*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/11, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [10/11], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'C1', 'C2'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '11', '10', '12'], 'net_list': [['Sa0', 'IN', 'OUT'], ['Sb0', '0', '11'], ['C0', '10', '12'], ['C1', 'OUT', '10'], ['C2', '11', '12']]}
['VIN - Sa - VOUT', 'VIN - Sa - C - C - C - Sb - GND', 'VOUT - C - C - C - Sb - GND']

 PCC-31275
1
OrderedDict([('C0', ['N-C0-C2', 'N-C0-Sb0']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.3], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-51000551/(50000050*Cout), 1/Cout, 1/Cout, -1/Cout], [1/10, -1/10, -1/10, 1/10], [1/10, -1/10, -1/10, 1/10], [-1/10, 1/10, 1/10, -1/10]]', 'b': '[[10/(1000001*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/1000001, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [1000000/1000001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1022011/(1100000*Cout), 1/(100000*Cout), 1/(100000*Cout), -1/(100000*Cout)], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [-1/1000000, 1/1000000, 1/1000000, -1/1000000]]', 'b': '[[10/(11*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/11, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [10/11], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'C1', 'C2'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '11', '10', '12'], 'net_list': [['Sa0', 'IN', 'OUT'], ['Sb0', '0', '11'], ['C0', '10', '12'], ['C1', 'OUT', '10'], ['C2', '11', '12']]}
['VIN - Sa - VOUT', 'VIN - Sa - C - C - C - Sb - GND', 'VOUT - C - C - C - Sb - GND']

 PCC-31275
1
OrderedDict([('C0', ['N-C0-C2', 'N-C0-Sb0']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.5], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-51000551/(50000050*Cout), 1/Cout, 1/Cout, -1/Cout], [1/10, -1/10, -1/10, 1/10], [1/10, -1/10, -1/10, 1/10], [-1/10, 1/10, 1/10, -1/10]]', 'b': '[[10/(1000001*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/1000001, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [1000000/1000001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1022011/(1100000*Cout), 1/(100000*Cout), 1/(100000*Cout), -1/(100000*Cout)], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [-1/1000000, 1/1000000, 1/1000000, -1/1000000]]', 'b': '[[10/(11*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/11, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [10/11], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'C1', 'C2'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '11', '10', '12'], 'net_list': [['Sa0', 'IN', 'OUT'], ['Sb0', '0', '11'], ['C0', '10', '12'], ['C1', 'OUT', '10'], ['C2', '11', '12']]}
['VIN - Sa - VOUT', 'VIN - Sa - C - C - C - Sb - GND', 'VOUT - C - C - C - Sb - GND']

 PCC-31275
1
OrderedDict([('C0', ['N-C0-C2', 'N-C0-Sb0']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.7], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.5], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-50026150551/(2500057500050*Cout), 1/(100002300002*Cout)], [1/1000023000020, -100001200001/100002300002000000]]', 'b': '[[500010/(50001150001*Cout)], [50000/50001150001]]', 'c': '[[1/50001150001, 100001300001/100002300002], [1/50001150001, -1000001/100002300002], [50001/50001150001, 50000/50001150001], [0, 0], [1, 0]]', 'd': '[[1000000/50001150001], [1000000/50001150001], [50001000000/50001150001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-102200613/(110000650*Cout), 1/(2200013*Cout)], [1/22000130, -550006/11000065]]', 'b': '[[2000010/(2200013*Cout)], [1/2200013]]', 'c': '[[200000/2200013, 1100013/2200013], [200000/2200013, -1100000/2200013], [200001/2200013, 1/2200013], [0, 0], [1, 0]]', 'd': '[[2000000/2200013], [2000000/2200013], [2000010/2200013], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'Ra1', 'Rb1', 'Ra2', 'Rb2'], 'node_list': ['IN', 'OUT', 'IN_exact', '7', '0', '9'], 'net_list': [['Sa0', '7', 'IN'], ['Sb0', '0', '9'], ['C0', '7', '9'], ['Sa1', '9', 'IN'], ['Sa2', 'IN', 'OUT']]}
['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - C - Sb - GND']

 PCC-31273
1
OrderedDict([('C0', ['N-C0-Sa1-Sb0', 'N-C0-Sa2']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sa2', ['IN', 'N-C0-Sa2']), ('Sb0', ['0', 'N-C0-Sa1-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.7], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-50026150551/(2500057500050*Cout), 1/(100002300002*Cout)], [1/1000023000020, -100001200001/100002300002000000]]', 'b': '[[500010/(50001150001*Cout)], [50000/50001150001]]', 'c': '[[1/50001150001, 100001300001/100002300002], [1/50001150001, -1000001/100002300002], [50001/50001150001, 50000/50001150001], [0, 0], [1, 0]]', 'd': '[[1000000/50001150001], [1000000/50001150001], [50001000000/50001150001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-102200613/(110000650*Cout), 1/(2200013*Cout)], [1/22000130, -550006/11000065]]', 'b': '[[2000010/(2200013*Cout)], [1/2200013]]', 'c': '[[200000/2200013, 1100013/2200013], [200000/2200013, -1100000/2200013], [200001/2200013, 1/2200013], [0, 0], [1, 0]]', 'd': '[[2000000/2200013], [2000000/2200013], [2000010/2200013], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'Ra1', 'Rb1', 'Ra2', 'Rb2'], 'node_list': ['IN', 'OUT', 'IN_exact', '7', '0', '9'], 'net_list': [['Sa0', '7', 'IN'], ['Sb0', '0', '9'], ['C0', '7', '9'], ['Sa1', '9', 'IN'], ['Sa2', 'IN', 'OUT']]}
['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - C - Sb - GND']

 PCC-31273
1
OrderedDict([('C0', ['N-C0-Sa1-Sb0', 'N-C0-Sa2']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sa2', ['IN', 'N-C0-Sa2']), ('Sb0', ['0', 'N-C0-Sa1-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-50026150551/(2500057500050*Cout), 1/(100002300002*Cout)], [1/1000023000020, -100001200001/100002300002000000]]', 'b': '[[500010/(50001150001*Cout)], [50000/50001150001]]', 'c': '[[1/50001150001, 100001300001/100002300002], [1/50001150001, -1000001/100002300002], [50001/50001150001, 50000/50001150001], [0, 0], [1, 0]]', 'd': '[[1000000/50001150001], [1000000/50001150001], [50001000000/50001150001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)]]', 'y': '[[v_7(t)], [v_9(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-102200613/(110000650*Cout), 1/(2200013*Cout)], [1/22000130, -550006/11000065]]', 'b': '[[2000010/(2200013*Cout)], [1/2200013]]', 'c': '[[200000/2200013, 1100013/2200013], [200000/2200013, -1100000/2200013], [200001/2200013, 1/2200013], [0, 0], [1, 0]]', 'd': '[[2000000/2200013], [2000000/2200013], [2000010/2200013], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'Ra1', 'Rb1', 'Ra2', 'Rb2'], 'node_list': ['IN', 'OUT', 'IN_exact', '7', '0', '9'], 'net_list': [['Sa0', '7', 'IN'], ['Sb0', '0', '9'], ['C0', '7', '9'], ['Sa1', '9', 'IN'], ['Sa2', 'IN', 'OUT']]}
['VIN - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - L - GND']

 PCC-31273
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.1], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'C0', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', 'OUT', 'IN'], ['Sb0', 'OUT', 'IN'], ['L0', '0', '12'], ['C0', 'IN', '12'], ['L1', '0', '12']]}
['VIN - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - L - GND']

 PCC-31273
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'A state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-51000551/(50000050*Cout), 1/Cout, 1/Cout, -1/Cout], [1/10, -1/10, -1/10, 1/10], [1/10, -1/10, -1/10, 1/10], [-1/10, 1/10, 1/10, -1/10]]', 'b': '[[10/(1000001*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/1000001, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [1000000/1000001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1022011/(1100000*Cout), 1/(100000*Cout), 1/(100000*Cout), -1/(100000*Cout)], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [-1/1000000, 1/1000000, 1/1000000, -1/1000000]]', 'b': '[[10/(11*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/11, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [10/11], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'C1', 'C2'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '11', '10', '12'], 'net_list': [['Sa0', 'IN', 'OUT'], ['Sb0', '0', '11'], ['C0', '10', '12'], ['C1', 'OUT', '10'], ['C2', '11', '12']]}
['VIN - Sa - VOUT', 'VIN - Sa - C - C - C - Sb - GND', 'VOUT - C - C - C - Sb - GND']

 PCC-31275
1
OrderedDict([('C0', ['N-C0-C2', 'N-C0-Sb0']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-51000551/(50000050*Cout), 1/Cout, 1/Cout, -1/Cout], [1/10, -1/10, -1/10, 1/10], [1/10, -1/10, -1/10, 1/10], [-1/10, 1/10, 1/10, -1/10]]', 'b': '[[10/(1000001*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/1000001, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [1000000/1000001], [1], [0]]'}, 'B state': {'x': '[[v_Cout(t)], [v_C0(t)], [v_C1(t)], [v_C2(t)]]', 'y': '[[v_10(t)], [v_11(t)], [v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1022011/(1100000*Cout), 1/(100000*Cout), 1/(100000*Cout), -1/(100000*Cout)], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [1/1000000, -1/1000000, -1/1000000, 1/1000000], [-1/1000000, 1/1000000, 1/1000000, -1/1000000]]', 'b': '[[10/(11*Cout)], [0], [0], [0]]', 'c': '[[1, 0, -1, 0], [1, -1, -1, 1], [1, -1, -1, 0], [1/11, 0, 0, 0], [0, 0, 0, 0], [1, 0, 0, 0]]', 'd': '[[0], [0], [0], [10/11], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'C0', 'C1', 'C2'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '11', '10', '12'], 'net_list': [['Sa0', 'IN', 'OUT'], ['Sb0', '0', '11'], ['C0', '10', '12'], ['C1', 'OUT', '10'], ['C2', '11', '12']]}
['VIN - Sb - L - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-31275
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sa1-Sb0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.1], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-5500/1050011, 500011/105001100], [-500011/(1050011*Cout), -26050561/(52500550*Cout)]]', 'b': '[[-5000/1050011], [500000/(1050011*Cout)]]', 'c': '[[550000/1050011, 550000/1050011], [50000/1050011, 50000/1050011], [0, 0], [0, 1]]', 'd': '[[500000/1050011], [1000010/1050011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001000/200002200001, 2000012000/200002200001], [-200001200000/(200002200001*Cout), -200102200601/(10000110000050*Cout)]]', 'b': '[[-10000/200002200001], [10/(200002200001*Cout)]]', 'c': '[[100000100000/200002200001, 1000001/200002200001], [100000/200002200001, 1/200002200001], [0, 0], [0, 1]]', 'd': '[[1000000/200002200001], [200002000000/200002200001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Ra1', 'Rb1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', '0', '12'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '12'], ['Sa1', '0', '12'], ['Sb1', 'OUT', '12']]}
['VIN - Sb - L - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-31275
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sa1-Sb0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.3], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-5500/1050011, 500011/105001100], [-500011/(1050011*Cout), -26050561/(52500550*Cout)]]', 'b': '[[-5000/1050011], [500000/(1050011*Cout)]]', 'c': '[[550000/1050011, 550000/1050011], [50000/1050011, 50000/1050011], [0, 0], [0, 1]]', 'd': '[[500000/1050011], [1000010/1050011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001000/200002200001, 2000012000/200002200001], [-200001200000/(200002200001*Cout), -200102200601/(10000110000050*Cout)]]', 'b': '[[-10000/200002200001], [10/(200002200001*Cout)]]', 'c': '[[100000100000/200002200001, 1000001/200002200001], [100000/200002200001, 1/200002200001], [0, 0], [0, 1]]', 'd': '[[1000000/200002200001], [200002000000/200002200001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Ra1', 'Rb1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', '0', '12'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '12'], ['Sa1', '0', '12'], ['Sb1', 'OUT', '12']]}
['VIN - Sb - L - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-31275
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sa1-Sb0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.5], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'Duty_Cycle': [0.3], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'C0', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', 'OUT', 'IN'], ['Sb0', 'OUT', 'IN'], ['L0', '0', '12'], ['C0', 'IN', '12'], ['L1', '0', '12']]}
['VIN - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - L - GND']

 PCC-31273
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.5], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'C0', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', 'OUT', 'IN'], ['Sb0', 'OUT', 'IN'], ['L0', '0', '12'], ['C0', 'IN', '12'], ['L1', '0', '12']]}
['VIN - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - L - GND']

 PCC-31273
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.7], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'C0', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', 'OUT', 'IN'], ['Sb0', 'OUT', 'IN'], ['L0', '0', '12'], ['C0', 'IN', '12'], ['L1', '0', '12']]}
['VIN - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - L - GND']

 PCC-31273
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp 2
[100, 42, 16, 6, 3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
current step is:  0
Traceback (most recent call last):
  File "main.py", line 136, in <module>
    main('PyCharm')
  File "main.py", line 78, in main
    parallel_UCF_test(trajectory=traj,
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/Algorithms/ParallelUCF.py", line 516, in parallel_UCF_test
    n_tree_size = conn_main[n].recv()
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 250, in recv
    buf = self._recv_bytes()
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 414, in _recv_bytes
    buf = self._recv(4)
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 379, in _recv
    chunk = read(handle, remaining)
KeyboardInterrupt
{'A state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [i_L1(t)], [v_Cout(t)], [v_C0(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [-1000/1100001, -1000/1100001, -100001/110000100, 1/100], [100001/(1100001*Cout), 100001/(1100001*Cout), -51100501/(55000050*Cout), 0], [-1/10, -1/10, 0, 0]]', 'b': '[[-10000/1100001], [-10000/1100001], [1000010/(1100001*Cout)], [0]]', 'c': '[[100000/1100001, 100000/1100001, 100001/1100001, -1], [100000/1100001, 100000/1100001, 100001/1100001, 0], [0, 0, 0, 0], [0, 0, 1, 0]]', 'd': '[[1000000/1100001], [1000000/1100001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'C0', 'L1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', 'OUT', 'IN'], ['Sb0', 'OUT', 'IN'], ['L0', '0', '12'], ['C0', 'IN', '12'], ['L1', '0', '12']]}
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-31273
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
PCC-31273 violations

['VIN - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-31273
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
['VIN - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-31273
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
['VIN - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-31273
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
['VIN - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-31273
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - L - GND', 'VIN - L - L - Sb - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-31273
Process Process-2:
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/uct.py", line 289, in set_and_plan
    tree_size, tmp_planner, depth = self.plan(total_traj)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/uct.py", line 359, in plan
    mc_return = self.MC_sampling_terminal(next_node)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/uct.py", line 476, in MC_sampling_terminal
    final_return = self.sim_.default_policy(mc_return, self.gamma_, discount, reward_list,
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 1744, in default_policy
    r = self.act(action)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 935, in act
    self.reward = self.get_reward()
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 963, in get_reward
    return self.get_sweep_reward_with_para()
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 991, in get_sweep_reward_with_para
    reward, _, _, _ = self.get_reward_using_anal()
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 1122, in get_reward_using_anal
    para_result = get_one_analytics_result(current=self.current,
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/SimulatorAnalysis/UCT_data_collection.py", line 310, in get_one_analytics_result
    key, device_list = generate_circuit_info_in_target_folder(target_folder=target_folder, file_name=name, graph=graph,
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/SimulatorAnalysis/UCT_data_collection.py", line 29, in generate_circuit_info_in_target_folder
    key, key_data = generate_key_data(directory_path=directory_path, name=file_name,
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/SimulatorAnalysis/data.py", line 78, in generate_key_data
    save_topo(list_of_node, list_of_edge, topo_file)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/SimulatorAnalysis/gen_topo.py", line 404, in save_topo
    nx.draw(T, with_labels=True)
  File "/home/shaoze/.local/lib/python3.8/site-packages/networkx/drawing/nx_pylab.py", line 123, in draw
    draw_networkx(G, pos=pos, ax=ax, **kwds)
  File "/home/shaoze/.local/lib/python3.8/site-packages/networkx/drawing/nx_pylab.py", line 335, in draw_networkx
    draw_networkx_nodes(G, pos, **node_kwds)
  File "/home/shaoze/.local/lib/python3.8/site-packages/networkx/drawing/nx_pylab.py", line 466, in draw_networkx_nodes
    node_collection = ax.scatter(
  File "/home/shaoze/.local/lib/python3.8/site-packages/matplotlib/__init__.py", line 1447, in inner
    return func(ax, *map(sanitize_sequence, args), **kwargs)
  File "/home/shaoze/.local/lib/python3.8/site-packages/matplotlib/cbook/deprecation.py", line 411, in wrapper
    return func(*inner_args, **inner_kwargs)
  File "/home/shaoze/.local/lib/python3.8/site-packages/matplotlib/axes/_axes.py", line 4517, in scatter
    self.add_collection(collection)
  File "/home/shaoze/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 1934, in add_collection
    self._unstale_viewLim()
  File "/home/shaoze/.local/lib/python3.8/site-packages/matplotlib/axes/_base.py", line 639, in _unstale_viewLim
    for ax in self._shared_x_axes.get_siblings(self))
  File "/home/shaoze/.local/lib/python3.8/site-packages/matplotlib/cbook/__init__.py", line 855, in get_siblings
    self.clean()
KeyboardInterrupt
{'A state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-5500/1050011, 500011/105001100], [-500011/(1050011*Cout), -26050561/(52500550*Cout)]]', 'b': '[[-5000/1050011], [500000/(1050011*Cout)]]', 'c': '[[550000/1050011, 550000/1050011], [50000/1050011, 50000/1050011], [0, 0], [0, 1]]', 'd': '[[500000/1050011], [1000010/1050011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001000/200002200001, 2000012000/200002200001], [-200001200000/(200002200001*Cout), -200102200601/(10000110000050*Cout)]]', 'b': '[[-10000/200002200001], [10/(200002200001*Cout)]]', 'c': '[[100000100000/200002200001, 1000001/200002200001], [100000/200002200001, 1/200002200001], [0, 0], [0, 1]]', 'd': '[[1000000/200002200001], [200002000000/200002200001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Ra1', 'Rb1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', '0', '12'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '12'], ['Sa1', '0', '12'], ['Sb1', 'OUT', '12']]}
['VIN - Sb - L - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-31275
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sa1-Sb0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.7], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-5500/1050011, 500011/105001100], [-500011/(1050011*Cout), -26050561/(52500550*Cout)]]', 'b': '[[-5000/1050011], [500000/(1050011*Cout)]]', 'c': '[[550000/1050011, 550000/1050011], [50000/1050011, 50000/1050011], [0, 0], [0, 1]]', 'd': '[[500000/1050011], [1000010/1050011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001000/200002200001, 2000012000/200002200001], [-200001200000/(200002200001*Cout), -200102200601/(10000110000050*Cout)]]', 'b': '[[-10000/200002200001], [10/(200002200001*Cout)]]', 'c': '[[100000100000/200002200001, 1000001/200002200001], [100000/200002200001, 1/200002200001], [0, 0], [0, 1]]', 'd': '[[1000000/200002200001], [200002000000/200002200001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Ra1', 'Rb1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', '0', '12'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '12'], ['Sa1', '0', '12'], ['Sb1', 'OUT', '12']]}
['VIN - Sb - L - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-31275
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sa1-Sb0-Sb1'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
analytics parameter {'Duty_Cycle': [0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
debug exp {'A state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-5500/1050011, 500011/105001100], [-500011/(1050011*Cout), -26050561/(52500550*Cout)]]', 'b': '[[-5000/1050011], [500000/(1050011*Cout)]]', 'c': '[[550000/1050011, 550000/1050011], [50000/1050011, 50000/1050011], [0, 0], [0, 1]]', 'd': '[[500000/1050011], [1000010/1050011], [1], [0]]'}, 'B state': {'x': '[[i_L0(t)], [v_Cout(t)]]', 'y': '[[v_12(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]', 'a': '[[-1000001000/200002200001, 2000012000/200002200001], [-200001200000/(200002200001*Cout), -200102200601/(10000110000050*Cout)]]', 'b': '[[-10000/200002200001], [10/(200002200001*Cout)]]', 'c': '[[100000100000/200002200001, 1000001/200002200001], [100000/200002200001, 1/200002200001], [0, 0], [0, 1]]', 'd': '[[1000000/200002200001], [200002000000/200002200001], [1], [0]]'}, 'device_list': ['Vin', 'Rin', 'Rout', 'Cout', 'Ra0', 'Rb0', 'L0', 'Ra1', 'Rb1'], 'node_list': ['IN', 'OUT', 'IN_exact', '0', '12'], 'net_list': [['Sa0', '0', '12'], ['Sb0', 'IN', '12'], ['L0', 'OUT', '12'], ['Sa1', '0', '12'], ['Sb1', 'OUT', '12']]}
['VIN - Sb - Sa - L - VOUT', 'VIN - L - Sa - L - VOUT', 'VIN - Sb - L - GND', 'VIN - L - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-31275
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('L2', ['N-L2-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'N-L2-Sa0']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
PCC-31275 violations

['VIN - Sb - Sa - L - VOUT', 'VIN - L - Sa - L - VOUT', 'VIN - Sb - L - GND', 'VIN - L - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-31275
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('L2', ['N-L2-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'N-L2-Sa0']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0'])])
{'Duty_Cycle': [0.1, 0.3, 0.5, 0.7, 0.9], 'Frequency': [1], 'Rout': [50], 'Vin': [100], 'Cout': [10], 'Ra': [100000], 'Rb': [1], 'Rin': [0.1], 'C': [10], 'L': [100]}
Process Process-3:
Traceback (most recent call last):
  File "/usr/lib/python3.8/multiprocessing/process.py", line 315, in _bootstrap
    self.run()
  File "/usr/lib/python3.8/multiprocessing/process.py", line 108, in run
    self._target(*self._args, **self._kwargs)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/uct.py", line 289, in set_and_plan
    tree_size, tmp_planner, depth = self.plan(total_traj)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/uct.py", line 359, in plan
    mc_return = self.MC_sampling_terminal(next_node)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/uct.py", line 476, in MC_sampling_terminal
    final_return = self.sim_.default_policy(mc_return, self.gamma_, discount, reward_list,
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 1744, in default_policy
    r = self.act(action)
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 935, in act
    self.reward = self.get_reward()
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 963, in get_reward
    return self.get_sweep_reward_with_para()
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 991, in get_sweep_reward_with_para
    reward, _, _, _ = self.get_reward_using_anal()
  File "/home/shaoze/PycharmProjects/Parallel_UCT/UCT_5_UCB_unblc_restruct_DP_parallel_v2/ucts/TopoPlanner.py", line 1146, in get_reward_using_anal
    self.graph_2_reward[key + '$' + str(self.current.parameters)] = [self.current.parameters, tmp_effi,
  File "<string>", line 2, in __setitem__
  File "/usr/lib/python3.8/multiprocessing/managers.py", line 834, in _callmethod
    conn.send((self._id, methodname, args, kwds))
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 206, in send
    self._send_bytes(_ForkingPickler.dumps(obj))
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 411, in _send_bytes
    self._send(header + buf)
  File "/usr/lib/python3.8/multiprocessing/connection.py", line 368, in _send
    n = write(self._handle, buf)
BrokenPipeError: [Errno 32] Broken pipe
