[[15, 15, 15, 15, 15, 15, 15, 15], [10, 10, 10, 10, 10, 10, 10, 10]]
figures already existed
Results already existed
finish reading key-expression
figures/2021-05-21-13-21-08/ created

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - L - Sb - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - Sb - L - VOUT', 'VIN - C - Sb - L - VOUT', 'VIN - C - Sb - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0-Sb1']), ('L0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
/home/shaoze/analytic_test/Test_5_comp/UCT_Restruct/curve/UCT_5_UCB_unblc_restruct_steps/SimulatorAnalysis/random_topo.py:49: UserWarning: has redundant loop
  warnings.warn('has redundant loop', UserWarning)
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L2-L3', 'OUT']), ('L1', ['IN', 'N-L1-Sb0']), ('L2', ['IN', 'N-L0-L2-L3']), ('L3', ['IN', 'N-L0-L2-L3']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L2-L3', 'OUT']), ('L1', ['IN', 'N-L1-Sb0']), ('L2', ['IN', 'N-L0-L2-L3']), ('L3', ['IN', 'N-L0-L2-L3']), ('Sb0', ['0', 'N-L1-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - L - Sa - Sb - GND', 'VOUT - Sb - L - Sa - Sb - GND', 'VOUT - Sb - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - C - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-C0-L1', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L1-L2-Sb0']), ('L2', ['0', 'N-L1-L2-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-L1-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L1-L2-Sb0']), ('L2', ['0', 'N-L1-L2-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-L1-L2-Sb0'])])
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0-Sa1', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0-Sa1']), ('Sa1', ['0', 'N-C1-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0-Sa1', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0-Sa1']), ('Sa1', ['0', 'N-C1-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb1', 'OUT']), ('C1', ['N-C0-C1-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-C1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb1', 'OUT']), ('C1', ['N-C0-C1-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-C1-Sb1'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - Sa - Sa - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa2']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa2', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['N-C0-Sa0-Sa2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - Sa - Sa - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa2']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa2', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['N-C0-Sa0-Sa2', 'OUT'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - Sb - C - GND', 'VOUT - L - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb2']), ('L0', ['N-L0-Sb0-Sb1-Sb2', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1-Sb2']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1-Sb2']), ('Sb2', ['N-C0-Sb2', 'N-L0-Sb0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - Sb - C - GND', 'VOUT - L - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb2']), ('L0', ['N-L0-Sb0-Sb1-Sb2', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1-Sb2']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1-Sb2']), ('Sb2', ['N-C0-Sb2', 'N-L0-Sb0-Sb1-Sb2'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sb - C - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['0', 'N-C0-Sa0-Sb0']), ('Sb1', ['N-Sa0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - L - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0', 'OUT']), ('L0', ['IN', 'N-C1-L0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - L - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0', 'OUT']), ('L0', ['IN', 'N-C1-L0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - L - Sa - VOUT', 'VIN - Sa - C - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'N-C0-L0-Sa1']), ('L0', ['N-C0-L0-Sa0-Sb0', 'N-C0-L0-Sa1']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa1', ['N-C0-L0-Sa1', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - C - C - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - L - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1-Sb0']), ('C1', ['0', 'N-C1-L0']), ('L0', ['IN', 'N-C1-L0']), ('L1', ['IN', 'N-C0-L1-Sb0']), ('Sb0', ['N-C0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - C - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - L - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L1-Sb0']), ('C1', ['0', 'N-C1-L0']), ('L0', ['IN', 'N-C1-L0']), ('L1', ['IN', 'N-C0-L1-Sb0']), ('Sb0', ['N-C0-L1-Sb0', 'OUT'])])
['VIN - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - L - Sa - GND', 'VOUT - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('C1', ['IN', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - GND', 'VIN - L - L - GND', 'VIN - C - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-L1-Sb0-Sb1']), ('L1', ['IN', 'N-L0-L1-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-L1-Sb0-Sb1']), ('Sb1', ['N-L0-L1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-C3-Sb0', 'OUT']), ('C1', ['N-C0-C1-C3-Sb0', 'OUT']), ('C2', ['IN', 'OUT']), ('C3', ['IN', 'N-C0-C1-C3-Sb0']), ('Sb0', ['0', 'N-C0-C1-C3-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-C3-Sb0', 'OUT']), ('C1', ['N-C0-C1-C3-Sb0', 'OUT']), ('C2', ['IN', 'OUT']), ('C3', ['IN', 'N-C0-C1-C3-Sb0']), ('Sb0', ['0', 'N-C0-C1-C3-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - GND', 'VIN - L - C - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0', 'N-C1-L1']), ('L0', ['IN', 'N-C1-L0']), ('L1', ['0', 'N-C1-L1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - GND', 'VIN - L - C - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - L - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0', 'N-C1-L1']), ('L0', ['IN', 'N-C1-L0']), ('L1', ['0', 'N-C1-L1']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - L - L - C - GND', 'VIN - Sa - C - GND', 'VOUT - L - C - GND', 'VOUT - L - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1-Sa0']), ('L0', ['N-L0-Sa1', 'OUT']), ('L1', ['N-C0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L1-Sa0']), ('Sa1', ['IN', 'N-L0-Sa1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - Sa - GND', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb0', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - C - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - GND', 'VOUT - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - C - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - GND', 'VOUT - L - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-L1-Sb0'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sb - L - Sa - GND', 'VOUT - Sb - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb1']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sb - L - Sa - GND', 'VOUT - Sb - Sb - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb1']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'OUT'])])
has to be unconnected
has to be unconnected
['VIN - C - L - C - Sa - VOUT', 'VIN - C - Sb - GND', 'VOUT - Sa - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['N-C1-L0', 'N-C1-Sa0']), ('L0', ['N-C0-L0-Sb0', 'N-C1-L0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - L - C - Sa - VOUT', 'VIN - C - Sb - GND', 'VOUT - Sa - C - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['N-C1-L0', 'N-C1-Sa0']), ('L0', ['N-C0-L0-Sb0', 'N-C1-L0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'N-L1-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-L1-Sa0', 'N-L1-Sa0-Sa1-Sb0']), ('Sa1', ['N-L1-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - C - VOUT', 'VIN - Sa - L - VOUT', 'VIN - L - Sb - GND', 'VIN - C - L - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - L - Sb - C - GND', 'VIN - C - Sa - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'N-C1-L0-Sa0']), ('L0', ['N-C1-L0-Sa0', 'OUT']), ('Sa0', ['N-C1-L0-Sa0', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - C - C - Sb - GND', 'VOUT - C - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2-Sa0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('C2', ['IN', 'N-C0-C2-Sa0']), ('Sa0', ['IN', 'N-C0-C2-Sa0']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - C - C - Sb - GND', 'VOUT - C - Sa - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2-Sa0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('C2', ['IN', 'N-C0-C2-Sa0']), ('Sa0', ['IN', 'N-C0-C2-Sa0']), ('Sb0', ['0', 'N-C0-Sb0'])])
['VIN - Sb - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sa - GND', 'VOUT - C - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - C - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - Sb - L - VOUT', 'VIN - C - GND', 'VIN - Sa - Sb - GND', 'VIN - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - Sb - L - VOUT', 'VIN - C - GND', 'VIN - Sa - Sb - GND', 'VIN - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - L - Sb - Sb - GND', 'VIN - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - Sa - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sb1']), ('L1', ['N-L0-L1-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-L1-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - C - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['N-C0-L0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - Sa - C - GND', 'VIN - Sb - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sa0', 'N-C0-C1-Sb0']), ('C2', ['0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - Sa - C - GND', 'VIN - Sb - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sa0', 'N-C0-C1-Sb0']), ('C2', ['0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])
PCC-17859 violations

['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sa1-Sb0']), ('L1', ['N-L0-L1-Sa0-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-L0-L1-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - Sa - Sb - GND', 'VIN - L - Sa - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa1-Sb1', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sb - L - Sa - GND', 'VIN - Sb - Sb - C - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sa0', 'N-C0-L0-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L2-Sb0', 'OUT']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['N-L0-L2-Sb0', 'N-L1-L2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L2-Sb0', 'OUT']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['N-L0-L2-Sb0', 'N-L1-L2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-L2-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - C - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - Sb - GND', 'VIN - C - L - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('L0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VOUT - L - C - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - Sa - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa1-Sb0-Sb2']), ('Sb0', ['IN', 'N-Sa1-Sb0-Sb2']), ('Sb1', ['IN', 'N-Sa0-Sb1']), ('Sb2', ['N-Sa1-Sb0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - Sa - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa1-Sb0-Sb2']), ('Sb0', ['IN', 'N-Sa1-Sb0-Sb2']), ('Sb1', ['IN', 'N-Sa0-Sb1']), ('Sb2', ['N-Sa1-Sb0-Sb2', 'OUT'])])
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - L - Sb - GND', 'VOUT - Sa - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb1']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sb - Sa - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sa - Sb - VOUT', 'VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2-Sb1', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['N-Sa0-Sa2-Sb1', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sa2-Sb0']), ('Sb1', ['N-Sa0-Sa2-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VIN - L - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 7.040294415808222e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.008998987125081095
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 37 cumulate planning time: 37
sim.current.step 1
root offset is:  1
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sa - C - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['N-Sb1-Sb2', 'OUT']), ('Sb2', ['IN', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - L - Sb - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'N-L1-Sb1']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sa - L - Sa - GND', 'VOUT - Sa - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sa1', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0-Sa1']), ('Sa0', ['N-L0-L1-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-L1-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - L - GND', 'VIN - Sa - L - C - L - GND', 'VOUT - Sa - Sb - C - L - GND', 'VOUT - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-L1']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('L1', ['0', 'N-C0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - Sb - Sa - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sa2']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa1-Sa2', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['0', 'N-L0-Sa1-Sa2']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - L - C - VOUT', 'VIN - L - L - VOUT', 'VIN - L - C - Sa - Sb - GND', 'VIN - L - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'OUT']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['IN', 'N-C0-L0-L1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sa - C - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sa - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-C0-Sa0', 'N-C1-Sa0']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - Sb - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - C - Sb - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0-Sb1']), ('C1', ['N-C0-C1-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-C0-C1-Sb0-Sb1']), ('Sb1', ['N-C0-C1-Sb0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - Sb - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - C - Sb - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0-Sb1']), ('C1', ['N-C0-C1-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-C0-C1-Sb0-Sb1']), ('Sb1', ['N-C0-C1-Sb0-Sb1', 'N-Sa0-Sb1'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - L - Sb - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - C - Sb - VOUT', 'VIN - C - Sa - L - VOUT', 'VIN - C - Sb - L - Sa - GND', 'VIN - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - C - GND', 'VIN - L - Sa - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['N-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0-Sb1', 'N-Sa0-Sb2']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa0-Sa1-Sb0-Sb1']), ('Sb2', ['N-Sa0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - C - Sa - GND', 'VOUT - Sa - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sa0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa1']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - Sa - L - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - L - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sb0']), ('L0', ['0', 'N-C0-L0-L1-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - Sb - Sa - GND', 'VIN - Sb - L - L - Sa - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb1', 'N-L0-Sa0-Sb1']), ('L1', ['N-L0-L1-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-L1-Sb1', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - L - Sa - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0-Sb0', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - L - Sa - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0-Sb0', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sa - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-Sb0']), ('L1', ['N-L0-L1-L2-Sb0', 'OUT']), ('L2', ['0', 'N-L0-L1-L2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-L2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - L - C - Sa - VOUT', 'VIN - L - Sb - Sa - C - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 7.581453826920494e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.006000130286812973
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 5 cumulate planning time: 42
sim.current.step 2
root offset is:  1
['VIN - Sa - VOUT', 'VIN - Sa - Sa - L - Sb - GND', 'VOUT - Sa - Sa - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - L - Sb - GND', 'VOUT - Sa - Sa - Sa - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
has to be unconnected
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sa1-Sb0']), ('Sa1', ['N-C0-Sa0-Sa1-Sb0', 'N-Sa1-Sa2']), ('Sa2', ['IN', 'N-Sa1-Sa2']), ('Sb0', ['N-C0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['N-Sa0-Sa1-Sb1', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'N-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['N-Sa0-Sa1-Sb1', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'N-Sa0-Sa1-Sb1'])])
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb0-Sb1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1-Sb0-Sb1']), ('Sb0', ['N-C0-Sa1-Sb0-Sb1', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'N-C0-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - L - VOUT', 'VIN - L - Sb - Sa - GND', 'VIN - L - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-L1-Sa0-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-L1-Sa0-Sa1-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - C - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sa - C - Sb - Sa - GND', 'VOUT - Sa - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['N-C0-Sa1-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-Sa1-Sa2-Sb0', 'OUT']), ('Sa2', ['IN', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sa2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-Sa1-Sa2-Sb0', 'OUT']), ('Sa2', ['IN', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sa2-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - Sb - Sa - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2', 'OUT']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - Sb - Sa - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-L2', 'OUT']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb2']), ('Sa0', ['N-C0-Sa0-Sb2', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb2', ['0', 'N-C0-Sa0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sa - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['IN', 'N-Sa2-Sb0']), ('Sb0', ['N-Sa2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sa - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['IN', 'N-Sa2-Sb0']), ('Sb0', ['N-Sa2-Sb0', 'OUT'])])
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - L - Sb - GND', 'VIN - C - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - Sa - GND', 'VIN - Sb - L - Sa - Sa - GND', 'VOUT - Sb - Sa - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1-Sb0', 'N-Sa0-Sa1']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 1.4134975448305902e-05
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.007214364014407639
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 12 cumulate planning time: 54
sim.current.step 3
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - L - Sb - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - C - L - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - Sa - L - C - GND', 'VOUT - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('C1', ['N-C1-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0', 'N-C1-L0-Sa0']), ('Sa0', ['IN', 'N-C1-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sb - Sb - L - GND', 'VOUT - Sa - Sa - Sb - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('L0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - L - Sa - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - L - Sb - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 3
action child  0  avg_return: 0.010337904575030534
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.00016405491816888187
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 55
sim.current.step 4
root offset is:  1
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - Sb - Sa - GND', 'VIN - L - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - C - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VIN - C - Sb - C - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - L - C - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C1-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C1-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sb - C - L - VOUT', 'VIN - Sa - L - C - GND', 'VIN - L - Sb - GND', 'VOUT - L - C - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1']), ('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-C0-L1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sa - C - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sa - C - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
action  0  : node on 1
action child  0  avg_return: 1.5561955679239934e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.03737051950375912
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 0
action child  2  avg_return: 4.869504008528754e-06
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
action  3  : node on 3
action child  3  avg_return: 4.1093368248911075e-08
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'C1-left', 'C1-right']
state child 3 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 56
sim.current.step 5
root offset is:  1
['VIN - Sb - L - L - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
PCC-17859 violations

has to be unconnected
action  0  : edge on [1, 5]
action child  0  avg_return: 0.161938592335774
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  1  : edge on [1, 3]
action child  1  avg_return: 1.6243966810642615e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  2  : edge on [1, 11]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  3  : edge on [1, 7]
action child  3  avg_return: 6.345126076237823e-10
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  4  : edge on [1, 9]
action child  4  avg_return: 1.6243966810642615e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 6
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sa - C - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sa - C - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

action  0  : edge on [2, 7]
action child  0  avg_return: 0.485814796893819
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}})
action  1  : edge on [2, 11]
action child  1  avg_return: 4.927944987498321e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}})
action  2  : edge on [2, 3]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}})
action  3  : edge on [2, 6]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {6}, 6: {2}})
action  4  : edge on [2, 9]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {9}, 9: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 7
root offset is:  1
/home/shaoze/analytic_test/Test_5_comp/UCT_Restruct/curve/UCT_5_UCB_unblc_restruct_steps/SimulatorAnalysis/random_topo.py:46: UserWarning: Not has switch
  warnings.warn('Not has switch', UserWarning)
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - C - GND', 'VOUT - L - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sa0']), ('L0', ['N-C0-L0-L1-Sa0', 'N-L0-Sb0']), ('L1', ['N-C0-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-C0-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [0, 3]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}})
action  1  : edge on [0, 11]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}})
action  2  : edge on [0, 9]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {9}, 9: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 8
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 9
root offset is:  1
has to be unconnected
action  0  : edge on [4, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}, 4: {9}, 9: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}, 4: {9}, 9: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 11
root offset is:  1
find_one_analytics_result using:  0
action  0  : edge on [6, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}, 4: {9}, 9: {4}, 6: {11}, 11: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 12
root offset is:  1
action  0  : edge on [7, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2, 10}, 0: {3}, 3: {0}, 4: {9}, 9: {4}, 6: {11}, 11: {6}, 10: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 13
root offset is:  1
has to be unconnected
action  0  : edge on [8, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2, 10}, 0: {3}, 3: {0}, 4: {9}, 9: {4}, 6: {11}, 11: {8, 6}, 10: {7}, 8: {11}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 14
root offset is:  1
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - L - L - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [9, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2, 10}, 0: {3}, 3: {0}, 4: {9}, 9: {4, 12}, 6: {11}, 11: {8, 6}, 10: {7}, 8: {11}, 12: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 15
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2, 10}, 0: {3}, 3: {0}, 4: {9}, 9: {4, 12}, 6: {11}, 11: {8, 6}, 10: {7}, 8: {11}, 12: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 16
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2, 10}, 0: {3}, 3: {0}, 4: {9}, 9: {4, 12}, 6: {11}, 11: {8, 6}, 10: {7}, 8: {11}, 12: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 56
sim.current.step 17
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0.0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2, 10}, 0: {3}, 3: {0}, 4: {9}, 9: {4, 12}, 6: {11}, 11: {8, 6}, 10: {7}, 8: {11}, 12: {9}})
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - L - L - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
instant reward: 0 cumulate reward:  0.0 planning time: 0 cumulate planning time: 56
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  18   average cumulate reward:  0.0
title result with parameter:0.5 
-1 , 15 : 18.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 3
hash length 110

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - Sb - Sa - L - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['N-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - C - Sb - Sb - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sb0-Sb1']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - Sa - VOUT', 'VIN - L - Sb - Sa - GND', 'VOUT - Sa - Sb - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-Sa1-Sb0']), ('Sb1', ['N-L0-Sb0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2-Sa4', 'N-Sa0-Sa3']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sa2-Sa4']), ('Sa2', ['IN', 'N-Sa0-Sa1-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sa4', ['N-Sa0-Sa1-Sa2-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - C - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'N-C0-Sa1']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa1', ['IN', 'N-C0-Sa1']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - Sb - Sa - Sb - VOUT', 'VIN - L - Sb - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - C - L - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['N-C0-L0-Sa0', 'N-C1-L0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - C - L - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['N-C0-L0-Sa0', 'N-C1-L0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - Sb - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-L0-L1-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.44 vout: 44.0
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - L - C - Sb - GND', 'VOUT - Sb - Sa - L - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - L - Sb - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sb - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('L1', ['N-L1-Sb0', 'N-L1-Sb2']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-L1-Sb0']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1']), ('Sb2', ['N-L1-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - L - Sb - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sb - L - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('L1', ['N-L1-Sb0', 'N-L1-Sb2']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-L1-Sb0']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1']), ('Sb2', ['N-L1-Sb2', 'OUT'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - C - Sa - VOUT', 'VIN - C - Sb - Sa - VOUT', 'VIN - C - Sa - Sa - Sb - GND', 'VIN - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['N-C1-Sa1', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - C - Sa - L - GND', 'VIN - Sa - L - GND', 'VIN - C - GND', 'VOUT - C - Sa - L - GND', 'VOUT - C - C - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - C - Sa - L - GND', 'VIN - Sa - L - GND', 'VIN - C - GND', 'VOUT - C - Sa - L - GND', 'VOUT - C - C - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - L - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - C - C - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0-L1']), ('C1', ['0', 'N-C0-C1-L0-L1']), ('L0', ['IN', 'N-C0-C1-L0-L1']), ('L1', ['N-C0-C1-L0-L1', 'N-L1-Sb0']), ('Sb0', ['N-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - C - C - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0-L1']), ('C1', ['0', 'N-C0-C1-L0-L1']), ('L0', ['IN', 'N-C0-C1-L0-L1']), ('L1', ['N-C0-C1-L0-L1', 'N-L1-Sb0']), ('Sb0', ['N-L1-Sb0', 'OUT'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - C - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - C - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0-Sb1', 'N-C1-Sb0']), ('L0', ['IN', 'N-C1-L0-Sb1']), ('Sb0', ['N-C1-Sb0', 'OUT']), ('Sb1', ['N-C1-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - C - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0-Sb1', 'N-C1-Sb0']), ('L0', ['IN', 'N-C1-L0-Sb1']), ('Sb0', ['N-C1-Sb0', 'OUT']), ('Sb1', ['N-C1-L0-Sb1', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - Sb - L - GND', 'VOUT - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sb0']), ('C1', ['IN', 'N-C0-C1-C2-Sb0']), ('C2', ['N-C0-C1-C2-Sb0', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-C0-C1-C2-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - Sb - L - GND', 'VOUT - C - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sb0']), ('C1', ['IN', 'N-C0-C1-C2-Sb0']), ('C2', ['N-C0-C1-C2-Sb0', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-C0-C1-C2-Sb0', 'N-L0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - Sb - L - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - Sb - L - L - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - L - GND', 'VIN - L - C - GND', 'VIN - L - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - L - Sa - Sb - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sb - L - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-Sa1-Sb0-Sb1']), ('Sb0', ['N-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - L - L - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['N-L0-L1', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-L1-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - L - L - Sb - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['N-L0-L1', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-L1-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - L - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - L - GND', 'VIN - L - Sa - C - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - L - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - L - GND', 'VIN - L - Sa - C - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - Sa - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - L - C - Sb - VOUT', 'VIN - C - VOUT', 'VIN - L - C - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-L0', 'N-C1-Sa0-Sb0']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['0', 'N-C1-Sa0-Sb0']), ('Sb0', ['N-C1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - Sb - L - VOUT', 'VIN - Sa - L - Sb - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('L2', ['N-L2-Sa0', 'N-L2-Sb0']), ('Sa0', ['IN', 'N-L2-Sa0']), ('Sb0', ['N-L0-L1-Sb0', 'N-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - Sb - L - VOUT', 'VIN - Sa - L - Sb - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('L2', ['N-L2-Sa0', 'N-L2-Sb0']), ('Sa0', ['IN', 'N-L2-Sa0']), ('Sb0', ['N-L0-L1-Sb0', 'N-L2-Sb0'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - L - C - Sb - VOUT', 'VIN - Sa - L - C - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1-Sb0']), ('L0', ['N-C0-L0', 'N-L0-Sa0']), ('L1', ['0', 'N-C0-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['N-C0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - C - Sb - VOUT', 'VIN - Sa - L - C - L - GND', 'VOUT - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1-Sb0']), ('L0', ['N-C0-L0', 'N-L0-Sa0']), ('L1', ['0', 'N-C0-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['N-C0-L1-Sb0', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb0']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb0']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-Sa1-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - L - Sb - L - VOUT', 'VIN - L - Sa - Sa - L - VOUT', 'VIN - L - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['0', 'N-L1-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - L - Sa - C - VOUT', 'VIN - L - Sb - C - Sa - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - Sa - L - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - C - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sa - Sb - C - C - GND', 'VOUT - Sa - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sa1-Sb0']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sb0', ['IN', 'N-C0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - C - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sa - Sb - C - C - GND', 'VOUT - Sa - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sa1-Sb0']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sb0', ['IN', 'N-C0-Sa1-Sb0'])])
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-L0-Sb0', 'N-C0-C1-Sa0']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-L0-Sb0', 'N-C0-C1-Sa0']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
PCC-17859 violations

['VIN - L - Sb - VOUT', 'VIN - L - Sb - L - L - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['N-L1-L2', 'N-L2-Sa0']), ('Sa0', ['0', 'N-L2-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - L - L - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['N-L1-L2', 'N-L2-Sa0']), ('Sa0', ['0', 'N-L2-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - L - Sa - C - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sa - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'N-L1-Sa0']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - C - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-L0-Sb0']), ('L0', ['IN', 'N-C1-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C1-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-L0-Sb0']), ('L0', ['IN', 'N-C1-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C1-L0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - C - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - C - L - GND', 'VIN - Sb - Sa - L - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['N-C0-L0-L1', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - C - Sb - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - C - Sb - L - Sa - GND', 'VOUT - C - C - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - L - Sa - GND', 'VOUT - C - C - Sb - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['N-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sa1-Sb0-Sb1', 'N-Sa2-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sa1-Sb0-Sb1', 'N-Sa2-Sb0-Sb1'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.012085419945405651
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 36 cumulate planning time: 36
sim.current.step 1
root offset is:  1
['VIN - C - Sb - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - Sa - L - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - Sb - L - GND', 'VIN - Sa - Sa - Sb - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa1-Sb0']), ('L0', ['N-C0-L0-Sa1-Sb0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-C0-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - L - VOUT', 'VIN - Sa - Sb - L - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sa - Sb - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1-Sb2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb1-Sb2', 'N-Sa0-Sb0-Sb1']), ('Sb2', ['0', 'N-L0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - C - Sb - Sb - Sa - GND', 'VOUT - C - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['IN', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - C - Sa - C - L - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - C - GND', 'VOUT - L - Sb - C - GND', 'VOUT - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - Sb - Sa - GND', 'VIN - L - L - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['IN', 'N-L1-L2']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - Sb - Sa - GND', 'VIN - L - L - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['IN', 'N-L1-L2']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - L - Sb - Sa - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - L - C - Sa - Sb - GND', 'VOUT - C - Sb - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb1']), ('Sa0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-L0-Sb1', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - C - Sa - Sb - VOUT', 'VIN - C - Sa - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0-Sb1-Sb2']), ('Sb0', ['N-Sa0-Sb0-Sb1-Sb2', 'OUT']), ('Sb1', ['N-Sa0-Sb0-Sb1-Sb2', 'OUT']), ('Sb2', ['IN', 'N-Sa0-Sb0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sa - Sb - Sb - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - C - Sa - Sb - VOUT', 'VIN - Sb - L - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sa - C - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1-Sa2', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sa1-Sa2']), ('Sa1', ['0', 'N-C0-Sa0-Sa1-Sa2']), ('Sa2', ['N-C0-Sa0-Sa1-Sa2', 'N-Sa2-Sb0']), ('Sb0', ['IN', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - Sb - VOUT', 'VIN - L - Sa - Sa - GND', 'VIN - L - Sa - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'N-L1-Sa0']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - Sb - C - L - GND', 'VIN - L - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('L1', ['IN', 'N-L1-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0', 'N-L1-Sa0-Sb0']), ('Sb0', ['N-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - Sa - Sb - GND', 'VOUT - L - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb1', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1-Sb1', 'N-Sa0-Sa1']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0-Sb2']), ('Sb0', ['N-Sa1-Sb0-Sb2', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-Sa1-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - L - C - GND', 'VIN - Sb - C - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0']), ('L0', ['N-C0-C1-L0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - L - C - GND', 'VIN - Sb - C - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0']), ('L0', ['N-C0-C1-L0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L2-Sa0-Sb0']), ('L1', ['N-L0-L1-L2-Sa0-Sb0', 'OUT']), ('L2', ['N-L0-L1-L2-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-L1-L2-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-L2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('C1', ['0', 'N-C1-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C0-Sa0-Sa1-Sb0', 'N-C1-Sa1']), ('Sb0', ['IN', 'N-C0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - C - GND', 'VIN - C - Sb - GND', 'VIN - C - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-C2-Sa0-Sb0']), ('C2', ['0', 'N-C0-C1-C2-Sa0-Sb0']), ('Sa0', ['N-C0-C1-C2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-C2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - C - GND', 'VIN - C - Sb - GND', 'VIN - C - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-C2-Sa0-Sb0']), ('C2', ['0', 'N-C0-C1-C2-Sa0-Sb0']), ('Sa0', ['N-C0-C1-C2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-C2-Sa0-Sb0'])])
PCC-17859 violations

['VIN - L - Sa - C - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'OUT']), ('L0', ['IN', 'N-L0-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['N-C0-Sa0-Sa1', 'N-L0-Sa1-Sb0']), ('Sb0', ['0', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - L - Sa - Sb - L - VOUT', 'VIN - L - Sa - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['N-L1-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - Sa - Sb - GND', 'VIN - C - Sa - L - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - Sa - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sb0', 'N-L0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - Sa - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'N-L1-Sa0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - L - Sb - GND', 'VIN - Sa - Sa - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa1', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - Sa - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sb - GND', 'VOUT - Sb - Sb - L - Sb - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb1-Sb2']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['N-Sa0-Sb1-Sb2', 'OUT']), ('Sb2', ['IN', 'N-Sa0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - L - Sa - Sa - GND', 'VIN - Sb - L - L - Sa - GND', 'VOUT - L - Sa - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-Sa0-Sa1']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'N-L0-Sa0-Sa1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - C - Sb - VOUT', 'VIN - Sa - C - L - VOUT', 'VIN - Sa - C - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa1-Sb0', 'N-C0-Sa0']), ('L0', ['N-C0-L0-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['0', 'N-C0-L0-Sa1-Sb0']), ('Sb0', ['N-C0-L0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0006448116965238928
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.008098287210016009
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 7 cumulate planning time: 43
sim.current.step 2
root offset is:  1
has to be unconnected
['VIN - C - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - L - Sb - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sa - Sa - C - VOUT', 'VIN - L - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-C0-Sa1', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - C - Sb - Sa - GND', 'VIN - Sb - C - C - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb1', 'N-C0-Sa0-Sb1']), ('C1', ['N-C0-C1-Sb1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-C1-Sb1', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - Sb - Sa - GND', 'VIN - C - Sb - L - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - Sb - GND', 'VIN - Sa - Sb - C - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'N-C0-Sb1-Sb2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-C0-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - Sa - C - GND', 'VIN - Sb - C - Sa - C - GND', 'VOUT - L - Sa - C - GND', 'VOUT - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['N-C1-L0-Sa0', 'OUT']), ('L0', ['N-C1-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-C1-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - C - L - L - GND', 'VOUT - C - L - L - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1-Sb0', 'OUT']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-C0-L1-Sb0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - C - L - L - GND', 'VOUT - C - L - L - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L1-Sb0', 'OUT']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-C0-L1-Sb0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L1-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - Sb - L - VOUT', 'VIN - Sa - Sb - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - L - VOUT', 'VIN - Sa - Sb - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb1', 'N-Sb0-Sb1'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - Sb - Sa - L - VOUT', 'VIN - Sa - Sb - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sb - Sa - VOUT', 'VIN - C - Sb - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - VOUT', 'VIN - C - Sb - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sa1-Sb0'])])
['VIN - C - L - L - Sb - VOUT', 'VIN - Sa - L - Sb - VOUT', 'VIN - C - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1-Sa0', 'N-L0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa1-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sb0-Sb1']), ('Sa0', ['0', 'N-C0-Sa0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb1', 'N-C0-Sb0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sb - C - VOUT', 'VIN - Sa - Sa - L - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - L - C - GND', 'VOUT - L - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sa1']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sb - C - VOUT', 'VIN - Sa - Sa - L - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - L - C - GND', 'VOUT - L - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sa1']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
action  0  : node on 2
action child  0  avg_return: 0.009699465323766726
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.00033061511897531634
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 8 cumulate planning time: 51
sim.current.step 3
root offset is:  1
['VIN - Sa - L - Sa - Sb - VOUT', 'VIN - Sa - L - Sa - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['0', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['N-Sa1-Sa2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - L - L - Sb - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('L1', ['0', 'N-L1-Sa0-Sb0']), ('Sa0', ['N-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sa - GND', 'VIN - L - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0-Sb2']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb2', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT']), ('Sb2', ['IN', 'N-L0-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - L - Sb - Sa - L - VOUT', 'VIN - C - L - Sa - GND', 'VIN - L - Sb - GND', 'VOUT - L - Sa - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - L - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1-Sb0']), ('Sb0', ['0', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - Sb - L - Sb - GND', 'VIN - L - Sb - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-Sb1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - Sb - L - Sa - GND', 'VOUT - C - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('C1', ['IN', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('L2', ['IN', 'N-L2-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['N-L2-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('L2', ['IN', 'N-L2-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['N-L2-Sb0', 'N-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sb - L - VOUT', 'VIN - L - Sa - C - GND', 'VOUT - L - Sb - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['N-L0-Sb0', 'OUT']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-L1-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sa - GND', 'VOUT - C - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on 3
action child  0  avg_return: 0.014243842307590158
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.008416831799614825
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 53
sim.current.step 4
root offset is:  1
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sa0']), ('L0', ['0', 'N-C0-L0-L1-Sa0']), ('L1', ['0', 'N-C0-L0-L1-Sa0']), ('Sa0', ['IN', 'N-C0-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb1']), ('L0', ['0', 'N-C0-L0-Sa0-Sb1']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-L0-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.038787399960872666
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 3
action child  1  avg_return: 8.081502042281185e-08
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'C1-left', 'C1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 2
action child  2  avg_return: 3.898552456611836e-08
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
action  3  : node on 1
action child  3  avg_return: 0.012709453189121516
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 3 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 5
root offset is:  1
['VIN - C - Sa - L - Sa - VOUT', 'VIN - C - Sb - GND', 'VOUT - Sa - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['N-L0-Sa0', 'N-L0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L0-Sa0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : edge on [1, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  1  : edge on [1, 11]
action child  1  avg_return: 0.0036925567275010356
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  2  : edge on [1, 3]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  3  : edge on [1, 7]
action child  3  avg_return: 1.6426488040321615e-07
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  4  : edge on [1, 9]
action child  4  avg_return: 0.002447910804960024
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 6
root offset is:  1
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('L0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [2, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}})
action  1  : edge on [2, 3]
action child  1  avg_return: 0.00012562150386225107
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {3}, 3: {2}})
action  2  : edge on [2, 7]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {7}, 7: {2}})
action  3  : edge on [2, 9]
action child  3  avg_return: 0.011014859430571983
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}})
action  4  : edge on [2, 12]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {12}, 12: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 7
root offset is:  1
has to be unconnected
action  0  : edge on [0, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {7}, 7: {0}})
action  1  : edge on [0, 10]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {10}, 10: {0}})
action  2  : edge on [0, 3]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {3}, 3: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 8
root offset is:  1
has to be unconnected
action  0  : edge on [3, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {7}, 7: {0}, 3: {10}, 10: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 9
root offset is:  1
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - C - Sa - Sb - L - GND', 'VOUT - Sa - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [4, 9]
action child  0  avg_return: 0.00012408953430295534
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0}, 3: {10}, 10: {3}, 4: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 10
root offset is:  1
action  0  : edge on [5, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0}, 3: {10}, 10: {3}, 4: {9}, 5: {12}, 12: {5}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 11
root offset is:  1
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [6, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0, 6}, 3: {10}, 10: {3}, 4: {9}, 5: {12}, 12: {5}, 6: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 12
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0, 6}, 3: {10}, 10: {3}, 4: {9}, 5: {12}, 12: {5}, 6: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 13
root offset is:  1
action  0  : edge on [8, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0, 6}, 3: {10}, 10: {3}, 4: {9}, 5: {12}, 12: {8, 5}, 6: {7}, 8: {12}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 14
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0, 6}, 3: {10}, 10: {3}, 4: {9}, 5: {12}, 12: {8, 5}, 6: {7}, 8: {12}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 15
root offset is:  1
action  0  : edge on [10, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0, 6}, 3: {10}, 10: {3, 12}, 4: {9}, 5: {12}, 12: {8, 10, 5}, 6: {7}, 8: {12}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 53
sim.current.step 16
root offset is:  1
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0.0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {7}, 7: {0, 6}, 3: {10}, 10: {3, 12}, 4: {9}, 5: {12}, 12: {8, 10, 5}, 6: {7}, 8: {12}})
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
instant reward: 0 cumulate reward:  0.0 planning time: 0 cumulate planning time: 53
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  17   average cumulate reward:  0.0
title result with parameter:0.5 
-1 , 15 : 17.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 4
hash length 122

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - C - L - GND', 'VIN - C - C - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-L0', 'OUT']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sa - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1-Sb2-Sb3']), ('Sb0', ['0', 'N-Sb0-Sb2']), ('Sb1', ['IN', 'N-Sa0-Sb1-Sb2-Sb3']), ('Sb2', ['N-Sa0-Sb1-Sb2-Sb3', 'N-Sb0-Sb2']), ('Sb3', ['N-Sa0-Sb1-Sb2-Sb3', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - L - C - VOUT', 'VIN - Sb - C - C - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - C - L - Sa - GND', 'VOUT - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['N-C0-C1-L0', 'N-C1-L0-Sa0-Sb0']), ('L0', ['N-C0-C1-L0', 'N-C1-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C1-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - Sb - L - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb1']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0']), ('Sb1', ['0', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1-Sa2']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1-Sa2']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1-Sa2']), ('Sa2', ['N-C0-Sa0-Sa1-Sa2', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2-Sa3-Sb0']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2-Sa3-Sb0']), ('Sa3', ['0', 'N-Sa0-Sa2-Sa3-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sa2-Sa3-Sb0'])])
find_one_analytics_result using:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-L3-Sb0']), ('L1', ['N-L0-L1-L2-L3-Sb0', 'OUT']), ('L2', ['N-L0-L1-L2-L3-Sb0', 'OUT']), ('L3', ['0', 'N-L0-L1-L2-L3-Sb0']), ('Sb0', ['N-L0-L1-L2-L3-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L2-Sa0-Sa1']), ('L1', ['0', 'N-L0-L1-L2-Sa0-Sa1']), ('L2', ['N-L0-L1-L2-Sa0-Sa1', 'OUT']), ('Sa0', ['N-L0-L1-L2-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-L1-L2-Sa0-Sa1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - L - GND', 'VOUT - L - Sa - Sb - Sa - GND', 'VOUT - L - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sb0']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - L - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - L - VOUT', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - L - Sb - L - L - GND', 'VOUT - L - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L3']), ('L1', ['0', 'N-L0-L1-L3']), ('L2', ['N-L2-Sb0', 'OUT']), ('L3', ['IN', 'N-L0-L1-L3']), ('Sb0', ['IN', 'N-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - L - Sb - L - L - GND', 'VOUT - L - Sb - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1-L3']), ('L1', ['0', 'N-L0-L1-L3']), ('L2', ['N-L2-Sb0', 'OUT']), ('L3', ['IN', 'N-L0-L1-L3']), ('Sb0', ['IN', 'N-L2-Sb0'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - L - L - Sb - VOUT', 'VIN - L - Sa - Sb - VOUT', 'VIN - L - L - GND', 'VIN - L - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['IN', 'N-L1-L2-Sa0']), ('L2', ['0', 'N-L1-L2-Sa0']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-L1-L2-Sa0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VOUT - C - L - C - GND', 'VOUT - C - L - Sa - GND', 'VOUT - C - L - C - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'N-C2-L0-Sa0']), ('L0', ['IN', 'N-C2-L0-Sa0']), ('Sa0', ['0', 'N-C2-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VOUT - C - L - C - GND', 'VOUT - C - L - Sa - GND', 'VOUT - C - L - C - GND', 'VOUT - C - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'N-C2-L0-Sa0']), ('L0', ['IN', 'N-C2-L0-Sa0']), ('Sa0', ['0', 'N-C2-L0-Sa0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - L - VOUT', 'VIN - Sa - C - L - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'OUT']), ('L0', ['N-L0-Sa1-Sa2', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'N-L0-Sa1-Sa2']), ('Sa2', ['0', 'N-L0-Sa1-Sa2'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - C - Sa - GND', 'VIN - C - C - L - GND', 'VOUT - Sa - C - Sa - GND', 'VOUT - Sa - C - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-L0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - C - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-L0']), ('L0', ['N-C1-L0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - C - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-L0']), ('L0', ['N-C1-L0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - C - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - L - C - GND', 'VOUT - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['N-C0-C1-L0', 'OUT']), ('C2', ['0', 'IN']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - C - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - L - C - GND', 'VOUT - C - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['N-C0-C1-L0', 'OUT']), ('C2', ['0', 'IN']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - C - VOUT', 'VIN - Sa - C - L - Sb - GND', 'VIN - Sa - C - L - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - Sb - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa2']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'N-Sa3-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'N-Sa3-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - Sb - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa2']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'N-Sa3-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'N-Sa3-Sb0'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sb - L - VOUT', 'VIN - C - Sb - L - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - C - Sb - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0-Sb1']), ('L0', ['N-L0-Sb0-Sb2', 'OUT']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-L0-Sb0-Sb2']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1']), ('Sb2', ['0', 'N-L0-Sb0-Sb2'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - L - C - GND', 'VOUT - Sb - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'N-C1-L0']), ('L0', ['N-C0-L0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - L - C - GND', 'VOUT - Sb - C - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'N-C1-L0']), ('L0', ['N-C0-L0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - L - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - Sa - L - C - GND', 'VOUT - L - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1']), ('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['N-C0-L1', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - L - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - Sa - L - C - GND', 'VOUT - L - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L1']), ('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['N-C0-L1', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND', 'VOUT - C - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C0-Sa0-Sb0']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - C - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sa1-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sa - L - Sb - VOUT', 'VIN - Sa - L - Sb - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'N-L0-Sb1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - L - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-L1-Sa0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - Sb - VOUT', 'VIN - C - L - L - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - C - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - C - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'OUT'])])
PCC-17859 violations

['VIN - L - L - VOUT', 'VIN - L - L - Sb - C - GND', 'VIN - L - L - Sb - Sa - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - Sb - C - GND', 'VIN - L - L - Sb - Sa - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - L - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['N-L1-Sa1', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['0', 'N-L1-Sa1']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-L1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sa - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sa - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-Sa1-Sb1'])])
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - C - Sb - Sa - GND', 'VIN - Sa - C - C - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-Sa1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'N-C0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - Sb - GND', 'VIN - Sa - L - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-Sb0-Sb2']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb2', ['0', 'N-Sb0-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sa - Sb - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0-Sb1']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sa1', ['N-Sa1-Sb1', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb0-Sb1', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sa - Sb - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0-Sb1']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sa1', ['N-Sa1-Sb1', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb0-Sb1', 'N-Sa1-Sb1'])])
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sa - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - L - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa1']), ('L0', ['N-C0-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - C - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - C - GND', 'VIN - C - C - GND', 'VIN - Sa - Sb - GND', 'VOUT - C - C - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - C - GND', 'VIN - C - C - GND', 'VIN - Sa - Sb - GND', 'VOUT - C - C - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - Sb - Sa - L - Sb - VOUT', 'VIN - Sb - Sa - L - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - C - Sa - Sa - Sb - GND', 'VOUT - C - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sa2', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sa - Sa - VOUT', 'VIN - Sb - C - GND', 'VOUT - Sa - Sa - L - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - C - C - Sb - GND', 'VOUT - Sa - Sb - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sb0']), ('C1', ['N-C0-C1', 'N-C1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-C1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - C - C - Sb - GND', 'VOUT - Sa - Sb - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sb0']), ('C1', ['N-C0-C1', 'N-C1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-C1-Sb1'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VOUT - Sa - Sb - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0-Sb2', 'N-Sa0-Sb1-Sb2']), ('Sa1', ['N-Sa0-Sa1-Sb0-Sb2', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0-Sb2']), ('Sb1', ['0', 'N-Sa0-Sb1-Sb2']), ('Sb2', ['N-Sa0-Sa1-Sb0-Sb2', 'N-Sa0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - C - Sa - GND', 'VIN - C - L - GND', 'VOUT - Sb - L - C - Sa - GND', 'VOUT - Sb - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['N-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
PCC-17859 violations

has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.0007708052456525412
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 38 cumulate planning time: 38
sim.current.step 1
root offset is:  1
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - C - VOUT', 'VIN - L - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb1', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb1']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa3-Sb0']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['N-Sa0-Sa3-Sb0', 'N-Sa1-Sa3']), ('Sb0', ['0', 'N-Sa0-Sa3-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - C - GND', 'VOUT - L - C - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa2-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sa2-Sb0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-L0-Sa0-Sa2-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sa2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb1']), ('Sa0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sa1-Sb1', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb1']), ('Sa0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sa1-Sb1', 'N-Sa0-Sb0-Sb1'])])
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - C - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-C0-Sa0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - C - Sa - L - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('L0', ['0', 'N-L0-Sa1-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sb1']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sb0-Sb1'])])
PCC-17859 violations

['VIN - Sb - Sa - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sa - Sa - GND', 'VOUT - Sb - C - Sb - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - Sb - GND', 'VIN - Sa - L - Sb - Sa - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sa - C - GND', 'VIN - C - Sb - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C1-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C1-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - L - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sb0']), ('Sb0', ['IN', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sb0-Sb1']), ('Sa2', ['0', 'N-Sa1-Sa2-Sb0-Sb1']), ('Sb0', ['N-Sa1-Sa2-Sb0-Sb1', 'OUT']), ('Sb1', ['N-Sa1-Sa2-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - L - L - Sb - GND', 'VIN - L - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'N-L1-L2-Sb0']), ('L2', ['N-L0-L1-L2', 'N-L1-L2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L1-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - L - Sb - GND', 'VIN - L - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'N-L1-L2-Sb0']), ('L2', ['N-L0-L1-L2', 'N-L1-L2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L1-L2-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - L - C - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - C - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0-Sb0-Sb1']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - L - Sa - GND', 'VIN - Sb - C - GND', 'VOUT - L - L - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - L - Sa - GND', 'VIN - Sb - C - GND', 'VOUT - L - L - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - Sa - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - Sa - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
PCC-17859 violations

find_one_analytics_result using:  0
action  0  : node on 1
action child  0  avg_return: 0.0007495441146219492
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 8.213241645830536e-08
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 8 cumulate planning time: 46
sim.current.step 2
root offset is:  1
['VIN - Sb - Sa - VOUT', 'VIN - Sb - C - Sb - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C1-Sb1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb1', ['N-C0-Sb1', 'N-C1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - C - Sb - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C1-Sb1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb1', ['N-C0-Sb1', 'N-C1-Sb1'])])
['VIN - L - Sb - Sa - VOUT', 'VIN - Sa - Sb - Sa - VOUT', 'VIN - L - Sb - L - GND', 'VIN - Sa - Sb - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['IN', 'N-L1-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'N-L1-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - VOUT', 'VIN - Sb - Sa - C - GND', 'VOUT - Sb - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sb0']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C0-Sa0-Sb1', 'N-C1-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - VOUT', 'VIN - Sb - Sa - C - GND', 'VOUT - Sb - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sb0']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C0-Sa0-Sb1', 'N-C1-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
['VIN - C - Sb - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - L - GND', 'VIN - Sa - L - Sb - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - Sb - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sb - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-Sb0-Sb2']), ('Sb1', ['N-Sb1-Sb2', 'OUT']), ('Sb2', ['N-Sb0-Sb2', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - Sb - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sb - Sb - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-Sb0-Sb2']), ('Sb1', ['N-Sb1-Sb2', 'OUT']), ('Sb2', ['N-Sb0-Sb2', 'N-Sb1-Sb2'])])
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - L - Sa - Sb - VOUT', 'VIN - L - Sa - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['N-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - C - C - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - C - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C2-Sa0-Sb0', 'OUT']), ('C2', ['0', 'N-C1-C2-Sa0-Sb0']), ('Sa0', ['0', 'N-C1-C2-Sa0-Sb0']), ('Sb0', ['IN', 'N-C1-C2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - C - C - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - C - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C2-Sa0-Sb0', 'OUT']), ('C2', ['0', 'N-C1-C2-Sa0-Sb0']), ('Sa0', ['0', 'N-C1-C2-Sa0-Sb0']), ('Sb0', ['IN', 'N-C1-C2-Sa0-Sb0'])])
PCC-17859 violations

['VIN - L - L - VOUT', 'VIN - Sa - Sb - C - GND', 'VOUT - L - L - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - Sa - Sb - C - GND', 'VOUT - L - L - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - L - L - GND', 'VOUT - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['0', 'N-L0-L1']), ('L2', ['N-L2-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L2-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - L - L - GND', 'VOUT - Sb - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['0', 'N-L0-L1']), ('L2', ['N-L2-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L2-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - C - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sa - GND', 'VIN - L - C - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sa - GND', 'VIN - L - C - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - GND', 'VIN - L - L - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sb0']), ('L0', ['0', 'N-C0-L0-L1-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-L0-L1-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.0010982295942970391
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.0004282151475907507
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 16 cumulate planning time: 62
sim.current.step 2
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - C - Sb - Sa - C - GND', 'VIN - C - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - Sa - C - GND', 'VIN - C - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - Sa - Sa - C - GND', 'VIN - C - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'N-C1-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['N-C1-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - Sa - Sa - C - GND', 'VIN - C - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'N-C1-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['N-C1-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sa1-Sb0'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-C1-Sa1-Sb0']), ('Sb0', ['IN', 'N-C0-C1-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sa - Sb - Sa - C - GND', 'VOUT - Sa - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'N-Sa1-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sb - Sa - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sb0-Sb2', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb2', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa1-Sb0-Sb1']), ('Sb2', ['0', 'N-Sa0-Sb0-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sb - Sb - Sa - GND', 'VOUT - Sb - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb0-Sb2']), ('Sb0', ['N-Sa0-Sb0-Sb2', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT']), ('Sb2', ['IN', 'N-Sa0-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0-Sb1', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0-Sb1', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa1-Sb0-Sb1'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - C - C - Sa - GND', 'VOUT - C - Sb - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C2']), ('C1', ['N-C1-Sb0', 'OUT']), ('C2', ['N-C0-C2', 'N-C2-Sa0']), ('Sa0', ['0', 'N-C2-Sa0']), ('Sb0', ['IN', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - C - C - Sa - GND', 'VOUT - C - Sb - C - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C2']), ('C1', ['N-C1-Sb0', 'OUT']), ('C2', ['N-C0-C2', 'N-C2-Sa0']), ('Sa0', ['0', 'N-C2-Sa0']), ('Sb0', ['IN', 'N-C1-Sb0'])])
has to be unconnected
has to be unconnected
['VIN - C - Sb - Sa - VOUT', 'VIN - C - Sb - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0-Sb1']), ('C1', ['IN', 'N-C0-C1-Sb0-Sb1']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0-Sb1']), ('Sb1', ['N-C0-C1-Sb0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - VOUT', 'VIN - C - Sb - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0-Sb1']), ('C1', ['IN', 'N-C0-C1-Sb0-Sb1']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0-Sb1']), ('Sb1', ['N-C0-C1-Sb0-Sb1', 'N-Sa0-Sb1'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
action  0  : node on 3
action child  0  avg_return: 3.200301714140792e-05
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 1.0212962354525937e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 15 cumulate planning time: 77
sim.current.step 3
root offset is:  1
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sb - C - Sb - GND', 'VOUT - Sa - Sb - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'N-C0-Sb2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-C0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sb - C - Sb - GND', 'VOUT - Sa - Sb - Sb - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb1', 'N-C0-Sb2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-C0-Sb2'])])
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VIN - C - Sb - C - GND', 'VIN - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'N-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VIN - C - Sb - C - GND', 'VIN - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'N-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C2-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sa - Sa - C - Sa - GND', 'VOUT - Sb - Sa - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1', 'N-C0-Sa2']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-C0-Sa1', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-C0-Sa2']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa1-Sb0']), ('C1', ['N-C0-C1-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-C1-Sa1-Sb0']), ('Sb0', ['N-C0-C1-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.0007651908481604862
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 5.52417421134037e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 4 cumulate planning time: 81
sim.current.step 4
root offset is:  1
has to be unconnected
['VIN - C - Sa - Sb - VOUT', 'VIN - C - Sa - Sb - GND', 'VOUT - Sb - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-Sa0-Sb1']), ('Sa1', ['N-C0-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1-Sa2-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1-Sa2-Sb0']), ('Sa1', ['N-C0-Sa0-Sa1-Sa2-Sb0', 'OUT']), ('Sa2', ['N-C0-Sa0-Sa1-Sa2-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sa1-Sa2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - C - Sa - VOUT', 'VIN - Sa - C - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sa - C - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sa1-Sa2']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa1', ['N-C0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-C0-Sa1-Sa2', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sa - VOUT', 'VIN - Sa - C - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sa - C - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sa1-Sa2']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa1', ['N-C0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-C0-Sa1-Sa2', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
has to be unconnected
['VIN - C - Sa - Sa - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sa - GND', 'VIN - C - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
action  0  : node on 1
action child  0  avg_return: 5.754984167032346e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.0006610382187138728
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 3
action child  2  avg_return: 0.003448725201326758
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 3 cumulate planning time: 84
sim.current.step 5
root offset is:  1
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-Sa1-Sb0'])])
PCC-17859 violations

['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa1', 'N-C0-Sa0']), ('C1', ['N-C0-C1-Sa1', 'N-C1-Sb0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-C0-C1-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa1', 'N-C0-Sa0']), ('C1', ['N-C0-C1-Sa1', 'N-C1-Sb0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-C0-C1-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sa - Sa - Sb - GND', 'VOUT - C - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C0-Sa0-Sb0']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sa - Sa - Sb - GND', 'VOUT - C - Sa - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C0-Sa0-Sb0']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
action  0  : edge on [1, 9]
action child  0  avg_return: 1.971177994999328e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  1  : edge on [1, 5]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  2  : edge on [1, 3]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  3  : edge on [1, 7]
action child  3  avg_return: 3.3448647261658566e-07
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  4  : edge on [1, 11]
action child  4  avg_return: 0.01321961452044704
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
instant reward: 0 cumulate reward:  0 planning time: 8 cumulate planning time: 92
sim.current.step 6
root offset is:  1
find_one_analytics_result using:  0
action  0  : edge on [2, 3]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {3}, 3: {2}})
action  1  : edge on [2, 5]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}})
action  2  : edge on [2, 9]
action child  2  avg_return: 0.019829175383421185
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}})
action  3  : edge on [2, 7]
action child  3  avg_return: 0.019829175383421185
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {7}, 7: {2}})
action  4  : edge on [2, 12]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {12}, 12: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 92
sim.current.step 7
root offset is:  1
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
PCC-17859 violations

['VIN - Sa - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - GND', 'VIN - C - Sb - GND', 'VIN - C - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sa1-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sa1-Sb0']), ('Sa0', ['N-C0-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-C0-C1-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [0, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {7}, 7: {0}})
action  1  : edge on [0, 12]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {12}, 12: {0}})
action  2  : edge on [0, 5]
action child  2  avg_return: 0.006568379824674289
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {5}, 5: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 92
sim.current.step 8
root offset is:  1
find_one_analytics_result using:  0
action  0  : edge on [3, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}, 0: {5}, 5: {0}, 3: {10}, 10: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 92
sim.current.step 9
root offset is:  1
action  0  : edge on [4, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3}, 4: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 92
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3}, 4: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 92
sim.current.step 11
root offset is:  1
['VIN - C - C - VOUT', 'VIN - C - C - Sa - Sb - GND', 'VIN - C - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - C - Sa - Sb - GND', 'VIN - C - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
action  0  : edge on [6, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3, 6}, 4: {9}, 6: {10}})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 94
sim.current.step 12
root offset is:  1
has to be unconnected
action  0  : edge on [7, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3, 6, 7}, 4: {9}, 6: {10}, 7: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 94
sim.current.step 13
root offset is:  1
['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sa0-Sa1-Sb0']), ('Sa0', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sa0-Sa1-Sb0']), ('Sa0', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sa0-Sa1-Sb0'])])
action  0  : edge on [8, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3, 6, 7}, 4: {9}, 6: {10}, 7: {10}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 3 cumulate planning time: 97
sim.current.step 14
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3, 6, 7}, 4: {9}, 6: {10}, 7: {10}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 97
sim.current.step 15
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3, 6, 7}, 4: {9}, 6: {10}, 7: {10}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 97
sim.current.step 16
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3, 6, 7}, 4: {9}, 6: {10}, 7: {10}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 97
sim.current.step 17
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0.0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2, 4}, 0: {5}, 5: {0}, 3: {10}, 10: {3, 6, 7}, 4: {9}, 6: {10}, 7: {10}, 8: {12}, 12: {8}})
['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sa0-Sa1-Sb0']), ('Sa0', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sa0-Sa1-Sb0']), ('Sa0', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sa0-Sa1-Sb0'])])
instant reward: 0 cumulate reward:  0.0 planning time: 0 cumulate planning time: 97
effis of topo: [{'parameter': '0.1', 'efficiency': {'efficiency': 0.08, 'output_voltage': 55.0}, 'output_voltage': 55.0}]
#####################Game:   steps:  19   average cumulate reward:  0.0
title result with parameter:0.1 
-1 , 15 : 19.0
[{'parameter': '0.1', 'efficiency': {'efficiency': 0.08, 'output_voltage': 55.0}, 'output_voltage': 55.0}]
hash counter 5
hash length 126

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sb0', ['N-Sb0-Sb2', 'N-Sb0-Sb3']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['0', 'N-Sb0-Sb2']), ('Sb3', ['N-Sb0-Sb3', 'N-Sb3-Sb4']), ('Sb4', ['IN', 'N-Sb3-Sb4'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('Sb0', ['N-Sb0-Sb2', 'N-Sb0-Sb3']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['0', 'N-Sb0-Sb2']), ('Sb3', ['N-Sb0-Sb3', 'N-Sb3-Sb4']), ('Sb4', ['IN', 'N-Sb3-Sb4'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - C - VOUT', 'VIN - C - Sb - C - VOUT', 'VIN - Sa - L - GND', 'VIN - C - Sb - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-L0-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C1-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - C - Sb - C - VOUT', 'VIN - Sa - L - GND', 'VIN - C - Sb - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-L0-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C1-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-C1-L0-Sa0-Sb0'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - Sb - Sa - GND', 'VIN - L - C - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sb - Sa - GND', 'VIN - L - C - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sb0', 'N-Sa0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - L - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'N-L0-Sa1']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - L - Sa - Sa - GND', 'VOUT - Sa - Sa - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa2']), ('Sa0', ['IN', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa1-Sa2']), ('Sa2', ['N-L0-Sa2', 'N-Sa1-Sa2']), ('Sa3', ['N-Sa0-Sa3', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - L - Sa - Sa - GND', 'VOUT - Sa - Sa - L - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-Sa2']), ('Sa0', ['IN', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa1-Sa2']), ('Sa2', ['N-L0-Sa2', 'N-Sa1-Sa2']), ('Sa3', ['N-Sa0-Sa3', 'OUT'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sa2', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['0', 'N-Sa0-Sa1-Sa2']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - L - Sa - GND', 'VIN - Sb - Sa - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
['VIN - Sb - L - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sa - C - GND', 'VIN - C - Sb - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C1-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C1-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['IN', 'N-L2-Sa0-Sb0']), ('Sa0', ['N-L2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['IN', 'N-L2-Sa0-Sb0']), ('Sa0', ['N-L2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L2-Sa0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-L3-Sb0']), ('L1', ['0', 'N-L0-L1-L2-L3-Sb0']), ('L2', ['N-L0-L1-L2-L3-Sb0', 'OUT']), ('L3', ['N-L0-L1-L2-L3-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-L2-L3-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - Sa - C - GND', 'VIN - C - GND', 'VOUT - Sa - L - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sa - C - GND', 'VIN - C - GND', 'VOUT - Sa - L - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - Sb - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'OUT']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - Sb - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'OUT']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-Sa0-Sb1'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VOUT - Sa - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['N-Sa1-Sa2', 'OUT']), ('Sa2', ['N-Sa0-Sa2-Sb0', 'N-Sa1-Sa2']), ('Sb0', ['IN', 'N-Sa0-Sa2-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VOUT - Sa - Sa - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa2-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['N-Sa1-Sa2', 'OUT']), ('Sa2', ['N-Sa0-Sa2-Sb0', 'N-Sa1-Sa2']), ('Sb0', ['IN', 'N-Sa0-Sa2-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - L - Sa - Sb - GND', 'VOUT - Sb - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0']), ('Sb1', ['N-L0-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - L - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-L0']), ('C1', ['IN', 'N-C0-C1-C2-L0']), ('C2', ['N-C0-C1-C2-L0', 'OUT']), ('L0', ['N-C0-C1-C2-L0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - L - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-L0']), ('C1', ['IN', 'N-C0-C1-C2-L0']), ('C2', ['N-C0-C1-C2-L0', 'OUT']), ('L0', ['N-C0-C1-C2-L0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - Sa - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa2', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'N-L0-Sa2']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - Sa - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa2', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'N-L0-Sa2']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - Sb - Sa - Sb - GND', 'VOUT - C - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sb - Sa - Sb - GND', 'VOUT - C - Sb - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - L - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - L - GND', 'VIN - L - C - Sa - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-L1-Sa0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('L1', ['0', 'N-C0-L1-Sa0']), ('Sa0', ['0', 'N-C0-L1-Sa0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 50.0
['VIN - L - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VOUT - Sa - L - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'N-L0-Sb0']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - Sa - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sa0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - Sa - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sa0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-Sa0-Sb0-Sb1'])])
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - L - Sb - Sa - VOUT', 'VIN - C - Sa - Sb - Sa - VOUT', 'VIN - L - Sa - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - L - C - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - Sa - Sa - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sa - C - GND', 'VIN - L - Sa - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1-Sb0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-L0-Sa1-Sb0', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - Sa - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sa - C - GND', 'VIN - L - Sa - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1-Sb0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-L0-Sa1-Sb0', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0'])])
PCC-17859 violations

['VIN - Sb - C - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VOUT - C - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0-Sb0']), ('C1', ['N-C0-C1', 'OUT']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VOUT - C - C - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0-Sb0']), ('C1', ['N-C0-C1', 'OUT']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sb - Sa - L - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L2-Sa0']), ('L1', ['IN', 'N-L0-L1-L2-Sa0']), ('L2', ['N-L0-L1-L2-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-L2-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - L - Sa - Sb - GND', 'VIN - Sa - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0']), ('C1', ['0', 'N-C0-C1-L0-Sa0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0']), ('C1', ['0', 'N-C0-C1-L0-Sa0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - Sa - Sb - Sa - GND', 'VIN - L - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - Sb - Sa - L - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['N-L1-Sa0', 'N-Sa0-Sb1']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sa - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - C - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa1']), ('L0', ['N-C0-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - C - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - Sb - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1']), ('L0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sa - C - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sa - C - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
has to be unconnected
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2', 'N-L0-Sa0']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['IN', 'N-L0-L1-L2']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-L2', 'N-L0-Sa0']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['IN', 'N-L0-L1-L2']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1-Sb0']), ('Sa1', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sa1-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - L - Sb - GND', 'VIN - Sa - Sa - L - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sb - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C1-Sb0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - C - GND', 'VOUT - Sa - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C1-Sb0', 'N-L0-Sa0-Sb0'])])
['VIN - Sb - C - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - C - Sa - C - GND', 'VIN - Sb - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['N-C1-Sa1-Sb0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['N-C1-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - L - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sa2-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1-Sa2-Sb0', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-L0-Sa1-Sa2-Sb0']), ('Sb0', ['N-L0-Sa1-Sa2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sb - L - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - GND', 'VOUT - L - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sa - Sb - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sb - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - C - C - GND', 'VOUT - Sa - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-C2']), ('C1', ['N-C0-C1', 'N-C1-Sa0']), ('C2', ['0', 'N-C0-C2']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - C - C - GND', 'VOUT - Sa - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-C2']), ('C1', ['N-C0-C1', 'N-C1-Sa0']), ('C2', ['0', 'N-C0-C2']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
['VIN - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - C - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sb0-Sb1', 'OUT']), ('L1', ['N-L0-L1-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-L1-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - Sa - Sb - GND', 'VIN - Sa - Sa - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['N-Sa2-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - Sb - Sa - L - GND', 'VIN - L - Sb - Sa - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['0', 'N-L1-Sa0-Sa1']), ('Sa0', ['N-L1-Sa0-Sa1', 'OUT']), ('Sa1', ['N-L1-Sa0-Sa1', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - Sa - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('L1', ['IN', 'N-L1-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - L - C - VOUT', 'VIN - L - Sa - GND', 'VIN - L - L - Sb - GND', 'VOUT - C - Sa - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0', 'OUT']), ('L0', ['N-C0-L0-L1-Sa0', 'N-L0-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sa0']), ('Sa0', ['0', 'N-C0-L0-L1-Sa0']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on 0
action child  0  avg_return: 0.017297442040458605
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 2.2837318598314949e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 51 cumulate planning time: 51
sim.current.step 1
root offset is:  1
has to be unconnected
['VIN - L - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['N-C0-Sa0-Sb0-Sb1', 'N-L0-Sb0']), ('Sb1', ['0', 'N-C0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-Sa1-Sb0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - C - Sa - L - Sb - GND', 'VIN - L - Sa - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['N-C0-L0-Sa0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sa - Sa - Sb - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sb - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0-Sb1', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - Sa - C - GND', 'VIN - Sb - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0', 'N-L0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - Sa - C - GND', 'VIN - Sb - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0', 'N-L0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
PCC-17859 violations

['VIN - C - Sa - C - Sb - VOUT', 'VIN - C - Sa - C - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'N-C2-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-C2-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - C - Sb - VOUT', 'VIN - C - Sa - C - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'N-C2-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-C2-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - C - C - VOUT', 'VIN - L - Sb - GND', 'VIN - C - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - C - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['IN', 'N-C0-C1']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sa - Sa - VOUT', 'VIN - C - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa2']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['N-C0-Sa2', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['0', 'N-Sa1-Sa2-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sa - Sa - VOUT', 'VIN - C - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa2']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['N-C0-Sa2', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['0', 'N-Sa1-Sa2-Sb0'])])
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - Sb - GND', 'VOUT - L - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sb0', 'N-L0-Sb1']), ('L1', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - Sb - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'N-C0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'N-Sa1-Sb1']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['N-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - C - Sb - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb1-Sb2']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-Sa0-Sb0-Sb1-Sb2']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-Sa0-Sb0-Sb1-Sb2']), ('Sb2', ['0', 'N-Sa0-Sb0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - C - Sb - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb1-Sb2']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-Sa0-Sb0-Sb1-Sb2']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-Sa0-Sb0-Sb1-Sb2']), ('Sb2', ['0', 'N-Sa0-Sb0-Sb1-Sb2'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb1', 'N-Sa0-Sb0-Sb2']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb2', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sa1-Sb1']), ('Sb2', ['IN', 'N-Sa0-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb1', 'N-Sa0-Sb0-Sb2']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb2', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sa1-Sb1']), ('Sb2', ['IN', 'N-Sa0-Sb0-Sb2'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-C2-Sa0', 'OUT']), ('C1', ['N-C0-C1-C2-Sa0', 'OUT']), ('C2', ['N-C0-C1-C2-Sa0', 'N-C2-Sb0']), ('Sa0', ['IN', 'N-C0-C1-C2-Sa0']), ('Sb0', ['0', 'N-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-C2-Sa0', 'OUT']), ('C1', ['N-C0-C1-C2-Sa0', 'OUT']), ('C2', ['N-C0-C1-C2-Sa0', 'N-C2-Sb0']), ('Sa0', ['IN', 'N-C0-C1-C2-Sa0']), ('Sb0', ['0', 'N-C2-Sb0'])])
PCC-17859 violations

['VIN - L - C - VOUT', 'VIN - L - C - Sa - Sb - GND', 'VIN - L - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - L - GND', 'VOUT - Sa - Sa - Sb - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - L - GND', 'VOUT - Sa - Sa - Sb - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1'])])
['VIN - Sa - Sb - L - Sb - VOUT', 'VIN - Sa - Sb - L - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['N-C0-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - Sb - VOUT', 'VIN - Sa - Sb - L - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['N-C0-L0-Sb1', 'OUT'])])
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - L - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sb0-Sb1', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-L1-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - Sa - VOUT', 'VIN - Sa - L - Sb - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1-Sb0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - Sa - VOUT', 'VIN - Sa - L - Sb - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1-Sb0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-L1-Sb0'])])
['VIN - L - C - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - C - L - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'OUT']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['IN', 'N-C0-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - C - Sa - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - L - Sb - C - GND', 'VOUT - L - Sb - C - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
has to be unconnected
['VIN - L - Sb - Sa - Sb - VOUT', 'VIN - L - Sb - Sa - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['N-Sa0-Sa1-Sb1', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['N-L0-Sb1', 'N-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - Sa - Sa - L - Sb - GND', 'VOUT - Sa - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - L - C - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - L - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - L - C - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - L - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - L - GND', 'VOUT - Sb - L - Sa - L - GND', 'VOUT - Sb - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('L1', ['IN', 'N-L1-Sa1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-L1-Sa1-Sb0']), ('Sb0', ['N-L1-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.48 vout: 49.0
['VIN - C - Sb - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 1
action child  0  avg_return: 0.023258886383895838
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 1.0550591071645896e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 22 cumulate planning time: 73
sim.current.step 2
root offset is:  1
has to be unconnected
['VIN - C - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - L - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - L - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sa0-Sb0'])])
['VIN - C - L - VOUT', 'VIN - C - Sa - Sa - Sb - VOUT', 'VIN - C - L - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa1']), ('L0', ['N-C0-L0-Sa1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-C0-L0-Sa1']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - C - Sb - C - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0-Sb1']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-C1-Sb0']), ('Sb1', ['0', 'N-C0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sb - C - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0-Sb1']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-C1-Sb0']), ('Sb1', ['0', 'N-C0-Sb0-Sb1'])])
['VIN - C - VOUT', 'VIN - C - C - Sb - Sa - GND', 'VIN - C - C - L - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C1-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-C1-L0-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('L1', ['IN', 'N-L1-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['0', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.48 vout: 49.0
['VIN - Sb - Sa - VOUT', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['IN', 'N-L0-L1-L2']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['IN', 'N-L0-L1-L2']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

['VIN - C - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C2-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - C - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('L1', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
action  0  : node on 2
action child  0  avg_return: 0.030813894261445002
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 4.493750045447879e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 10 cumulate planning time: 83
sim.current.step 3
root offset is:  1
['VIN - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - C - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - C - L - VOUT', 'VIN - Sb - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - L - C - Sb - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - L - VOUT', 'VIN - Sb - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - L - C - Sb - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VIN - L - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VIN - L - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - L - GND', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - L - GND', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
PCC-17859 violations

['VIN - L - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - C - Sa - Sb - VOUT', 'VIN - C - Sa - L - VOUT', 'VIN - L - Sa - GND', 'VIN - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - L - C - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.045953374395936435
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 3
action child  1  avg_return: 0.015742971560030083
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 5 cumulate planning time: 88
sim.current.step 3
root offset is:  1
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - L - Sb - Sa - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['0', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-L1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - L - Sb - GND', 'VOUT - Sa - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-Sb0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sb - L - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sa - Sb - Sb - GND', 'VOUT - Sb - Sa - Sb - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0-Sb2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb2']), ('Sb0', ['0', 'N-L0-Sb0-Sb2']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['N-L0-Sb0-Sb2', 'N-Sa0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sb - Sa - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - L - Sa - GND', 'VIN - Sb - Sa - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['N-L1-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-L1-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - L - Sa - L - GND', 'VIN - L - Sa - L - GND', 'VOUT - Sb - L - Sa - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L2-Sa0']), ('L1', ['0', 'N-L1-Sa0']), ('L2', ['N-L0-L2-Sa0', 'OUT']), ('Sa0', ['N-L0-L2-Sa0', 'N-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - L - Sa - L - GND', 'VIN - L - Sa - L - GND', 'VOUT - Sb - L - Sa - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L2-Sa0']), ('L1', ['0', 'N-L1-Sa0']), ('L2', ['N-L0-L2-Sa0', 'OUT']), ('Sa0', ['N-L0-L2-Sa0', 'N-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on 0
action child  0  avg_return: 0.05625965697966768
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.026714359871445815
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 90
sim.current.step 4
root offset is:  1
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - L - Sb - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT']), ('Sb0', ['N-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
action  0  : node on 2
action child  0  avg_return: 0.0723828228090995
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.0511386021478723
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 0
action child  2  avg_return: 8.121983405321309e-08
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right']
state child 2 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 5
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sa - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa1']), ('L1', ['N-L0-L1-Sa1', 'N-L1-Sa0']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sa1', ['0', 'N-L0-L1-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - L - Sa - Sb - GND', 'VOUT - Sa - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb0']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1-Sb0']), ('Sb0', ['0', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa1', 'N-L0-Sb0']), ('L1', ['IN', 'N-L0-L1-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-L1-Sa1']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - L - Sb - Sa - GND', 'VIN - L - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [1, 7]
action child  0  avg_return: 0.09520516614119412
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  1  : edge on [1, 9]
action child  1  avg_return: 3.8985617547684203e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  2  : edge on [1, 5]
action child  2  avg_return: 0.0971629593787638
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  3  : edge on [1, 11]
action child  3  avg_return: 1.9515256926514543e-07
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  4  : edge on [1, 3]
action child  4  avg_return: 1.4261378137303185e-08
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 6
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sa - L - Sa - L - GND', 'VOUT - Sb - Sa - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-L1-Sa0']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - L - Sa - L - GND', 'VOUT - Sb - Sa - L - Sa - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-L1-Sa0']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
action  0  : edge on [2, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {9}, 9: {2}})
action  1  : edge on [2, 3]
action child  1  avg_return: 0.2429073984469095
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}})
action  2  : edge on [2, 7]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}})
action  3  : edge on [2, 11]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}})
action  4  : edge on [2, 6]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {6}, 6: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 7
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
action  0  : edge on [0, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}, 0: {9}, 9: {0}})
action  1  : edge on [0, 11]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}, 0: {11}, 11: {0}})
action  2  : edge on [0, 7]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}, 0: {7}, 7: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 8
root offset is:  1
find_one_analytics_result using:  0
action  0  : edge on [3, 6]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 9
root offset is:  1
has to be unconnected
action  0  : edge on [4, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {3}, 4: {7}, 7: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {3}, 4: {7}, 7: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {8, 3}, 4: {7}, 7: {4}, 8: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 12
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {8, 3}, 4: {7}, 7: {4}, 8: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 13
root offset is:  1
find_one_analytics_result using:  0
action  0  : edge on [8, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {8, 3}, 4: {7}, 7: {4}, 8: {11, 6}, 11: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 14
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {8, 3}, 4: {7}, 7: {4}, 8: {11, 6}, 11: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 15
root offset is:  1
action  0  : edge on [10, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {8, 3}, 4: {7}, 7: {4}, 8: {11, 6}, 11: {8}, 10: {12}, 12: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 16
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {8, 3}, 4: {7}, 7: {4}, 8: {11, 6}, 11: {8}, 10: {12}, 12: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
sim.current.step 17
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0.0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2, 6}, 0: {9}, 9: {0}, 6: {8, 3}, 4: {7}, 7: {4}, 8: {11, 6}, 11: {8}, 10: {12}, 12: {10}})
find_one_analytics_result using:  0
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 90
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  19   average cumulate reward:  0
title result with parameter:0.5 
-1 , 15 : 19.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 5
hash length 132

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - C - L - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - GND', 'VOUT - C - L - C - C - GND', 'VOUT - C - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('C1', ['0', 'IN']), ('C2', ['N-C2-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-C2-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-C2-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - L - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - GND', 'VOUT - C - L - C - C - GND', 'VOUT - C - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('C1', ['0', 'IN']), ('C2', ['N-C2-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-C2-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-C2-L0-Sa0'])])
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - L - VOUT', 'VIN - Sa - L - Sb - L - VOUT', 'VIN - C - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - C - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sb0']), ('L0', ['0', 'N-L0-Sa0']), ('L1', ['N-C0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['0', 'N-C0-L1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - C - L - Sb - GND', 'VOUT - C - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-C2', 'OUT']), ('C1', ['N-C0-C1-C2', 'OUT']), ('C2', ['IN', 'N-C0-C1-C2']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - C - L - Sb - GND', 'VOUT - C - C - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-C2', 'OUT']), ('C1', ['N-C0-C1-C2', 'OUT']), ('C2', ['IN', 'N-C0-C1-C2']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - Sb - Sb - C - Sa - GND', 'VIN - C - Sb - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0-Sb1']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - Sb - Sb - C - Sa - GND', 'VIN - C - Sb - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0-Sb1']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'N-C0-Sb2']), ('Sb0', ['IN', 'N-Sb0-Sb3']), ('Sb1', ['0', 'N-C0-Sb1']), ('Sb2', ['N-C0-Sb2', 'OUT']), ('Sb3', ['N-Sb0-Sb3', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb1', 'N-C0-Sb2']), ('Sb0', ['IN', 'N-Sb0-Sb3']), ('Sb1', ['0', 'N-C0-Sb1']), ('Sb2', ['N-C0-Sb2', 'OUT']), ('Sb3', ['N-Sb0-Sb3', 'OUT'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - Sb - GND', 'VIN - Sa - Sb - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0-Sb1', 'N-L0-Sb2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb2', ['0', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sa - C - L - C - GND', 'VOUT - Sa - Sb - L - C - GND', 'VOUT - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('C1', ['0', 'N-C1-L0']), ('L0', ['N-C0-L0-Sb0', 'N-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sb - Sa - Sa - Sa - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sa2']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-C0-Sa1-Sa2', 'N-Sa0-Sa1']), ('Sa2', ['N-C0-Sa1-Sa2', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - Sa - L - C - VOUT', 'VIN - Sb - Sa - C - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - Sa - C - C - GND', 'VOUT - C - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - C - VOUT', 'VIN - Sb - Sa - C - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - Sa - C - C - GND', 'VOUT - C - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sb - Sa - Sb - L - VOUT', 'VIN - Sb - Sa - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - Sb - L - VOUT', 'VIN - Sb - Sa - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'N-Sa0-Sb1'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - Sb - L - GND', 'VIN - L - Sb - L - GND', 'VOUT - Sa - L - Sb - L - GND', 'VOUT - Sa - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('L2', ['IN', 'N-L2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'N-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sb - L - GND', 'VIN - L - Sb - L - GND', 'VOUT - Sa - L - Sb - L - GND', 'VOUT - Sa - L - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('L2', ['IN', 'N-L2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'N-L2-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - C - C - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb1']), ('C1', ['0', 'N-C1-Sb0-Sb1']), ('Sa0', ['N-C0-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb1', 'N-C1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C3-Sa0', 'OUT']), ('C2', ['IN', 'OUT']), ('C3', ['IN', 'N-C1-C3-Sa0']), ('Sa0', ['IN', 'N-C1-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C3-Sa0', 'OUT']), ('C2', ['IN', 'OUT']), ('C3', ['IN', 'N-C1-C3-Sa0']), ('Sa0', ['IN', 'N-C1-C3-Sa0'])])
PCC-17859 violations

['VIN - C - Sa - VOUT', 'VIN - C - L - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sa0']), ('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['N-C0-L1-Sa0', 'N-L0-L1']), ('Sa0', ['N-C0-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - L - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sa0']), ('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['N-C0-L1-Sa0', 'N-L0-L1']), ('Sa0', ['N-C0-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - C - Sa - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - L - Sa - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - GND', 'VOUT - C - C - L - Sa - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('C1', ['0', 'IN']), ('C2', ['IN', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - L - Sa - GND', 'VIN - C - GND', 'VOUT - C - C - L - Sa - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('C1', ['0', 'IN']), ('C2', ['IN', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - C - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - L - GND', 'VIN - Sa - Sb - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - L - Sa - C - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-L0-Sa0-Sb0']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - C - C - VOUT', 'VIN - C - C - Sb - Sa - L - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['IN', 'N-C0-C1']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - L - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'N-L1-Sb1']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - C - GND', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - L - C - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa1']), ('L0', ['N-C0-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-C0-L0-Sa1']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - C - Sb - L - GND', 'VIN - Sa - L - Sb - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['N-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sb - L - GND', 'VOUT - L - Sa - Sa - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa1-Sb0']), ('L1', ['N-L0-L1-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-L1-Sa1-Sb0', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-L0-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-L2-Sa0-Sb0']), ('L1', ['N-L0-L1', 'OUT']), ('L2', ['0', 'N-L0-L2-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L2-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-L2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-L2-Sa0-Sb0']), ('L1', ['N-L0-L1', 'OUT']), ('L2', ['0', 'N-L0-L2-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L2-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-L2-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - C - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C2-Sa0-Sb0']), ('Sa0', ['N-C2-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - C - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C2-Sa0-Sb0']), ('Sa0', ['N-C2-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C2-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb0', 'N-C0-Sa1']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('L1', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - L - GND', 'VIN - Sb - Sa - C - Sa - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-Sa1']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - Sb - C - Sb - GND', 'VOUT - Sa - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0-Sb1']), ('Sa0', ['N-Sa0-Sb2', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-Sb0-Sb1']), ('Sb2', ['IN', 'N-Sa0-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - L - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-L1-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - C - Sb - Sa - L - GND', 'VOUT - C - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - C - Sb - Sa - L - GND', 'VOUT - C - Sb - Sa - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - C - Sa - VOUT', 'VIN - Sb - Sa - C - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'N-C0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sb1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - C - Sb - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0-Sb1', 'N-C0-Sa1-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0-Sb1']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0-Sb1', 'N-C0-Sa1-Sb0']), ('Sb1', ['N-C0-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - C - Sb - Sa - Sb - GND', 'VIN - C - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-C0-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - VOUT', 'VIN - C - Sb - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - C - Sb - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb1']), ('C1', ['IN', 'N-C1-Sb0-Sb1']), ('Sa0', ['N-C0-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb1', 'N-C1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - C - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['N-C1-Sa1', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - L - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - L - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1']), ('L0', ['0', 'N-L0-Sb0']), ('L1', ['N-C0-L1', 'N-L1-Sa0']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - L - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sa2-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1-Sa2-Sb0', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-L0-Sa1-Sa2-Sb0']), ('Sb0', ['N-L0-Sa1-Sa2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VOUT - L - L - C - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VOUT - L - L - C - GND', 'VOUT - Sa - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sb - L - GND', 'VIN - Sa - Sb - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-L0-L1-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sa - C - C - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sb0']), ('C1', ['N-C0-C1', 'N-C1-Sa0-Sb1']), ('Sa0', ['IN', 'N-C1-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C1-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - C - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sb0']), ('C1', ['N-C0-C1', 'N-C1-Sa0-Sb1']), ('Sa0', ['IN', 'N-C1-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C1-Sa0-Sb1'])])
['VIN - Sa - L - Sa - Sb - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sb - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'N-L0-Sa1']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('C1', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('C1', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-L0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.00023946209009576163
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 1.5702687982781384e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 32 cumulate planning time: 32
sim.current.step 1
root offset is:  1
['VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - L - Sb - Sa - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - L - Sb - Sa - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
PCC-17859 violations

['VIN - L - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - L - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - L - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sa - C - Sb - L - VOUT', 'VIN - C - L - VOUT', 'VIN - Sa - C - GND', 'VIN - C - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['0', 'N-C1-Sa0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - L - GND', 'VIN - Sb - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-Sa0']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sa1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb2']), ('Sa0', ['0', 'N-C0-Sa0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sb1-Sb2']), ('Sb2', ['N-C0-Sa0-Sb2', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - C - L - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sa - Sb - C - L - GND', 'VOUT - Sa - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-C0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-Sa1-Sb1']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['N-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sa - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa0', ['0', 'N-C0-Sa0-Sa1']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - C - Sb - GND', 'VIN - Sa - Sa - C - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1', 'N-C0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sa - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sa - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-Sa0', 'N-L1-Sa1']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-L1-Sa0']), ('Sa1', ['N-L1-Sa1', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sb - L - Sb - GND', 'VOUT - Sa - Sb - Sb - Sb - GND', 'VOUT - Sa - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0-Sb1', 'N-L0-Sb1-Sb2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'N-L0-Sb1-Sb2']), ('Sb2', ['IN', 'N-L0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - L - L - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sa - L - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sa - L - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - C - Sa - Sa - VOUT', 'VIN - C - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C0-Sa1', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['0', 'N-Sa2-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sa - VOUT', 'VIN - C - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C0-Sa1', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['0', 'N-Sa2-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'N-Sa2-Sb0'])])
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - L - GND', 'VIN - Sa - Sb - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['N-L0-L1-L2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - L - GND', 'VIN - Sa - Sb - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['N-L0-L1-L2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - L - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['N-C0-L0-Sa0-Sb0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - GND', 'VIN - L - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - Sb - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sa2']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa1-Sa2', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['0', 'N-L0-Sa1-Sa2']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1-Sb3']), ('Sb0', ['0', 'N-Sb0-Sb2']), ('Sb1', ['N-Sa0-Sb1-Sb3', 'N-Sb1-Sb2']), ('Sb2', ['N-Sb0-Sb2', 'N-Sb1-Sb2']), ('Sb3', ['N-Sa0-Sb1-Sb3', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND', 'VOUT - Sb - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VIN - L - L - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0']), ('L0', ['IN', 'N-C0-L0-L1-Sa0']), ('L1', ['0', 'N-C0-L0-L1-Sa0']), ('Sa0', ['0', 'N-C0-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - Sb - VOUT', 'VIN - Sa - L - Sa - C - VOUT', 'VIN - Sa - L - Sb - C - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'N-L0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - Sb - VOUT', 'VIN - Sa - L - Sa - C - VOUT', 'VIN - Sa - L - Sb - C - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'N-L0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sb - L - VOUT', 'VIN - L - C - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'N-L1-Sb0'])])
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - C - Sb - VOUT', 'VIN - C - C - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sb0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-C1-Sb0-Sb1', 'N-Sa0-Sb0']), ('Sb1', ['N-C1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - C - Sb - VOUT', 'VIN - C - C - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sb0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-C1-Sb0-Sb1', 'N-Sa0-Sb0']), ('Sb1', ['N-C1-Sb0-Sb1', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - L - Sa - Sa - GND', 'VIN - Sa - C - GND', 'VOUT - L - Sa - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - Sa - Sa - GND', 'VIN - Sa - C - GND', 'VOUT - L - Sa - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sb - C - C - Sa - GND', 'VOUT - Sb - Sb - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sa0']), ('C1', ['N-C0-C1', 'N-C1-Sb0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'N-C1-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.00016348410565083968
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 20 cumulate planning time: 52
sim.current.step 2
root offset is:  1
['VIN - Sa - C - VOUT', 'VIN - Sa - C - C - Sb - GND', 'VIN - Sa - C - C - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['N-C1-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C1-L0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['0', 'N-C1-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - C - L - Sa - L - GND', 'VOUT - L - Sa - L - GND', 'VOUT - C - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0', 'N-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-C2-Sb0']), ('C1', ['0', 'N-C0-C1-C2-Sb0']), ('C2', ['0', 'N-C0-C1-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-C2-Sb0']), ('C1', ['0', 'N-C0-C1-C2-Sb0']), ('C2', ['0', 'N-C0-C1-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-C2-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - Sb - Sa - L - VOUT', 'VIN - C - Sb - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L0-Sa0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - L - VOUT', 'VIN - C - Sb - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L0-Sa0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - Sa - VOUT', 'VIN - C - Sa - Sb - C - GND', 'VIN - C - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa1-Sb0']), ('L0', ['N-C0-L0-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - C - L - GND', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VIN - L - L - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - Sa - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-L1-Sa1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.00032060059881475027
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.0003295610886000081
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 6 cumulate planning time: 58
sim.current.step 3
root offset is:  1
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'N-L0-Sa1-Sb0-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sa1', ['IN', 'N-L0-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-L0-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - L - GND', 'VIN - Sa - L - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - L - GND', 'VIN - Sa - L - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - L - Sb - VOUT', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sb0']), ('L0', ['0', 'N-C0-L0-L1-Sb0']), ('L1', ['N-C0-L0-L1-Sb0', 'N-L1-Sa0']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sb0', ['N-C0-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - Sa - L - Sb - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - Sa - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sb0']), ('L0', ['0', 'N-L0-Sb0']), ('L1', ['N-C0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-L1-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.00012573971432686953
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 3
action child  1  avg_return: 0.0004006501233634153
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 60
sim.current.step 4
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - L - C - Sa - Sb - GND', 'VOUT - L - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sa - C - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-C1-Sa0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sa - C - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-C1-Sa0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - C - Sb - L - VOUT', 'VIN - L - Sa - GND', 'VOUT - L - Sb - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-C0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['0', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - L - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['0', 'N-Sb0-Sb1'])])
PCC-17859 violations

action  0  : node on 2
action child  0  avg_return: 1.1530731963665553e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.001463722382189095
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 1
action child  2  avg_return: 7.622278067031648e-08
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
action  3  : node on 3
action child  3  avg_return: 3.942355989998658e-08
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'C1-left', 'C1-right']
state child 3 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 61
sim.current.step 5
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sa - VOUT', 'VIN - L - Sa - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
has to be unconnected
action  0  : edge on [1, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  1  : edge on [1, 7]
action child  1  avg_return: 4.748660544492053e-14
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  2  : edge on [1, 11]
action child  2  avg_return: 0.000962557945123186
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  3  : edge on [1, 3]
action child  3  avg_return: 0.005379912339814382
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  4  : edge on [1, 5]
action child  4  avg_return: 3.2670450102303686e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 63
sim.current.step 6
root offset is:  1
['VIN - L - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - C - Sa - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - L - Sa - GND', 'VIN - Sa - C - L - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [2, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}})
action  1  : edge on [2, 9]
action child  1  avg_return: 1.2794074804308773e-09
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {9}, 9: {2}})
action  2  : edge on [2, 11]
action child  2  avg_return: 0.01613973702403458
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {11}, 11: {2}})
action  3  : edge on [2, 4]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2}})
action  4  : edge on [2, 5]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {5}, 5: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 7
root offset is:  1
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - Sa - VOUT', 'VIN - Sa - Sb - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - Sa - VOUT', 'VIN - Sa - Sb - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sb0'])])
PCC-17859 violations

action  0  : edge on [0, 5]
action child  0  avg_return: 9.182871556927383e-12
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {11}, 11: {2}, 0: {5}, 5: {0}})
action  1  : edge on [0, 7]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0}})
action  2  : edge on [0, 9]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {11}, 11: {2}, 0: {9}, 9: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 8
root offset is:  1
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sa - L - Sb - GND', 'VOUT - Sa - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [3, 7]
action child  0  avg_return: 0.00012408953430295534
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0}, 7: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 9
root offset is:  1
action  0  : edge on [4, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0}, 7: {3}, 4: {8}, 8: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 10
root offset is:  1
action  0  : edge on [5, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3}, 4: {8}, 8: {4}, 9: {5}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3}, 4: {8}, 8: {4}, 9: {5}, 6: {10}, 10: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 12
root offset is:  1
action  0  : edge on [7, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3, 12}, 4: {8}, 8: {4}, 9: {5}, 6: {10}, 10: {6}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 13
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3, 12}, 4: {8}, 8: {4}, 9: {5}, 6: {10}, 10: {6}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 14
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3, 12}, 4: {8}, 8: {4}, 9: {5}, 6: {10}, 10: {6}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 15
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3, 12}, 4: {8}, 8: {4}, 9: {5}, 6: {10}, 10: {6}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 16
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3, 12}, 4: {8}, 8: {4}, 9: {5}, 6: {10}, 10: {6}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
sim.current.step 17
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1, 7}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 9}, 7: {3, 12}, 4: {8}, 8: {4}, 9: {5}, 6: {10}, 10: {6}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 63
effis of topo: [{'parameter': '0.9', 'efficiency': {'efficiency': 0.04, 'output_voltage': 45.0}, 'output_voltage': 45.0}]
#####################Game:   steps:  18   average cumulate reward:  0
title result with parameter:0.9 
-1 , 15 : 18.0
[{'parameter': '0.9', 'efficiency': {'efficiency': 0.04, 'output_voltage': 45.0}, 'output_voltage': 45.0}]
hash counter 0
hash length 116

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sa - L - Sa - GND', 'VOUT - L - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('L2', ['N-L2-Sa1', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'N-L2-Sa1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'N-Sa2-Sa3-Sb0']), ('Sa3', ['0', 'N-Sa2-Sa3-Sb0']), ('Sb0', ['N-Sa2-Sa3-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - L - Sa - L - L - L - GND', 'VOUT - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L3', 'OUT']), ('L1', ['0', 'N-L1-L3']), ('L2', ['IN', 'N-L2-Sa0']), ('L3', ['N-L0-L3', 'N-L1-L3']), ('Sa0', ['N-L2-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - L - L - L - GND', 'VOUT - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L3', 'OUT']), ('L1', ['0', 'N-L1-L3']), ('L2', ['IN', 'N-L2-Sa0']), ('L3', ['N-L0-L3', 'N-L1-L3']), ('Sa0', ['N-L2-Sa0', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - L - Sb - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - C - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-L0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - L - VOUT', 'VIN - Sa - L - Sa - GND', 'VOUT - L - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa2', 'N-L0-Sa1']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sa2', 'N-L1-Sa0']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sa2', ['IN', 'N-L0-Sa0-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - L - VOUT', 'VIN - Sa - L - Sa - GND', 'VOUT - L - Sa - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0-Sa2', 'N-L0-Sa1']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sa2', 'N-L1-Sa0']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sa2', ['IN', 'N-L0-Sa0-Sa2'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sa - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sa - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sa2', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sa2']), ('Sa2', ['N-L0-Sa1-Sa2', 'N-Sa2-Sb0']), ('Sb0', ['IN', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sb0']), ('Sb0', ['IN', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - C - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - C - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - L - Sb - Sb - VOUT', 'VIN - Sb - L - L - GND', 'VOUT - Sb - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sb2']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT']), ('Sb2', ['IN', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sb - Sb - VOUT', 'VIN - Sb - L - L - GND', 'VOUT - Sb - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sb2']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT']), ('Sb2', ['IN', 'N-L0-Sb2'])])
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - C - GND', 'VIN - L - L - C - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - C - GND', 'VIN - L - L - C - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - Sb - GND', 'VIN - Sa - Sb - L - L - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'N-L1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - Sb - L - GND', 'VOUT - Sa - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb1']), ('L0', ['0', 'N-L0-Sb1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - Sb - L - GND', 'VOUT - Sa - C - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb1']), ('L0', ['0', 'N-L0-Sb1']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-L0-Sb1'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - C - Sa - GND', 'VIN - L - Sa - Sa - GND', 'VOUT - Sa - L - C - Sa - GND', 'VOUT - Sa - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa1', 'N-C0-Sa0-Sa1']), ('L0', ['IN', 'N-C0-L0-Sa1']), ('Sa0', ['0', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-L0-Sa1', 'N-C0-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - C - Sa - GND', 'VIN - L - Sa - Sa - GND', 'VOUT - Sa - L - C - Sa - GND', 'VOUT - Sa - L - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa1', 'N-C0-Sa0-Sa1']), ('L0', ['IN', 'N-C0-L0-Sa1']), ('Sa0', ['0', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-L0-Sa1', 'N-C0-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C1-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C1-Sa0-Sb1', 'N-Sb0-Sb1'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - L - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - C - VOUT', 'VIN - C - L - C - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - C - GND', 'VOUT - C - Sb - Sa - C - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C1-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-C1-L0-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - L - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - Sb - Sa - GND', 'VIN - L - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - Sb - L - Sb - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('L1', ['N-L1-Sb1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['N-L1-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-L1-Sa1-Sb0']), ('L1', ['N-L0-L1-Sa0', 'N-L0-L1-Sa1-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'N-L0-L1-Sa1-Sb0']), ('Sb0', ['N-L0-L1-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - L - C - GND', 'VOUT - C - Sb - Sa - C - GND', 'VOUT - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-L0-Sa0']), ('L0', ['IN', 'N-C1-L0-Sa0']), ('Sa0', ['N-C1-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - Sa - L - GND', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-Sa0']), ('L1', ['0', 'N-L0-L1-L2-Sa0']), ('L2', ['0', 'N-L0-L1-L2-Sa0']), ('Sa0', ['N-L0-L1-L2-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - L - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - L - GND', 'VIN - C - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sa2', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1-Sa2']), ('Sa1', ['N-L0-Sa0-Sa1-Sa2', 'N-Sa1-Sb0']), ('Sa2', ['N-L0-Sa0-Sa1-Sa2', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
['VIN - L - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - C - GND', 'VOUT - Sa - L - Sb - C - GND', 'VOUT - Sa - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sa - Sb - GND', 'VIN - Sa - L - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sb - L - L - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - Sa - L - VOUT', 'VIN - Sa - Sa - L - Sb - GND', 'VOUT - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa1', 'N-L0-Sb0']), ('L1', ['N-L0-L1-Sa1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-L1-Sa1', 'N-Sa0-Sa1']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - C - L - Sa - GND', 'VIN - L - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sb0']), ('L0', ['IN', 'N-C0-L0-L1-Sb0']), ('L1', ['N-C0-L0-L1-Sb0', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sb0', ['N-C0-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - C - Sb - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - C - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - C - Sb - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - C - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - C - GND', 'VIN - Sa - Sb - L - L - GND', 'VOUT - L - C - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['N-C0-L0-L1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sb - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sa - L - C - GND', 'VOUT - L - C - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'N-C1-L0']), ('L0', ['N-C1-L0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sa - L - L - Sa - GND', 'VOUT - Sa - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa1']), ('L1', ['N-L0-L1', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - L - L - Sa - GND', 'VOUT - Sa - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa1']), ('L1', ['N-L0-L1', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - C - Sb - L - VOUT', 'VIN - Sa - C - GND', 'VOUT - L - Sb - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'N-C1-Sb0']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-Sa0']), ('Sb0', ['N-C1-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - C - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - L - Sa - GND', 'VIN - C - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sa0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sa0', 'N-L0-L1-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - L - Sa - GND', 'VIN - C - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sa0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sa0', 'N-L0-L1-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - L - Sb - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['N-Sa0-Sb1-Sb2', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'N-Sa0-Sb1-Sb2']), ('Sb2', ['0', 'N-Sa0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 3.417520842459266e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 26 cumulate planning time: 26
sim.current.step 1
root offset is:  1
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - C - L - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sb - Sa - C - L - GND', 'VOUT - Sb - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-L1', 'N-C0-L0-Sa0']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - C - L - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sb - Sa - C - L - GND', 'VOUT - Sb - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-L1', 'N-C0-L0-Sa0']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - C - GND', 'VOUT - Sa - Sb - L - C - GND', 'VOUT - Sa - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - Sa - Sb - GND', 'VIN - Sb - C - Sa - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['N-C1-Sb1', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'N-C1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - L - C - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-L1']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('L1', ['N-C0-L1', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - L - Sb - Sb - GND', 'VOUT - Sa - L - Sb - Sb - GND', 'VOUT - Sa - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1-Sb2']), ('Sb1', ['0', 'N-Sb0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb2', 'N-Sb0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - C - Sb - GND', 'VOUT - Sa - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0-Sb2', 'N-C0-Sb1']), ('Sa0', ['N-Sa0-Sb2', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0-Sb2']), ('Sb1', ['0', 'N-C0-Sb1']), ('Sb2', ['N-C0-Sb0-Sb2', 'N-Sa0-Sb2'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sb - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa2', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-L0-Sa2']), ('Sb0', ['N-L0-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sb - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa2', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-L0-Sa2']), ('Sb0', ['N-L0-Sb0', 'N-Sa0-Sb0'])])
['VIN - C - Sb - L - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sa - Sa - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - C - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - C - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - Sb - L - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - C - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('C1', ['N-C1-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'N-C1-Sa0-Sb0']), ('Sb0', ['0', 'N-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - C - VOUT', 'VIN - Sa - L - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['N-C0-L0-Sa0-Sb0', 'N-L0-Sa1']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - Sb - GND', 'VIN - Sb - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sb1', 'N-Sa0-Sb2-Sb3']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1']), ('Sb2', ['N-Sa0-Sb2-Sb3', 'OUT']), ('Sb3', ['N-Sa0-Sb2-Sb3', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - C - GND', 'VIN - L - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sa0']), ('L0', ['N-C0-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-C0-L0-L1-Sa0']), ('Sa0', ['IN', 'N-C0-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - C - Sb - GND', 'VIN - L - C - Sb - GND', 'VOUT - Sa - L - C - Sb - GND', 'VOUT - Sa - L - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-L0', 'N-C0-C1-Sb0']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - C - Sb - GND', 'VIN - L - C - Sb - GND', 'VOUT - Sa - L - C - Sb - GND', 'VOUT - Sa - L - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-L0', 'N-C0-C1-Sb0']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])
PCC-17859 violations

['VIN - L - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'N-L1-Sb1']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - Sb - GND', 'VIN - Sa - L - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-Sb0-Sb2']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb2', ['0', 'N-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - L - GND', 'VOUT - Sb - Sb - C - L - GND', 'VOUT - Sa - Sb - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - Sa - L - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - L - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - L - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - L - Sa - L - Sb - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('L2', ['IN', 'N-L2-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['0', 'N-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('C1', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('L0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('C1', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('L0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-L0-Sa0-Sb0'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - Sa - Sb - Sb - GND', 'VOUT - C - L - Sb - Sb - GND', 'VOUT - C - Sa - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['0', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - L - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VIN - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - L - C - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0-Sa0-Sb0', 'OUT']), ('L0', ['IN', 'N-C1-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C1-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - Sb - C - Sa - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C1-Sa0']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - Sb - C - Sa - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C1-Sa0']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
action  0  : node on 1
action child  0  avg_return: 0.00012538509628361074
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 8.121983405321309e-08
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 15 cumulate planning time: 41
sim.current.step 2
root offset is:  1
['VIN - C - Sb - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['VIN - Sb - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'N-L0-Sa1-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - Sa - VOUT', 'VIN - Sb - Sa - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sb1']), ('L1', ['N-L0-L1-Sb1', 'N-L1-Sa0']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-C2-Sa0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('C2', ['N-C0-C2-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-C2-Sa0']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-C2-Sa0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('C2', ['N-C0-C2-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-C2-Sa0']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('C1', ['N-C0-C1-Sa0-Sb0', 'N-C1-Sb1']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C1-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L2-Sa0']), ('L1', ['0', 'N-L0-L1-L2-Sa0']), ('L2', ['0', 'N-L0-L1-L2-Sa0']), ('Sa0', ['IN', 'N-L0-L1-L2-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - C - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb2', ['IN', 'OUT'])])
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - C - Sb - Sa - GND', 'VIN - Sb - C - L - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - Sa - C - GND', 'VIN - L - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - GND', 'VOUT - Sa - C - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - GND', 'VOUT - Sa - C - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa1-Sb0']), ('L1', ['N-L0-L1-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-L1-Sa1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sb - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - C - Sb - Sb - GND', 'VIN - C - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - L - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa0-Sb0']), ('L1', ['N-L0-L1', 'N-L1-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - L - L - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa0-Sb0']), ('L1', ['N-L0-L1', 'N-L1-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
PCC-17859 violations

action  0  : node on 2
action child  0  avg_return: 0.0070412600781071715
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 1.1251579480665009e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 6 cumulate planning time: 47
sim.current.step 3
root offset is:  1
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sa - L - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sb - C - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb1']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-C0-Sa0-Sb1', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - L - GND', 'VIN - L - Sa - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb1']), ('L1', ['IN', 'N-L1-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'N-L1-Sa0-Sb0-Sb1']), ('Sb0', ['N-L1-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-L1-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - C - L - Sb - GND', 'VIN - L - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0']), ('L0', ['IN', 'N-C0-L0-L1-Sa0']), ('L1', ['N-C0-L0-L1-Sa0', 'N-L1-Sb0']), ('Sa0', ['N-C0-L0-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - L - GND', 'VIN - Sa - Sb - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L2-Sb0']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2-Sb0', 'N-L1-L2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - L - GND', 'VIN - Sa - Sb - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L2-Sb0']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2-Sb0', 'N-L1-L2']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L2-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb1', 'OUT'])])
PCC-17859 violations

['VIN - L - Sb - VOUT', 'VIN - Sa - C - Sa - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - Sa - C - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'N-C0-Sa1']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - Sb - VOUT', 'VIN - Sa - L - Sb - VOUT', 'VIN - L - L - Sb - C - GND', 'VIN - Sa - L - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1-Sa0', 'N-L0-Sb0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - Sb - VOUT', 'VIN - Sa - L - Sb - VOUT', 'VIN - L - L - Sb - C - GND', 'VIN - Sa - L - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1-Sa0', 'N-L0-Sb0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - L - Sa - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - L - Sa - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['N-Sa2-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 3
action child  0  avg_return: 0.009930941692160595
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.0003341086369626471
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 3 cumulate planning time: 50
sim.current.step 4
root offset is:  1
has to be unconnected
['VIN - Sb - C - C - VOUT', 'VIN - L - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0', 'OUT']), ('C1', ['N-C0-C1-L0-Sa0', 'N-C1-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0']), ('Sb0', ['IN', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - C - L - L - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - L - L - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
action  0  : node on 3
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 1.4998757200928453e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 1
action child  2  avg_return: 0.03604018427730845
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
action  3  : node on 0
action child  3  avg_return: 5.275408501092706e-06
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 3 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 51
sim.current.step 5
root offset is:  1
['VIN - Sa - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - L - Sb - C - GND', 'VOUT - Sa - L - Sb - Sb - GND', 'VOUT - Sa - L - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
action  0  : edge on [1, 11]
action child  0  avg_return: 0.0002422350869491585
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  1  : edge on [1, 9]
action child  1  avg_return: 0.1388042276839483
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  2  : edge on [1, 7]
action child  2  avg_return: 3.2670450102303686e-07
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  3  : edge on [1, 3]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  4  : edge on [1, 5]
action child  4  avg_return: 1.642648329166107e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 6
root offset is:  1
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [2, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {10}, 10: {2}})
action  1  : edge on [2, 5]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {5}, 5: {2}})
action  2  : edge on [2, 7]
action child  2  avg_return: 0.485814796893819
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}})
action  3  : edge on [2, 3]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2}})
action  4  : edge on [2, 11]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {11}, 11: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 7
root offset is:  1
has to be unconnected
action  0  : edge on [0, 3]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}})
action  1  : edge on [0, 11]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}})
action  2  : edge on [0, 5]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {5}, 5: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 8
root offset is:  1
action  0  : edge on [3, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 9
root offset is:  1
action  0  : edge on [4, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}, 6: {10}, 10: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 12
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}, 6: {10}, 10: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 13
root offset is:  1
action  0  : edge on [8, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}, 6: {10}, 10: {6}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 14
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}, 6: {10}, 10: {6}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 15
root offset is:  1
['VIN - C - L - VOUT', 'VIN - C - Sb - Sa - GND', 'VIN - C - Sb - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0-Sb1']), ('L0', ['N-C0-L0-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sb0-Sb1', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-C0-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
action  0  : edge on [10, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}, 6: {10}, 10: {12, 6}, 8: {12}, 12: {8, 10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 51
sim.current.step 16
root offset is:  1
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0.0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0, 5}, 5: {3}, 4: {11}, 11: {4}, 6: {10}, 10: {12, 6}, 8: {12}, 12: {8, 10}})
['VIN - C - L - VOUT', 'VIN - C - Sb - Sa - GND', 'VIN - C - Sb - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0-Sb1']), ('L0', ['N-C0-L0-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sb0-Sb1', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-C0-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
instant reward: 0 cumulate reward:  0.0 planning time: 0 cumulate planning time: 51
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  17   average cumulate reward:  0.0
title result with parameter:0.5 
-1 , 15 : 17.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 1
hash length 123

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - C - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0-Sb0']), ('C1', ['0', 'N-C0-C1']), ('C2', ['IN', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - C - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0-Sb0']), ('C1', ['0', 'N-C0-C1']), ('C2', ['IN', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - C - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - C - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'N-C1-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-C1-Sa1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - C - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - C - L - Sb - GND', 'VOUT - Sa - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa3-Sa4', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['0', 'N-Sa2-Sa4']), ('Sa3', ['N-Sa0-Sa3-Sa4', 'N-Sa1-Sa3']), ('Sa4', ['N-Sa0-Sa3-Sa4', 'N-Sa2-Sa4'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - L - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - C - L - Sa - GND', 'VOUT - C - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa1-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb2', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['N-L0-Sa0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sb - Sb - L - Sb - GND', 'VOUT - Sb - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb2']), ('L1', ['IN', 'N-L0-L1-Sb2']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-L0-L1-Sb2'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - VOUT', 'VIN - Sa - L - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0-Sb0', 'N-L0-Sa1']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-Sb0']), ('L1', ['N-L0-L1-L2-Sb0', 'OUT']), ('L2', ['N-L0-L1-L2-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-L1-L2-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - C - VOUT', 'VIN - L - Sa - GND', 'VIN - L - C - GND', 'VOUT - C - Sa - L - Sa - GND', 'VOUT - C - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('C1', ['N-C1-Sa1', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sa1', ['IN', 'N-C1-Sa1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - L - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - L - C - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('C2', ['IN', 'N-C2-L0']), ('L0', ['N-C2-L0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - L - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - L - C - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('C2', ['IN', 'N-C2-L0']), ('L0', ['N-C2-L0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa4']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['0', 'N-Sa1-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa4']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['0', 'N-Sa1-Sa4'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - C - GND', 'VOUT - C - L - Sa - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['N-C0-C1-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - C - GND', 'VOUT - C - L - Sa - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['N-C0-C1-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sa - Sa - GND', 'VIN - Sb - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1-Sa2']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'N-Sa2-Sa3']), ('Sa3', ['N-Sa2-Sa3', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sa2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sa2']), ('Sa2', ['0', 'N-L0-Sa1-Sa2']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VIN - C - C - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VIN - C - C - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - Sa - GND', 'VIN - Sa - L - L - Sa - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['N-L0-L1-Sb0', 'N-L1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L1-Sa1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'N-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - Sa - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sb - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb2']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT']), ('Sb2', ['IN', 'N-Sa0-Sb2'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - C - Sb - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - Sa - L - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0-Sa1-Sb0']), ('L1', ['N-L0-L1-Sa0-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-L1-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - L - Sa - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa1-Sb0']), ('L0', ['N-C0-L0-Sa1-Sb0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'N-C0-L0-Sa1-Sb0']), ('Sb0', ['N-C0-L0-Sa1-Sb0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.47 vout: 47.0
['VIN - L - Sb - Sa - VOUT', 'VIN - L - Sb - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'N-Sa1-Sb1']), ('Sb0', ['N-L0-Sb0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['0', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - L - GND', 'VOUT - L - Sa - GND', 'VOUT - L - L - GND', 'VOUT - C - Sa - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('L1', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2-Sa0', 'OUT']), ('L1', ['N-L0-L1-L2-Sa0', 'N-L1-L2-Sb0']), ('L2', ['N-L0-L1-L2-Sa0', 'N-L1-L2-Sb0']), ('Sa0', ['IN', 'N-L0-L1-L2-Sa0']), ('Sb0', ['0', 'N-L1-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-L2-Sa0', 'OUT']), ('L1', ['N-L0-L1-L2-Sa0', 'N-L1-L2-Sb0']), ('L2', ['N-L0-L1-L2-Sa0', 'N-L1-L2-Sb0']), ('Sa0', ['IN', 'N-L0-L1-L2-Sa0']), ('Sb0', ['0', 'N-L1-L2-Sb0'])])
['VIN - L - Sb - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sb - Sa - L - VOUT', 'VIN - C - Sa - L - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - Sa - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb1', ['0', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('C1', ['0', 'N-C1-L0']), ('L0', ['N-C0-L0-Sb0', 'N-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0', 'N-C0-L0-Sb0']), ('C1', ['N-C0-C1-L0-Sa0', 'OUT']), ('L0', ['N-C0-C1-L0-Sa0', 'N-C0-L0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-L0-Sa0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['VIN - L - C - Sb - Sa - VOUT', 'VIN - L - C - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1-Sb0']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['0', 'N-C0-L1-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-L1-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sb - Sb - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-C0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VOUT - Sb - Sa - Sb - L - GND', 'VOUT - Sb - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb2']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1']), ('Sb2', ['N-Sa0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-C2-Sa0', 'N-C0-Sb0']), ('C1', ['IN', 'N-C0-C1-C2-Sa0']), ('C2', ['IN', 'N-C0-C1-C2-Sa0']), ('Sa0', ['N-C0-C1-C2-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-C2-Sa0', 'N-C0-Sb0']), ('C1', ['IN', 'N-C0-C1-C2-Sa0']), ('C2', ['IN', 'N-C0-C1-C2-Sa0']), ('Sa0', ['N-C0-C1-C2-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - L - Sb - Sa - GND', 'VIN - L - L - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - C - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sa - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - L - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('L0', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - L - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['0', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - C - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - C - L - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-L0', 'OUT']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - C - VOUT', 'VIN - C - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C2-Sa0-Sb0']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - C - VOUT', 'VIN - C - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C2-Sa0-Sb0']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - L - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0-Sb1']), ('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-C0-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb0-Sb1', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - C - Sa - L - GND', 'VIN - Sb - C - Sa - Sa - GND', 'VOUT - C - Sa - L - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0', 'N-L0-Sa0-Sa1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - C - Sb - VOUT', 'VIN - Sb - C - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb1', 'OUT']), ('C1', ['N-C0-C1-Sa0-Sb1', 'N-C1-Sb0']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb1']), ('Sb0', ['IN', 'N-C1-Sb0']), ('Sb1', ['N-C0-C1-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sb - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb1', 'N-Sa0-Sa2-Sb0']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb1']), ('Sa2', ['0', 'N-Sa0-Sa2-Sb0']), ('Sb0', ['N-Sa0-Sa2-Sb0', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - C - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - C - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['N-C0-L1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - C - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['N-C0-L1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - Sb - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb1', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - L - C - VOUT', 'VIN - Sa - Sb - C - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['0', 'N-C0-L1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.012583966806700634
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 25 cumulate planning time: 25
sim.current.step 1
root offset is:  1
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - C - L - GND', 'VIN - Sa - C - L - GND', 'VOUT - C - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('C1', ['N-C0-C1-Sa0-Sb0', 'N-C1-L0']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - Sa - C - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'N-Sb1-Sb2']), ('Sb2', ['N-Sb1-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sa - Sb - VOUT', 'VIN - L - C - GND', 'VOUT - Sb - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sa0', ['N-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sb - VOUT', 'VIN - C - Sa - Sb - VOUT', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sa1']), ('C1', ['0', 'N-C0-C1-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sa1']), ('Sa1', ['N-C0-C1-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VIN - Sa - Sb - L - L - GND', 'VOUT - L - Sa - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - Sb - Sa - GND', 'VIN - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - Sb - Sa - GND', 'VIN - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - L - Sb - C - GND', 'VOUT - Sa - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb0']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1-Sb0']), ('Sb0', ['IN', 'N-C0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sb0']), ('Sb0', ['N-Sa2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'N-L0-Sa1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sa1', ['IN', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.95 vout: 54.0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sb1', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-Sa0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sb1', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-Sa0-Sa1-Sb1', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - Sb - GND', 'VIN - Sa - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'N-C0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['N-C0-Sb1', 'OUT']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sb - Sb - Sa - Sb - GND', 'VOUT - Sb - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb1', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - L - C - VOUT', 'VIN - L - L - Sa - Sb - GND', 'VOUT - C - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'OUT']), ('L0', ['N-C0-L0-L1', 'N-L0-Sa0']), ('L1', ['IN', 'N-C0-L0-L1']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - L - Sa - Sb - GND', 'VOUT - C - L - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-L1', 'OUT']), ('L0', ['N-C0-L0-L1', 'N-L0-Sa0']), ('L1', ['IN', 'N-C0-L0-L1']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa1-Sa2-Sb0-Sb1']), ('Sa2', ['0', 'N-Sa1-Sa2-Sb0-Sb1']), ('Sb0', ['N-Sa1-Sa2-Sb0-Sb1', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'N-Sa1-Sa2-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VIN - C - C - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - Sa - GND', 'VIN - C - C - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1-Sb3']), ('Sb0', ['IN', 'N-Sb0-Sb1-Sb2']), ('Sb1', ['N-Sa0-Sb1-Sb3', 'N-Sb0-Sb1-Sb2']), ('Sb2', ['N-Sb0-Sb1-Sb2', 'OUT']), ('Sb3', ['0', 'N-Sa0-Sb1-Sb3'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1-Sb3']), ('Sb0', ['IN', 'N-Sb0-Sb1-Sb2']), ('Sb1', ['N-Sa0-Sb1-Sb3', 'N-Sb0-Sb1-Sb2']), ('Sb2', ['N-Sb0-Sb1-Sb2', 'OUT']), ('Sb3', ['0', 'N-Sa0-Sb1-Sb3'])])
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - L - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - Sa - VOUT', 'VIN - Sb - Sa - C - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-Sa1']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - L - L - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - Sb - Sa - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa1', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-L1-Sa1']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - Sb - C - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['0', 'N-C0-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'N-Sa1-Sa2']), ('Sa2', ['IN', 'N-Sa1-Sa2']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - L - VOUT', 'VIN - Sa - C - GND', 'VOUT - L - C - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['N-C1-L0', 'N-C1-Sb0']), ('L0', ['N-C1-L0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - C - Sa - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('C1', ['N-C1-L0', 'OUT']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-C0-Sa1', 'N-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - C - L - Sb - GND', 'VIN - Sa - L - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - L - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - L - C - C - GND', 'VOUT - Sa - L - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0']), ('C1', ['IN', 'N-C0-C1-L0']), ('C2', ['0', 'IN']), ('L0', ['N-C0-C1-L0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - L - C - C - GND', 'VOUT - Sa - L - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0']), ('C1', ['IN', 'N-C0-C1-L0']), ('C2', ['0', 'IN']), ('L0', ['N-C0-C1-L0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])
PCC-17859 violations

['VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L2']), ('L1', ['IN', 'N-L1-L2-Sa0-Sb0']), ('L2', ['N-L0-L2', 'N-L1-L2-Sa0-Sb0']), ('Sa0', ['N-L1-L2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L1-L2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L2']), ('L1', ['IN', 'N-L1-L2-Sa0-Sb0']), ('L2', ['N-L0-L2', 'N-L1-L2-Sa0-Sb0']), ('Sa0', ['N-L1-L2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L1-L2-Sa0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - C - L - GND', 'VIN - Sa - C - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'N-C1-L0-Sb0']), ('L0', ['0', 'N-C1-L0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['N-C1-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
action  0  : node on 1
action child  0  avg_return: 0.014159851264987445
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.002042382076274794
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 12 cumulate planning time: 37
sim.current.step 2
root offset is:  1
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sb - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - C - Sa - GND', 'VIN - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb2']), ('Sa0', ['0', 'N-C0-Sa0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sb1-Sb2', 'OUT']), ('Sb2', ['N-C0-Sa0-Sb2', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - Sb - Sa - GND', 'VIN - L - Sb - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['IN', 'N-L1-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - C - L - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - C - L - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['N-C0-L0-Sb0', 'N-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - C - L - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - C - L - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['N-C0-L0-Sb0', 'N-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - C - GND', 'VIN - C - Sb - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('C2', ['0', 'N-C2-Sa0']), ('Sa0', ['IN', 'N-C2-Sa0']), ('Sb0', ['0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - C - GND', 'VIN - C - Sb - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('C2', ['0', 'N-C2-Sa0']), ('Sa0', ['IN', 'N-C2-Sa0']), ('Sb0', ['0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - L - VOUT', 'VIN - Sa - Sb - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb0']), ('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['N-C0-Sa1-Sb0', 'N-L0-Sa1']), ('Sb0', ['N-C0-Sa1-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa2-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'N-L0-Sa2-Sb0']), ('Sb0', ['N-L0-Sa2-Sb0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - C - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - C - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - C - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - C - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - L - Sb - Sb - GND', 'VIN - Sa - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['0', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - Sa - C - L - VOUT', 'VIN - Sb - Sa - C - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-Sa0']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - C - L - VOUT', 'VIN - Sb - Sa - C - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-Sa0']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - Sa - Sb - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sb2', 'OUT']), ('Sa1', ['N-Sa1-Sb1-Sb2', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa1-Sb1-Sb2']), ('Sb2', ['N-Sa0-Sb2', 'N-Sa1-Sb1-Sb2'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.001633550256095858
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.016343502530674923
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 13 cumulate planning time: 50
sim.current.step 3
root offset is:  1
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sb - L - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-L0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - Sb - L - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - GND', 'VIN - Sa - Sb - L - Sb - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - L - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'N-L1-L2']), ('L2', ['IN', 'N-L1-L2']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'N-L1-L2']), ('L2', ['IN', 'N-L1-L2']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0'])])
PCC-17859 violations

['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - Sa - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - Sa - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - C - Sb - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - Sb - C - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-Sb0']), ('C1', ['N-C0-C1-Sa0', 'N-C1-L0']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C0-C1-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sb - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - Sb - C - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-Sb0']), ('C1', ['N-C0-C1-Sa0', 'N-C1-L0']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C0-C1-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
has to be unconnected
action  0  : node on 3
action child  0  avg_return: 0.014502238448166291
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.014961961699850725
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 7 cumulate planning time: 57
sim.current.step 3
root offset is:  1
['VIN - Sa - L - Sa - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa1', 'N-L0-Sa0']), ('L1', ['N-L0-L1-Sa1', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['N-L0-L1-Sa1', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - L - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('L1', ['IN', 'N-L1-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0', 'N-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L1-Sa0-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - L - L - Sa - VOUT', 'VIN - Sb - L - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-L2']), ('L1', ['0', 'N-L0-L1-Sa0']), ('L2', ['N-L0-L2', 'N-L2-Sb0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - Sa - VOUT', 'VIN - Sb - L - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-L2']), ('L1', ['0', 'N-L0-L1-Sa0']), ('L2', ['N-L0-L2', 'N-L2-Sb0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L2-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb1']), ('Sa0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sa1-Sb1', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sa - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L2-Sa0']), ('L1', ['N-L0-L1-L2-Sa0', 'OUT']), ('L2', ['IN', 'N-L0-L1-L2-Sa0']), ('Sa0', ['N-L0-L1-L2-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - Sa - VOUT', 'VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa2']), ('Sa0', ['N-L0-Sa0-Sa2', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['N-L0-Sa0-Sa2', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sa - GND', 'VIN - L - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('L1', ['IN', 'N-L1-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 5.323742036268778e-05
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.021850130570898525
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 58
sim.current.step 4
root offset is:  1
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - L - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-Sa1-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sa - L - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - Sa - Sb - VOUT', 'VIN - Sb - Sa - L - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-Sa1-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['N-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - Sb - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa2']), ('Sa0', ['N-L0-Sa0-Sa2', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['IN', 'N-L0-Sa0-Sa2']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 1
action child  0  avg_return: 0.04369225661443296
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.005475206290244799
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 2
action child  2  avg_return: 5.427153991888835e-08
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 5
root offset is:  1
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - Sb - Sb - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sa1-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
action  0  : edge on [1, 7]
action child  0  avg_return: 7.122990816738079e-14
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  1  : edge on [1, 9]
action child  1  avg_return: 2.4817906860591063e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  2  : edge on [1, 11]
action child  2  avg_return: 0.00037227427759011536
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  3  : edge on [1, 3]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  4  : edge on [1, 5]
action child  4  avg_return: 0.16563348295033756
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 6
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - L - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : edge on [2, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}})
action  1  : edge on [2, 6]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {6}, 6: {2}})
action  2  : edge on [2, 9]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {9}, 9: {2}})
action  3  : edge on [2, 3]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}})
action  4  : edge on [2, 7]
action child  4  avg_return: 4.873190043192785e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 7
root offset is:  1
has to be unconnected
['VIN - Sb - Sa - Sa - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sb - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0']), ('Sb1', ['IN', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
action  0  : edge on [0, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}})
action  1  : edge on [0, 3]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}})
action  2  : edge on [0, 9]
action child  2  avg_return: 0.971629593787638
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {9}, 9: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 8
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - L - Sa - Sa - GND', 'VIN - Sb - L - Sa - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [3, 8]
action child  0  avg_return: 5.704551254921274e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {9}, 9: {0}, 3: {8}, 8: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 9
root offset is:  1
has to be unconnected
action  0  : edge on [4, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}, 0: {9}, 9: {0}, 3: {8}, 8: {3}, 4: {10}, 10: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [5, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 11}, 2: {7}, 7: {2}, 0: {9}, 9: {0}, 3: {8}, 8: {3}, 4: {10}, 10: {4}, 11: {5}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 11}, 2: {7}, 7: {2}, 0: {9}, 9: {0}, 3: {8}, 8: {3, 6}, 4: {10}, 10: {4}, 11: {5}, 6: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 12
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - Sa - Sa - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sb - Sb - Sa - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1-Sb1', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa1-Sb1'])])
find_one_analytics_result using:  0
action  0  : edge on [7, 12]
action child  0  avg_return: 0.019829175383421185
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 11}, 2: {7}, 7: {2, 12}, 0: {9}, 9: {0}, 3: {8}, 8: {3, 6}, 4: {10}, 10: {4}, 11: {5}, 6: {8}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 58
sim.current.step 13
root offset is:  1
action  0  : terminal on 0
action child  0  avg_return: 0.019829175383421185
state child  0  reward: 0.019829175383421185
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 11}, 2: {7}, 7: {2, 12}, 0: {9}, 9: {0}, 3: {8}, 8: {3, 6}, 4: {10}, 10: {4}, 11: {5}, 6: {8}, 12: {7}})
['VIN - Sb - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - Sa - Sa - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sb - Sb - Sa - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1-Sb1', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa1-Sb1'])])
find_one_analytics_result using:  0
instant reward: 0 cumulate reward:  0.019829175383421185 planning time: 0 cumulate planning time: 58
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  15   average cumulate reward:  0.019829175383421185
title result with parameter:0.5 
-1 , 15 : 15.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 1
hash length 134

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[122, 68, 34, 17, 9, 5, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sa - Sa - L - GND', 'VOUT - Sa - Sb - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1', 'N-Sa0-Sa1']), ('Sa2', ['N-Sa2-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - L - L - GND', 'VIN - L - Sb - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - L - L - GND', 'VIN - L - Sb - L - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - C - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-C1-L0-Sa0-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sa0-Sb1'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sb0', ['N-Sb0-Sb2', 'OUT']), ('Sb1', ['0', 'N-Sb1-Sb3']), ('Sb2', ['N-Sb0-Sb2', 'N-Sb2-Sb3-Sb4']), ('Sb3', ['N-Sb1-Sb3', 'N-Sb2-Sb3-Sb4']), ('Sb4', ['IN', 'N-Sb2-Sb3-Sb4'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('Sb0', ['N-Sb0-Sb2', 'OUT']), ('Sb1', ['0', 'N-Sb1-Sb3']), ('Sb2', ['N-Sb0-Sb2', 'N-Sb2-Sb3-Sb4']), ('Sb3', ['N-Sb1-Sb3', 'N-Sb2-Sb3-Sb4']), ('Sb4', ['IN', 'N-Sb2-Sb3-Sb4'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sa - Sa - L - VOUT', 'VIN - L - Sa - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['N-L1-Sa0', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['N-L0-Sa1', 'N-Sa0-Sa1-Sa2']), ('Sa2', ['0', 'N-Sa0-Sa1-Sa2'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - Sb - Sa - GND', 'VIN - Sb - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sa - GND', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C2-Sa0-Sb0']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sa - GND', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C2-Sa0-Sb0']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - L - Sb - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('L1', ['N-L1-Sa0', 'N-L1-Sb1']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - L - Sb - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('L1', ['N-L1-Sa0', 'N-L1-Sb1']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-L1-Sb1'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sa - Sb - C - GND', 'VOUT - Sa - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa2-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['IN', 'N-C0-Sa2-Sb0']), ('Sb0', ['IN', 'N-C0-Sa2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - C - C - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('C2', ['0', 'N-C2-Sb0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('C2', ['0', 'N-C2-Sb0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C2-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - L - C - GND', 'VOUT - C - L - C - GND', 'VOUT - C - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('C2', ['0', 'N-C2-L0']), ('L0', ['IN', 'N-C2-L0']), ('Sa0', ['IN', 'N-C1-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - L - C - GND', 'VOUT - C - L - C - GND', 'VOUT - C - Sa - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('C2', ['0', 'N-C2-L0']), ('L0', ['IN', 'N-C2-L0']), ('Sa0', ['IN', 'N-C1-Sa0'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sa - Sa - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sa1-Sa3']), ('Sa0', ['N-L0-Sa0-Sa1-Sa3', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['N-L0-Sa0-Sa1-Sa3', 'N-Sa0-Sa1-Sa2']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa3', ['0', 'N-L0-Sa0-Sa1-Sa3'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - C - Sa - L - GND', 'VOUT - C - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sa0', 'N-L0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - Sb - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VOUT - Sb - Sa - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb1']), ('L1', ['N-L0-L1', 'N-L1-Sa0']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VOUT - Sb - Sa - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb1']), ('L1', ['N-L0-L1', 'N-L1-Sa0']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - C - L - GND', 'VIN - L - C - L - GND', 'VOUT - Sa - Sb - C - L - GND', 'VOUT - Sa - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1-Sb0']), ('L0', ['0', 'N-C0-L0']), ('L1', ['IN', 'N-C0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - C - L - GND', 'VOUT - Sb - L - C - L - GND', 'VOUT - Sa - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['0', 'N-C0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - C - L - GND', 'VOUT - Sb - L - C - L - GND', 'VOUT - Sa - L - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['0', 'N-C0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sb - L - Sa - GND', 'VOUT - L - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('L1', ['IN', 'N-L1-L2-Sa0']), ('L2', ['IN', 'N-L1-L2-Sa0']), ('Sa0', ['0', 'N-L1-L2-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - Sb - Sa - C - Sb - GND', 'VOUT - Sa - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - C - L - Sb - VOUT', 'VIN - C - C - Sb - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - C - GND', 'VIN - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-L0-Sa0-Sb0']), ('L0', ['0', 'N-C1-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C1-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb1']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-Sa1-Sb0']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb1']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-Sa1-Sb0']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
['VIN - Sb - VOUT', 'VIN - L - Sa - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sb - L - Sa - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L0-Sa0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - C - Sb - Sa - GND', 'VIN - Sa - C - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - C - Sb - Sa - GND', 'VIN - Sa - C - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-Sa1-Sb0'])])
['VIN - L - Sb - VOUT', 'VIN - L - Sa - Sb - GND', 'VIN - L - Sa - Sa - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb0']), ('Sa0', ['0', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['N-L0-Sa1-Sb0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - C - C - VOUT', 'VIN - C - C - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C2']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - C - VOUT', 'VIN - C - C - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C2']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
has to be unconnected
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - L - Sa - GND', 'VOUT - Sa - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sa1']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sa - VOUT', 'VIN - Sb - L - Sa - GND', 'VOUT - Sa - C - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sa1']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - L - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - C - L - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - L - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - C - L - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sa - Sa - L - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sa0', ['0', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['0', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sb1', ['N-C0-Sa0-Sa1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sb - VOUT', 'VIN - C - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb2']), ('Sb0', ['N-C0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT']), ('Sb2', ['N-Sa0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - Sb - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - C - Sa - Sb - Sb - GND', 'VOUT - C - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sb0-Sb1']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C0-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C0-C2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-C2-Sb0'])])
PCC-17859 violations

['VIN - C - Sb - L - VOUT', 'VIN - Sa - Sb - L - VOUT', 'VIN - C - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1-Sb0']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'N-C0-Sa1-Sb0']), ('Sb0', ['N-C0-Sa1-Sb0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - C - L - GND', 'VIN - Sa - Sb - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VIN - Sa - L - L - Sa - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['N-L0-L1', 'N-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VIN - Sa - L - L - Sa - GND', 'VOUT - L - L - Sb - GND', 'VOUT - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['N-L0-L1', 'N-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-L1-Sa0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - L - Sb - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sb - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-Sa0', 'N-L1-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-L1-Sa0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - Sb - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sb - L - Sa - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-Sa0', 'N-L1-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-L1-Sa0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
['VIN - Sa - C - Sa - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa1', 'N-C0-Sa0']), ('C1', ['N-C0-C1-Sa1', 'N-C1-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-C0-C1-Sa1']), ('Sb0', ['0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sa - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa1', 'N-C0-Sa0']), ('C1', ['N-C0-C1-Sa1', 'N-C1-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-C0-C1-Sa1']), ('Sb0', ['0', 'N-C1-Sb0'])])
['VIN - L - Sa - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sa - Sa - Sb - C - GND', 'VOUT - Sa - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa2-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-C0-Sa2-Sb0']), ('Sb0', ['N-C0-Sa2-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - Sa - L - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('L1', ['0', 'N-L1-Sa0-Sb0']), ('Sa0', ['IN', 'N-L1-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['N-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - C - Sb - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sb0-Sb1']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0-Sb1']), ('Sb1', ['N-C1-Sb0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - C - Sb - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-Sb0-Sb1']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0-Sb1']), ('Sb1', ['N-C1-Sb0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - Sb - Sa - GND', 'VIN - Sa - L - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['0', 'N-Sa1-Sb1']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['N-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
action  0  : node on -1
action child  0  avg_return: 0.010000000000000002
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.02536839813268779
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 50 cumulate planning time: 50
sim.current.step 1
root offset is:  1
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa2-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['N-Sa0-Sa2-Sa3', 'OUT']), ('Sa3', ['IN', 'N-Sa0-Sa2-Sa3']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sa - Sb - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa2-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['N-Sa0-Sa2-Sa3', 'OUT']), ('Sa3', ['IN', 'N-Sa0-Sa2-Sa3']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'OUT'])])
has to be unconnected
['VIN - Sb - L - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - L - L - C - GND', 'VOUT - L - L - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sa - L - L - C - GND', 'VOUT - L - L - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C1-L0-Sa0-Sb0']), ('Sa0', ['N-C1-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - C - L - Sb - VOUT', 'VIN - C - Sa - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - L - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sa1']), ('L1', ['N-L0-L1-Sa0-Sa1', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sa1']), ('Sa1', ['N-L0-L1-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - L - Sa - Sa - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sb - L - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['0', 'N-Sa1-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['N-Sa1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - C - Sa - GND', 'VOUT - L - Sb - GND', 'VOUT - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sa1']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - C - VOUT', 'VIN - L - Sa - Sb - GND', 'VIN - L - Sa - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0-Sb1', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-C0-Sa0-Sb0-Sb1', 'N-L0-Sa0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND', 'VOUT - C - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['IN', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sa2-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - C - L - Sa - Sb - GND', 'VOUT - C - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['IN', 'N-C0-C1-L0']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - C - L - Sa - Sb - GND', 'VOUT - C - C - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['IN', 'N-C0-C1-L0']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb0', 'N-L0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - C - VOUT', 'VIN - Sb - Sb - C - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - Sb - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - C - VOUT', 'VIN - Sb - Sb - C - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - Sb - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VOUT - Sa - Sb - Sa - Sb - GND', 'VOUT - Sa - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa1-Sb1']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - L - Sb - Sa - GND', 'VOUT - Sa - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa1']), ('L1', ['IN', 'N-L0-L1-Sa1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-L1-Sa1', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sb - L - GND', 'VIN - L - Sb - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('L2', ['IN', 'N-L2-Sa0-Sb0']), ('Sa0', ['N-L2-Sa0-Sb0', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'N-L2-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VIN - C - L - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-Sa1-Sb1-Sb2']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['N-Sa1-Sb1-Sb2', 'OUT']), ('Sb2', ['IN', 'N-Sa1-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sb1', 'N-Sa0-Sb2']), ('Sb0', ['IN', 'N-Sb0-Sb3']), ('Sb1', ['0', 'N-Sa0-Sb1']), ('Sb2', ['N-Sa0-Sb2', 'OUT']), ('Sb3', ['N-Sb0-Sb3', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sb1', 'N-Sa0-Sb2']), ('Sb0', ['IN', 'N-Sb0-Sb3']), ('Sb1', ['0', 'N-Sa0-Sb1']), ('Sb2', ['N-Sa0-Sb2', 'OUT']), ('Sb3', ['N-Sb0-Sb3', 'OUT'])])
has to be unconnected
['VIN - Sa - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - L - C - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - C - GND', 'VIN - L - Sb - C - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - L - C - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - C - GND', 'VIN - L - Sb - C - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND', 'VOUT - Sa - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND', 'VOUT - Sa - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - L - Sa - VOUT', 'VIN - L - Sa - C - Sb - GND', 'VIN - L - Sa - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - C - Sb - GND', 'VIN - L - Sa - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VOUT - Sa - Sb - Sb - C - GND', 'VOUT - Sa - L - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-L0-Sa0']), ('L0', ['IN', 'N-C1-L0-Sa0']), ('Sa0', ['0', 'N-C1-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - Sb - Sa - L - C - GND', 'VOUT - L - L - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - L - L - GND', 'VIN - Sb - Sa - L - C - GND', 'VOUT - L - L - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - L - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'N-C0-Sa1']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
has to be unconnected
has to be unconnected
action  0  : node on 1
action child  0  avg_return: 0.023384201556223522
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 17 cumulate planning time: 67
sim.current.step 2
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - L - Sa - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0-Sb1']), ('L1', ['N-L0-L1-Sa0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-L1-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - C - Sb - Sb - VOUT', 'VIN - Sa - C - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('C1', ['N-C1-Sa0', 'N-C1-Sb0']), ('Sa0', ['IN', 'N-C1-Sa0']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-C1-Sb0']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sb - Sb - VOUT', 'VIN - Sa - C - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('C1', ['N-C1-Sa0', 'N-C1-Sb0']), ('Sa0', ['IN', 'N-C1-Sa0']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-C1-Sb0']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])
has to be unconnected
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - C - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-L0-Sa0-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - C - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-L0-Sa0-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'N-C0-L0-Sa0-Sb0'])])
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VOUT - Sb - Sa - Sb - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb2']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-Sb0-Sb2']), ('Sb1', ['N-Sa0-Sb1', 'OUT']), ('Sb2', ['N-L0-Sb2', 'N-Sb0-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - C - C - Sa - VOUT', 'VIN - Sb - C - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C2-Sa0']), ('C1', ['N-C1-C2', 'N-C1-Sb0']), ('C2', ['N-C0-C2-Sa0', 'N-C1-C2']), ('Sa0', ['N-C0-C2-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - Sa - VOUT', 'VIN - Sb - C - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C2-Sa0']), ('C1', ['N-C1-C2', 'N-C1-Sb0']), ('C2', ['N-C0-C2-Sa0', 'N-C1-C2']), ('Sa0', ['N-C0-C2-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])
['VIN - C - Sb - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - Sb - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['N-C0-Sb1', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - C - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - Sa - Sb - L - C - GND', 'VOUT - Sa - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0']), ('C1', ['0', 'N-C0-C1-L0']), ('L0', ['N-C0-C1-L0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - C - GND', 'VOUT - Sa - Sb - L - C - GND', 'VOUT - Sa - Sb - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0']), ('C1', ['0', 'N-C0-C1-L0']), ('L0', ['N-C0-C1-L0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
PCC-17859 violations

['VIN - C - Sb - Sb - VOUT', 'VIN - C - C - Sa - GND', 'VOUT - Sb - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sb1']), ('C1', ['N-C0-C1-Sb1', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-C1-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - C - Sa - L - VOUT', 'VIN - L - C - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0-Sb0']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L1-Sa0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - Sb - Sa - GND', 'VIN - Sa - C - Sb - C - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['VIN - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'N-C0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-C0-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - L - Sb - C - GND', 'VOUT - L - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - C - VOUT', 'VIN - L - Sb - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0011214532068560563
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.03412437210735777
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 17 cumulate planning time: 84
sim.current.step 3
root offset is:  1
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - Sa - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'N-L1-Sa1-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'N-L1-Sa1-Sb0']), ('Sb0', ['N-L1-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sa - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sa - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - C - Sb - VOUT', 'VIN - C - C - L - VOUT', 'VIN - Sa - C - GND', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - L - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-L0-Sa0-Sb0']), ('L0', ['N-C1-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C1-L0-Sa0-Sb0']), ('Sb0', ['N-C1-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - L - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - L - L - GND', 'VOUT - C - GND', 'VOUT - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - L - Sa - VOUT', 'VIN - Sa - Sb - Sb - GND', 'VOUT - Sa - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'N-L0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
action  0  : node on 3
action child  0  avg_return: 0.029962018909186875
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.03186079252198164
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 86
sim.current.step 3
root offset is:  1
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - Sb - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb1-Sb2']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb1-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0-Sa1-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-L1-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-L0-L1-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - Sa - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - Sa - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa2-Sb0', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-L0-Sa2-Sb0']), ('Sb0', ['IN', 'N-L0-Sa2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - L - Sb - Sa - GND', 'VIN - Sb - L - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1-Sb2', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb1-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1-Sb2', 'N-Sa0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb1-Sb2', 'N-Sa0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sa - Sa - L - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - Sb - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0-Sb1']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 3.5803125201080733e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.046987129241271706
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 87
sim.current.step 4
root offset is:  1
has to be unconnected
['VIN - L - L - VOUT', 'VIN - L - L - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sb - L - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sa - Sa - Sb - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sa0-Sa1']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 1
action child  0  avg_return: 0.09716921258738467
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.002495843597027237
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 2
action child  2  avg_return: 1.3841264205241911e-05
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 88
sim.current.step 5
root offset is:  1
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - L - Sb - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sa - Sb - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb1', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - Sa - Sb - GND', 'VIN - Sb - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
action  0  : edge on [1, 11]
action child  0  avg_return: 0.1943507366643882
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  1  : edge on [1, 5]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  2  : edge on [1, 7]
action child  2  avg_return: 2.1102880426349912e-14
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  3  : edge on [1, 3]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  4  : edge on [1, 9]
action child  4  avg_return: 0.09716315430636553
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 6
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sa - Sb - L - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sa1', ['IN', 'N-Sa1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
action  0  : edge on [2, 5]
action child  0  avg_return: 6.204476715147767e-05
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}})
action  1  : edge on [2, 12]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {12}, 12: {2}})
action  2  : edge on [2, 9]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {9}, 9: {2}})
action  3  : edge on [2, 3]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {3}, 3: {2}})
action  4  : edge on [2, 7]
action child  4  avg_return: 9.488728167603238e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {7}, 7: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 7
root offset is:  1
['VIN - Sb - Sb - VOUT', 'VIN - Sa - L - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1-Sb0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['0', 'N-L0-Sa1-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0-Sb1']), ('Sb1', ['N-L0-Sa1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sa - Sb - VOUT', 'VIN - Sb - Sa - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sa1-Sb1']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb1']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-Sa0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [0, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {9}, 9: {0}})
action  1  : edge on [0, 3]
action child  1  avg_return: 0.00012408953430295534
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0}})
action  2  : edge on [0, 7]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {7}, 7: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 8
root offset is:  1
has to be unconnected
action  0  : edge on [3, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 9
root offset is:  1
action  0  : edge on [4, 6]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}, 4: {6}, 6: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 10
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}, 4: {6}, 6: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}, 4: {6}, 6: {9, 4}, 9: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 12
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}, 4: {6}, 6: {9, 4}, 9: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 13
root offset is:  1
action  0  : edge on [8, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}, 4: {6}, 6: {9, 4}, 9: {6}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 14
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [9, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}, 4: {6}, 6: {9, 4}, 9: {12, 6}, 8: {12}, 12: {8, 9}})
has to be unconnected
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 15
has to be unconnected
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0, 7}, 7: {3}, 4: {6}, 6: {9, 4}, 9: {12, 6}, 8: {12}, 12: {8, 9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  17   average cumulate reward:  0
title result with parameter:0.5 
-1 , 15 : 17.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 2
hash length 128
figures are saved in:figures/2021-05-21-13-21-08/

outputs are saved in:Results/mutitest_50-2021-05-21-13-21-08-17859.txt

figures already existed
Results already existed
finish reading key-expression
figures/2021-05-21-13-45-10/ created

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - C - GND', 'VIN - Sa - Sa - Sa - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa2-Sa3']), ('Sa0', ['N-Sa0-Sa1-Sa3', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sa3']), ('Sa2', ['N-C0-Sa2-Sa3', 'OUT']), ('Sa3', ['N-C0-Sa2-Sa3', 'N-Sa0-Sa1-Sa3'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - C - GND', 'VIN - Sa - Sa - Sa - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa2-Sa3']), ('Sa0', ['N-Sa0-Sa1-Sa3', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sa3']), ('Sa2', ['N-C0-Sa2-Sa3', 'OUT']), ('Sa3', ['N-C0-Sa2-Sa3', 'N-Sa0-Sa1-Sa3'])])
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - Sa - Sa - C - GND', 'VOUT - Sa - Sb - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sa - Sa - C - GND', 'VOUT - Sa - Sb - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sa - C - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - C - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('L0', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('L2', ['N-L2-L3', 'OUT']), ('L3', ['IN', 'N-L2-L3']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('L2', ['N-L2-L3', 'OUT']), ('L3', ['IN', 'N-L2-L3']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - L - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - L - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sb - C - C - GND', 'VIN - Sb - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sb0-Sb2', 'OUT']), ('Sb0', ['N-C1-Sb0-Sb2', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'N-C1-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sb - C - C - GND', 'VIN - Sb - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sb0-Sb2', 'OUT']), ('Sb0', ['N-C1-Sb0-Sb2', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'N-C1-Sb0-Sb2'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - C - L - Sa - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - C - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1', 'OUT']), ('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['N-C0-L1', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - Sb - L - C - Sa - GND', 'VOUT - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-C0-L1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - C - GND', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - C - GND', 'VOUT - Sa - C - Sb - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sb0']), ('C1', ['IN', 'N-C0-C1-L0-Sb0']), ('L0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-C1-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - C - VOUT', 'VIN - Sa - L - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-L1-Sa0']), ('L1', ['N-C0-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-L1-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('L0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sa - C - GND', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sa - C - GND', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa3-Sa4']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sa3']), ('Sa3', ['N-Sa0-Sa3-Sa4', 'N-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa3-Sa4']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sa3']), ('Sa3', ['N-Sa0-Sa3-Sa4', 'N-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa3-Sa4'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - C - C - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - L - Sb - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - C - C - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - L - Sb - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - L - Sb - Sb - Sb - GND', 'VOUT - Sa - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb0', ['N-Sb0-Sb1', 'N-Sb0-Sb2']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sb - Sb - Sb - GND', 'VOUT - Sa - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb0', ['N-Sb0-Sb1', 'N-Sb0-Sb2']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-Sb0-Sb2'])])
['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - C - GND', 'VOUT - L - Sb - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - C - GND', 'VOUT - L - Sb - C - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'N-L1-Sb0'])])
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa1-Sb0', 'N-L0-Sa0']), ('L1', ['0', 'N-L0-L1-Sa1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-L0-L1-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sa - L - GND', 'VIN - Sa - Sb - Sa - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sa2']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-L0-Sa1-Sa2', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - C - L - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1']), ('L0', ['0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-C0-L1', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.0011200225061336869
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 23 cumulate planning time: 23
sim.current.step 1
root offset is:  1
has to be unconnected
['VIN - Sa - C - Sb - L - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sb - L - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa2-Sb0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-C0-Sa2-Sb0']), ('Sb0', ['N-C0-Sa2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa2-Sb0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-C0-Sa2-Sb0']), ('Sb0', ['N-C0-Sa2-Sb0', 'OUT'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - L - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - L - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - L - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - L - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
PCC-17859 violations

['VIN - Sa - C - VOUT', 'VIN - Sa - L - Sb - Sb - GND', 'VOUT - C - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - C - Sa - GND', 'VOUT - L - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sa1']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L0-Sa0']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sa2-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1-Sa2-Sb0', 'OUT']), ('Sa2', ['N-L0-Sa1-Sa2-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa1-Sa2-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - C - Sb - VOUT', 'VIN - L - Sb - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0-Sb1']), ('L0', ['IN', 'N-C0-L0-Sb0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-L0-Sb0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sb - L - GND', 'VIN - L - C - GND', 'VOUT - Sa - L - Sb - L - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sb - L - GND', 'VIN - L - C - GND', 'VOUT - Sa - L - Sb - L - GND', 'VOUT - Sa - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'N-L1-Sb0'])])
has to be unconnected
has to be unconnected
['VIN - Sa - C - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - Sa - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sa0-Sa1']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - C - Sa - Sa - GND', 'VOUT - Sb - Sb - Sa - Sa - GND', 'VOUT - Sb - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - Sa - Sb - GND', 'VIN - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - Sa - Sb - GND', 'VIN - C - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sb - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb1']), ('Sa1', ['N-Sa1-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - C - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - L - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - L - C - GND', 'VOUT - L - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 1
action child  0  avg_return: 9.228835394802183e-05
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.007782398844031186
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 11 cumulate planning time: 34
sim.current.step 1
root offset is:  1
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - C - C - GND', 'VIN - L - Sa - GND', 'VOUT - C - GND', 'VOUT - C - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['IN', 'N-C0-L1']), ('Sa0', ['0', 'N-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - C - C - GND', 'VIN - L - Sa - GND', 'VOUT - C - GND', 'VOUT - C - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L1', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['IN', 'N-C0-L1']), ('Sa0', ['0', 'N-L0-Sa0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - L - C - Sa - VOUT', 'VIN - L - C - L - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-L1-L2']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('L1', ['IN', 'N-C0-L1-L2']), ('L2', ['0', 'N-C0-L1-L2']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - C - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - C - C - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['N-C1-C2-L0-Sa0', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2-L0-Sa0']), ('L0', ['0', 'N-C1-C2-L0-Sa0']), ('Sa0', ['IN', 'N-C1-C2-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - L - GND', 'VOUT - C - C - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['N-C1-C2-L0-Sa0', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2-L0-Sa0']), ('L0', ['0', 'N-C1-C2-L0-Sa0']), ('Sa0', ['IN', 'N-C1-C2-L0-Sa0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sa - C - L - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sa - C - L - C - GND', 'VIN - Sa - L - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0-L1', 'N-C1-L0-Sa0']), ('L0', ['N-C1-L0-L1', 'N-C1-L0-Sa0']), ('L1', ['N-C1-L0-L1', 'OUT']), ('Sa0', ['IN', 'N-C1-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - L - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sa - C - L - C - GND', 'VIN - Sa - L - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0-L1', 'N-C1-L0-Sa0']), ('L0', ['N-C1-L0-L1', 'N-C1-L0-Sa0']), ('L1', ['N-C1-L0-L1', 'OUT']), ('Sa0', ['IN', 'N-C1-L0-Sa0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - C - L - VOUT', 'VIN - Sa - Sa - L - VOUT', 'VIN - C - GND', 'VOUT - L - C - C - GND', 'VOUT - L - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-L0-Sa1']), ('L0', ['N-C1-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-C1-L0-Sa1', 'N-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - VOUT', 'VIN - L - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-L1-Sa0', 'OUT']), ('C1', ['N-C0-C1-L0-L1-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-C1-L0-L1-Sa0']), ('L1', ['0', 'N-C0-C1-L0-L1-Sa0']), ('Sa0', ['N-C0-C1-L0-L1-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - VOUT', 'VIN - L - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-L1-Sa0', 'OUT']), ('C1', ['N-C0-C1-L0-L1-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-C1-L0-L1-Sa0']), ('L1', ['0', 'N-C0-C1-L0-L1-Sa0']), ('Sa0', ['N-C0-C1-L0-L1-Sa0', 'OUT'])])
PCC-17859 violations

find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - L - L - Sa - GND', 'VIN - Sa - Sa - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('L1', ['N-L1-Sa0-Sa2', 'OUT']), ('Sa0', ['IN', 'N-L1-Sa0-Sa2']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sa2', ['N-L1-Sa0-Sa2', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sa - L - GND', 'VOUT - L - Sa - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L2-Sa0-Sa1']), ('L1', ['0', 'N-L1-Sa1']), ('L2', ['N-L0-L2-Sa0-Sa1', 'OUT']), ('Sa0', ['N-L0-L2-Sa0-Sa1', 'OUT']), ('Sa1', ['N-L0-L2-Sa0-Sa1', 'N-L1-Sa1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - L - L - GND', 'VIN - L - L - L - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-L2-L3']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['IN', 'N-L0-L2-L3']), ('L3', ['0', 'N-L0-L2-L3']), ('Sa0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - L - GND', 'VIN - L - L - L - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-L2-L3']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['IN', 'N-L0-L2-L3']), ('L3', ['0', 'N-L0-L2-L3']), ('Sa0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - L - L - GND', 'VIN - Sa - L - Sa - C - GND', 'VOUT - L - L - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('L0', ['N-L0-L1-Sa1', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'N-L0-L1-Sa1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - C - L - VOUT', 'VIN - L - C - L - VOUT', 'VIN - Sa - L - GND', 'VIN - L - L - GND', 'VOUT - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L2-Sa0', 'N-C0-L1']), ('L0', ['IN', 'N-C0-L0-L2-Sa0']), ('L1', ['N-C0-L1', 'OUT']), ('L2', ['0', 'N-C0-L0-L2-Sa0']), ('Sa0', ['IN', 'N-C0-L0-L2-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - L - VOUT', 'VIN - L - C - L - VOUT', 'VIN - Sa - L - GND', 'VIN - L - L - GND', 'VOUT - L - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-L2-Sa0', 'N-C0-L1']), ('L0', ['IN', 'N-C0-L0-L2-Sa0']), ('L1', ['N-C0-L1', 'OUT']), ('L2', ['0', 'N-C0-L0-L2-Sa0']), ('Sa0', ['IN', 'N-C0-L0-L2-Sa0'])])
has to be unconnected
action  0  : node on 2
action child  0  avg_return: 3.890910132313172e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.03500005466390619
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 13 cumulate planning time: 47
sim.current.step 1
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sa - C - C - VOUT', 'VIN - C - C - C - VOUT', 'VIN - C - C - GND', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C2-Sa0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'N-C0-C2-Sa0']), ('C3', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-C2-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - C - C - VOUT', 'VIN - C - C - C - VOUT', 'VIN - C - C - GND', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C2-Sa0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'N-C0-C2-Sa0']), ('C3', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-C2-Sa0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'N-C1-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'N-C1-Sa1']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'N-C1-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'N-C1-Sa1']), ('Sa2', ['IN', 'OUT'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - C - Sa - Sa - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - C - C - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('C1', ['N-C1-C2-Sa0', 'OUT']), ('C2', ['IN', 'N-C1-C2-Sa0']), ('Sa0', ['0', 'N-C1-C2-Sa0']), ('Sa1', ['0', 'N-C0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sa - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - C - C - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('C1', ['N-C1-C2-Sa0', 'OUT']), ('C2', ['IN', 'N-C1-C2-Sa0']), ('Sa0', ['0', 'N-C1-C2-Sa0']), ('Sa1', ['0', 'N-C0-Sa1'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1']), ('Sa2', ['0', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - C - C - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0-Sa1', 'OUT']), ('Sa0', ['N-C1-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-C1-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa0-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - C - C - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0-Sa1', 'OUT']), ('Sa0', ['N-C1-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-C1-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa0-Sa2'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - C - Sa - C - C - VOUT', 'VIN - C - C - C - GND', 'VIN - C - Sa - GND', 'VOUT - C - C - GND', 'VOUT - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['N-C0-C1', 'OUT']), ('C2', ['IN', 'N-C2-Sa0']), ('C3', ['IN', 'OUT']), ('Sa0', ['0', 'N-C2-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sa - C - C - VOUT', 'VIN - C - C - C - GND', 'VIN - C - Sa - GND', 'VOUT - C - C - GND', 'VOUT - C - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['N-C0-C1', 'OUT']), ('C2', ['IN', 'N-C2-Sa0']), ('C3', ['IN', 'OUT']), ('Sa0', ['0', 'N-C2-Sa0'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - C - GND', 'VIN - Sa - C - GND', 'VIN - C - Sa - GND', 'VOUT - C - GND', 'VOUT - C - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa1']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C1-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - C - GND', 'VIN - Sa - C - GND', 'VIN - C - Sa - GND', 'VOUT - C - GND', 'VOUT - C - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa1']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C1-Sa1'])])
PCC-17859 violations

has to be unconnected
['VIN - C - Sa - C - VOUT', 'VIN - C - C - GND', 'VIN - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C2-C3-Sa0']), ('C1', ['N-C1-Sa0', 'OUT']), ('C2', ['0', 'N-C0-C2-C3-Sa0']), ('C3', ['0', 'N-C0-C2-C3-Sa0']), ('Sa0', ['N-C0-C2-C3-Sa0', 'N-C1-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - C - VOUT', 'VIN - C - C - GND', 'VIN - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C2-C3-Sa0']), ('C1', ['N-C1-Sa0', 'OUT']), ('C2', ['0', 'N-C0-C2-C3-Sa0']), ('C3', ['0', 'N-C0-C2-C3-Sa0']), ('Sa0', ['N-C0-C2-C3-Sa0', 'N-C1-Sa0'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - C - GND', 'VIN - Sa - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - C - GND', 'VIN - Sa - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - C - C - Sa - Sa - GND', 'VOUT - C - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['N-C0-C1', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - C - Sa - Sa - GND', 'VOUT - C - C - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['N-C0-C1', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
has to be unconnected
['VIN - Sa - Sa - C - Sa - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sa - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sa2']), ('C1', ['N-C1-Sa0', 'N-C1-Sa1']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sa1', ['N-C0-Sa1-Sa2', 'N-C1-Sa1']), ('Sa2', ['IN', 'N-C0-Sa1-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - C - Sa - VOUT', 'VIN - Sa - C - GND', 'VOUT - Sa - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sa2']), ('C1', ['N-C1-Sa0', 'N-C1-Sa1']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sa1', ['N-C0-Sa1-Sa2', 'N-C1-Sa1']), ('Sa2', ['IN', 'N-C0-Sa1-Sa2'])])
['VIN - C - VOUT', 'VIN - C - Sa - Sa - Sa - GND', 'VIN - C - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sa1-Sa2', 'N-Sa0-Sa3']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.035
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 3
action child  1  avg_return: 7.729528919620365e-08
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'C0-left', 'C0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 22 cumulate planning time: 69
sim.current.step 1
root offset is:  1
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa4', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sa4', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['0', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa0-Sa1-Sa4', 'N-Sa3-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa1-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['0', 'N-Sa2-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa4']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'N-Sa1-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa4']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'N-Sa1-Sa4'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa3', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa1-Sa2', 'OUT']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['0', 'N-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa3', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa1-Sa2', 'OUT']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['0', 'N-Sa3-Sa4'])])
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'N-Sa1-Sa3-Sa4']), ('Sa2', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa3', ['0', 'N-Sa1-Sa3-Sa4']), ('Sa4', ['0', 'N-Sa1-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa1-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa1-Sa2-Sa4'])])
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['N-Sa1-Sa2', 'OUT']), ('Sa2', ['IN', 'N-Sa1-Sa2']), ('Sa3', ['N-Sa0-Sa3', 'OUT']), ('Sa4', ['0', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['0', 'N-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['0', 'N-Sa3-Sa4'])])
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa3', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sa3', 'N-Sa1-Sa4']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['IN', 'N-Sa0-Sa1-Sa3']), ('Sa4', ['0', 'N-Sa1-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2-Sa4', 'N-Sa0-Sa3']), ('Sa1', ['N-Sa0-Sa1-Sa2-Sa4', 'OUT']), ('Sa2', ['N-Sa0-Sa1-Sa2-Sa4', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa1-Sa2-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa3-Sa4', 'OUT'])])
['VIN - Sa - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2-Sa4']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['N-Sa0-Sa2-Sa4', 'N-Sa2-Sa3']), ('Sa3', ['N-Sa2-Sa3', 'OUT']), ('Sa4', ['0', 'N-Sa0-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2-Sa4']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['N-Sa0-Sa2-Sa4', 'N-Sa2-Sa3']), ('Sa3', ['N-Sa2-Sa3', 'OUT']), ('Sa4', ['0', 'N-Sa0-Sa2-Sa4'])])
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa3-Sa4', 'OUT'])])
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2']), ('Sa3', ['IN', 'N-Sa0-Sa3']), ('Sa4', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2']), ('Sa3', ['IN', 'N-Sa0-Sa3']), ('Sa4', ['IN', 'OUT'])])
action  0  : node on 0
action child  0  avg_return: 0.008036688439557751
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 18 cumulate planning time: 87
sim.current.step 5
root offset is:  1
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa4']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['0', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : edge on [1, 7]
action child  0  avg_return: 0.014163557889501091
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  1  : edge on [1, 11]
action child  1  avg_return: 7.673043144336549e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  2  : edge on [1, 9]
action child  2  avg_return: 0.011610981123786947
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  3  : edge on [1, 5]
action child  3  avg_return: 0.005876701754310283
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  4  : edge on [1, 3]
action child  4  avg_return: 0.00591154184220686
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 87
sim.current.step 6
root offset is:  1
has to be unconnected
action  0  : edge on [2, 8]
action child  0  avg_return: 0.0015738006466552105
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {8}, 8: {2}})
action  1  : edge on [2, 3]
action child  1  avg_return: 3.328539886704497e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {3}, 3: {2}})
action  2  : edge on [2, 9]
action child  2  avg_return: 6.62567561919832e-05
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {9}, 9: {2}})
action  3  : edge on [2, 5]
action child  3  avg_return: 0.03865081221319819
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {5}, 5: {2}})
action  4  : edge on [2, 11]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {11}, 11: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 87
sim.current.step 7
root offset is:  1
has to be unconnected
action  0  : edge on [0, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {5}, 5: {2}, 0: {9}, 9: {0}})
action  1  : edge on [0, 11]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {5}, 5: {2}, 0: {11}, 11: {0}})
action  2  : edge on [0, 3]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {5}, 5: {2}, 0: {3}, 3: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 87
sim.current.step 8
root offset is:  1
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'OUT'])])
action  0  : edge on [3, 7]
action child  0  avg_return: 1.0932781237992812e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {5}, 5: {2}, 0: {9}, 9: {0}, 3: {7}})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 88
sim.current.step 9
root offset is:  1
has to be unconnected
action  0  : edge on [4, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {5}, 5: {2}, 0: {9}, 9: {0}, 3: {7}, 4: {11}, 11: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [5, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {5}, 5: {8, 2}, 0: {9}, 9: {0}, 3: {7}, 4: {11}, 11: {4}, 8: {5}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 11
root offset is:  1
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa4']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
action  0  : edge on [6, 7]
action child  0  avg_return: 1.0932781237992812e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3, 6}, 2: {5}, 5: {8, 2}, 0: {9}, 9: {0}, 3: {7}, 4: {11}, 11: {4}, 8: {5}, 6: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 12
root offset is:  1
has to be unconnected
action  0  : edge on [7, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3, 12, 6}, 2: {5}, 5: {8, 2}, 0: {9}, 9: {0}, 3: {7}, 4: {11}, 11: {4}, 8: {5}, 6: {7}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 13
root offset is:  1
has to be unconnected
action  0  : edge on [8, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3, 12, 6}, 2: {5}, 5: {8, 2}, 0: {9}, 9: {0}, 3: {7}, 4: {11}, 11: {8, 4}, 8: {11, 5}, 6: {7}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 14
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3, 12, 6}, 2: {5}, 5: {8, 2}, 0: {9}, 9: {0}, 3: {7}, 4: {11}, 11: {8, 4}, 8: {11, 5}, 6: {7}, 12: {7}})
has to be unconnected
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
sim.current.step 15
has to be unconnected
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3, 12, 6}, 2: {5}, 5: {8, 2}, 0: {9}, 9: {0}, 3: {7}, 4: {11}, 11: {8, 4}, 8: {11, 5}, 6: {7}, 12: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 88
effis of topo: [{'parameter': '0.9', 'efficiency': {'efficiency': 0.12, 'output_voltage': 52.0}, 'output_voltage': 52.0}]
#####################Game:   steps:  16   average cumulate reward:  0
title result with parameter:0.9 
-1 , 10 : 16.0
[{'parameter': '0.9', 'efficiency': {'efficiency': 0.12, 'output_voltage': 52.0}, 'output_voltage': 52.0}]
hash counter 0
hash length 91

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sb0', ['N-Sb0-Sb4', 'OUT']), ('Sb1', ['N-Sb1-Sb2', 'N-Sb1-Sb3']), ('Sb2', ['0', 'N-Sb1-Sb2']), ('Sb3', ['IN', 'N-Sb1-Sb3']), ('Sb4', ['IN', 'N-Sb0-Sb4'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('Sb0', ['N-Sb0-Sb4', 'OUT']), ('Sb1', ['N-Sb1-Sb2', 'N-Sb1-Sb3']), ('Sb2', ['0', 'N-Sb1-Sb2']), ('Sb3', ['IN', 'N-Sb1-Sb3']), ('Sb4', ['IN', 'N-Sb0-Sb4'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VIN - Sa - Sb - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa1', 'OUT']), ('L1', ['N-L0-L1-Sa1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-L1-Sa1']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa1-Sb0-Sb2']), ('Sb0', ['IN', 'N-Sa1-Sb0-Sb2']), ('Sb1', ['N-Sa0-Sb1', 'OUT']), ('Sb2', ['N-Sa1-Sb0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sa - L - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sa1', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sa1']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['N-C0-L0-Sa0-Sa1', 'N-L1-Sa0']), ('Sa1', ['0', 'N-C0-L0-Sa0-Sa1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - Sb - C - Sa - GND', 'VOUT - L - L - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - Sb - C - Sa - GND', 'VOUT - L - L - Sb - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'N-C0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - L - Sa - VOUT', 'VIN - L - L - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-L2']), ('L1', ['N-L0-L1-Sa0', 'N-L1-Sb0']), ('L2', ['IN', 'N-L0-L2']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - Sa - VOUT', 'VIN - L - L - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-L2']), ('L1', ['N-L0-L1-Sa0', 'N-L1-Sb0']), ('L2', ['IN', 'N-L0-L2']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - Sa - L - GND', 'VIN - L - L - GND', 'VOUT - L - L - Sa - L - GND', 'VOUT - L - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L2', 'OUT']), ('L1', ['IN', 'N-L1-L3-Sa0']), ('L2', ['IN', 'N-L0-L2']), ('L3', ['0', 'N-L1-L3-Sa0']), ('Sa0', ['IN', 'N-L1-L3-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - Sa - L - GND', 'VIN - L - L - GND', 'VOUT - L - L - Sa - L - GND', 'VOUT - L - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L2', 'OUT']), ('L1', ['IN', 'N-L1-L3-Sa0']), ('L2', ['IN', 'N-L0-L2']), ('L3', ['0', 'N-L1-L3-Sa0']), ('Sa0', ['IN', 'N-L1-L3-Sa0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - L - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - C - L - C - Sb - GND', 'VOUT - C - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2-L0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('C2', ['IN', 'N-C0-C2-L0']), ('L0', ['IN', 'N-C0-C2-L0']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - Sb - Sa - VOUT', 'VIN - C - C - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VIN - C - Sa - Sb - GND', 'VIN - C - C - GND', 'VOUT - C - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - VOUT', 'VIN - C - C - VOUT', 'VIN - C - VOUT', 'VIN - C - GND', 'VIN - C - Sa - Sb - GND', 'VIN - C - C - GND', 'VOUT - C - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - Sa - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sa - Sa - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sa2']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-L0-Sa2'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sa - Sa - C - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sa2']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-L0-Sa2'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-Sa0-Sb0']), ('L1', ['N-L0-L1-L2-Sa0-Sb0', 'OUT']), ('L2', ['N-L0-L1-L2-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-L2-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-L1-L2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - C - Sa - C - L - GND', 'VOUT - Sa - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - C - Sb - Sa - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-L0-Sa0-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sb0-Sb3', 'OUT']), ('Sb0', ['N-Sa0-Sb0-Sb3', 'N-Sb0-Sb2']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['IN', 'N-Sb0-Sb2']), ('Sb3', ['0', 'N-Sa0-Sb0-Sb3'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sb0-Sb3', 'OUT']), ('Sb0', ['N-Sa0-Sb0-Sb3', 'N-Sb0-Sb2']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['IN', 'N-Sb0-Sb2']), ('Sb3', ['0', 'N-Sa0-Sb0-Sb3'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sa - Sb - Sa - L - GND', 'VOUT - Sa - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - Sb - GND', 'VOUT - Sa - L - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - Sa - Sb - Sa - C - GND', 'VIN - Sa - L - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - L - C - VOUT', 'VIN - Sa - Sb - Sa - C - GND', 'VIN - Sa - L - GND', 'VOUT - C - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-Sa1-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VOUT - Sa - Sb - Sb - L - GND', 'VOUT - Sa - Sb - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb1']), ('L1', ['0', 'N-L0-L1-Sb1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-L1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND', 'VOUT - C - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1-Sb0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['IN', 'N-C0-L1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-C0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - L - Sa - Sb - GND', 'VIN - Sb - L - Sa - L - GND', 'VOUT - L - Sa - Sb - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['0', 'N-L1-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0', 'N-L1-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L1-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - C - VOUT', 'VIN - L - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VIN - C - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - Sa - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'N-Sa1-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - C - Sa - Sb - VOUT', 'VIN - L - Sb - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['VIN - Sa - L - Sb - Sa - VOUT', 'VIN - Sa - L - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa2-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sa2', ['0', 'N-L0-Sa2-Sb0']), ('Sb0', ['N-L0-Sa2-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - C - C - Sb - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('C1', ['0', 'N-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C1-Sa0-Sb0']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-C1-Sa0-Sb0']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sa - C - C - Sb - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('C1', ['0', 'N-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C1-Sa0-Sb0']), ('Sb0', ['N-C0-Sb0-Sb1', 'N-C1-Sa0-Sb0']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - C - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-L0']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-L0']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - C - Sb - L - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - C - Sb - L - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
PCC-17859 violations

action  0  : node on 0
action child  0  avg_return: 3.6515767100981587e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 8.321349716761242e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 24 cumulate planning time: 24
sim.current.step 0
root offset is:  1
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L2-Sb0', 'OUT']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('L2', ['IN', 'N-C0-L2-Sb0']), ('Sb0', ['0', 'N-C0-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L2-Sb0', 'OUT']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('L2', ['IN', 'N-C0-L2-Sb0']), ('Sb0', ['0', 'N-C0-L2-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - L - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sb0']), ('L1', ['N-L1-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - L - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sb0']), ('L1', ['N-L1-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-L1-Sb1'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - L - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - C - Sb - GND', 'VIN - Sb - Sb - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'N-L0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-L0-Sb1']), ('Sb2', ['N-L0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['0', 'N-L0-L1-L2']), ('L3', ['IN', 'N-L3-Sb0']), ('Sb0', ['N-L3-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['0', 'N-L0-L1-L2']), ('L3', ['IN', 'N-L3-Sb0']), ('Sb0', ['N-L3-Sb0', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - Sb - L - VOUT', 'VIN - Sb - Sb - C - VOUT', 'VIN - Sb - Sb - L - GND', 'VOUT - L - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-L1-Sb0']), ('L1', ['N-C0-L0-L1-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-L1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - C - GND', 'VIN - L - L - C - GND', 'VIN - C - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['IN', 'N-C0-L0-L1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - C - GND', 'VIN - L - L - C - GND', 'VIN - C - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0-L1', 'OUT']), ('L1', ['IN', 'N-C0-L0-L1']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sb - L - Sb - GND', 'VIN - C - L - Sb - GND', 'VIN - C - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sb0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-L0-Sb1']), ('L0', ['0', 'N-C1-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C1-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - C - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-L0-Sb0']), ('L0', ['0', 'N-C1-L0-Sb0']), ('Sb0', ['IN', 'N-C1-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - C - L - VOUT', 'VIN - L - C - L - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - L - C - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'N-C0-L1-Sb0']), ('L0', ['N-C0-L0-Sb1', 'OUT']), ('L1', ['IN', 'N-C0-L1-Sb0']), ('Sb0', ['IN', 'N-C0-L1-Sb0']), ('Sb1', ['0', 'N-C0-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - L - VOUT', 'VIN - L - C - L - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - L - C - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'N-C0-L1-Sb0']), ('L0', ['N-C0-L0-Sb1', 'OUT']), ('L1', ['IN', 'N-C0-L1-Sb0']), ('Sb0', ['IN', 'N-C0-L1-Sb0']), ('Sb1', ['0', 'N-C0-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - L - L - VOUT', 'VIN - L - Sb - GND', 'VOUT - L - L - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L2', 'N-L0-Sb0']), ('L1', ['IN', 'N-L1-Sb1']), ('L2', ['N-L0-L2', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['0', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - L - Sb - GND', 'VOUT - L - L - Sb - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L2', 'N-L0-Sb0']), ('L1', ['IN', 'N-L1-Sb1']), ('L2', ['N-L0-L2', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['0', 'N-L1-Sb1'])])
PCC-17859 violations

['VIN - Sb - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - C - C - GND', 'VIN - L - C - C - GND', 'VOUT - L - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['N-C0-C1', 'N-C1-L0-L1-Sb0']), ('L0', ['N-C1-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-C1-L0-L1-Sb0']), ('Sb0', ['IN', 'N-C1-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - Sb - C - L - GND', 'VOUT - Sb - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['0', 'N-C0-L0']), ('L1', ['IN', 'N-L1-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - Sb - C - L - GND', 'VOUT - Sb - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['0', 'N-C0-L0']), ('L1', ['IN', 'N-L1-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['N-L1-Sb1', 'OUT'])])
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sb - C - Sb - VOUT', 'VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb2']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb2', 'N-L0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sb0-Sb1']), ('Sb2', ['N-C0-Sb0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - L - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L2-Sb0-Sb1']), ('L1', ['0', 'N-L1-Sb0']), ('L2', ['N-L0-L2-Sb0-Sb1', 'OUT']), ('Sb0', ['N-L0-L2-Sb0-Sb1', 'N-L1-Sb0']), ('Sb1', ['IN', 'N-L0-L2-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - C - L - C - GND', 'VIN - Sb - C - L - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('C1', ['N-C1-C2-Sb0', 'OUT']), ('C2', ['N-C1-C2-Sb0', 'OUT']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'N-C1-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - C - L - C - GND', 'VIN - Sb - C - L - C - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('C1', ['N-C1-C2-Sb0', 'OUT']), ('C2', ['N-C1-C2-Sb0', 'OUT']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'N-C1-C2-Sb0'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - L - C - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1']), ('L0', ['0', 'N-L0-Sb0']), ('L1', ['IN', 'N-C0-L1']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - C - C - Sb - GND', 'VOUT - L - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sb0']), ('C1', ['N-C0-C1', 'N-C1-L0-L1']), ('L0', ['IN', 'N-C1-L0-L1']), ('L1', ['N-C1-L0-L1', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - L - C - VOUT', 'VIN - C - C - L - Sb - GND', 'VIN - L - C - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['IN', 'N-C0-C1-L0']), ('L0', ['IN', 'N-C0-C1-L0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - L - C - VOUT', 'VIN - C - C - L - Sb - GND', 'VIN - L - C - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0', 'OUT']), ('C1', ['IN', 'N-C0-C1-L0']), ('L0', ['IN', 'N-C0-C1-L0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
has to be unconnected
has to be unconnected
['VIN - Sb - L - Sb - C - VOUT', 'VIN - Sb - L - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('L0', ['N-L0-Sb0-Sb2', 'N-L0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sb0-Sb2']), ('Sb1', ['IN', 'N-L0-Sb1']), ('Sb2', ['0', 'N-L0-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sb - C - VOUT', 'VIN - Sb - L - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('L0', ['N-L0-Sb0-Sb2', 'N-L0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sb0-Sb2']), ('Sb1', ['IN', 'N-L0-Sb1']), ('Sb2', ['0', 'N-L0-Sb0-Sb2'])])
has to be unconnected
['VIN - C - Sb - L - L - VOUT', 'VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - L - L - GND', 'VOUT - L - L - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - L - L - VOUT', 'VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - L - L - GND', 'VOUT - L - L - GND', 'VOUT - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - L - C - GND', 'VIN - L - C - GND', 'VOUT - Sb - C - L - C - GND', 'VOUT - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['IN', 'N-C0-L0-L1']), ('L1', ['N-C0-L0-L1', 'N-C1-L1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - L - C - GND', 'VIN - L - C - GND', 'VOUT - Sb - C - L - C - GND', 'VOUT - Sb - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['IN', 'N-C0-L0-L1']), ('L1', ['N-C0-L0-L1', 'N-C1-L1']), ('Sb0', ['IN', 'OUT'])])
has to be unconnected
['VIN - L - L - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - L - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0-Sb1']), ('L0', ['N-C0-L0-Sb0-Sb1', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sb0', ['N-C0-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-L0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - L - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0-Sb1']), ('L0', ['N-C0-L0-Sb0-Sb1', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sb0', ['N-C0-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-L0-Sb0-Sb1', 'OUT'])])
PCC-17859 violations

['VIN - Sb - L - Sb - VOUT', 'VIN - Sb - L - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0-Sb3', 'N-L0-Sb2']), ('Sb0', ['N-L0-Sb0-Sb3', 'OUT']), ('Sb1', ['0', 'N-Sb1-Sb3']), ('Sb2', ['IN', 'N-L0-Sb2']), ('Sb3', ['N-L0-Sb0-Sb3', 'N-Sb1-Sb3'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sb - VOUT', 'VIN - Sb - L - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sb0-Sb3', 'N-L0-Sb2']), ('Sb0', ['N-L0-Sb0-Sb3', 'OUT']), ('Sb1', ['0', 'N-Sb1-Sb3']), ('Sb2', ['IN', 'N-L0-Sb2']), ('Sb3', ['N-L0-Sb0-Sb3', 'N-Sb1-Sb3'])])
['VIN - C - L - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - Sb - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L2-Sb0']), ('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('L2', ['N-C0-L2-Sb0', 'OUT']), ('Sb0', ['N-C0-L2-Sb0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - Sb - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L2-Sb0']), ('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('L2', ['N-C0-L2-Sb0', 'OUT']), ('Sb0', ['N-C0-L2-Sb0', 'N-L0-L1-Sb0'])])
['VIN - Sb - C - Sb - VOUT', 'VIN - C - L - C - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - C - GND', 'VOUT - Sb - C - Sb - C - GND', 'VOUT - Sb - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'IN']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - VOUT', 'VIN - C - L - C - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - C - GND', 'VOUT - Sb - C - Sb - C - GND', 'VOUT - Sb - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'IN']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
['VIN - C - VOUT', 'VIN - L - C - Sb - GND', 'VIN - L - C - Sb - GND', 'VOUT - C - L - C - Sb - GND', 'VOUT - C - L - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-C2-L0', 'N-C1-C2-Sb0']), ('C2', ['N-C1-C2-L0', 'N-C1-C2-Sb0']), ('L0', ['IN', 'N-C1-C2-L0']), ('Sb0', ['0', 'N-C1-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - L - C - Sb - GND', 'VIN - L - C - Sb - GND', 'VOUT - C - L - C - Sb - GND', 'VOUT - C - L - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-C2-L0', 'N-C1-C2-Sb0']), ('C2', ['N-C1-C2-L0', 'N-C1-C2-Sb0']), ('L0', ['IN', 'N-C1-C2-L0']), ('Sb0', ['0', 'N-C1-C2-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - C - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - C - C - GND', 'VIN - L - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-L1', 'N-C0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-L1']), ('L0', ['N-C0-C1-L0-L1', 'OUT']), ('L1', ['IN', 'N-C0-C1-L0-L1']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['IN', 'N-L2-Sb0-Sb1']), ('Sb0', ['0', 'N-L2-Sb0-Sb1']), ('Sb1', ['0', 'N-L2-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['IN', 'N-L2-Sb0-Sb1']), ('Sb0', ['0', 'N-L2-Sb0-Sb1']), ('Sb1', ['0', 'N-L2-Sb0-Sb1'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - C - C - C - GND', 'VOUT - Sb - L - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2', 'N-C0-L0']), ('C1', ['0', 'N-C1-C2']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - C - C - GND', 'VOUT - Sb - L - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2', 'N-C0-L0']), ('C1', ['0', 'N-C1-C2']), ('C2', ['N-C0-C2', 'N-C1-C2']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])
action  0  : node on 1
action child  0  avg_return: 8.529703655119039e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 44 cumulate planning time: 68
sim.current.step 1
root offset is:  1
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - C - GND', 'VIN - L - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sb1']), ('L1', ['IN', 'N-L0-L1-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-L1-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - C - GND', 'VIN - L - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sb1']), ('L1', ['IN', 'N-L0-L1-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-L1-Sb1', 'N-Sb0-Sb1'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - L - Sb - GND', 'VIN - C - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sb1', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - L - L - VOUT', 'VIN - L - C - L - Sb - VOUT', 'VIN - L - L - Sb - L - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1-L2']), ('L0', ['0', 'N-L0-Sb0']), ('L1', ['IN', 'N-C0-L1-L2']), ('L2', ['N-C0-L1-L2', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - C - L - Sb - VOUT', 'VIN - L - L - Sb - L - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L1-L2']), ('L0', ['0', 'N-L0-Sb0']), ('L1', ['IN', 'N-C0-L1-L2']), ('L2', ['N-C0-L1-L2', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
has to be unconnected
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-Sb1', 'N-C1-Sb2']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C1-Sb1']), ('Sb2', ['IN', 'N-C1-Sb2'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-Sb1', 'N-C1-Sb2']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C1-Sb1']), ('Sb2', ['IN', 'N-C1-Sb2'])])
['VIN - L - Sb - VOUT', 'VIN - L - Sb - C - L - GND', 'VOUT - Sb - Sb - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['0', 'N-C0-L0']), ('L1', ['IN', 'N-L1-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-L1-Sb0-Sb1']), ('Sb1', ['N-L1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - C - L - GND', 'VOUT - Sb - Sb - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['0', 'N-C0-L0']), ('L1', ['IN', 'N-L1-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-L1-Sb0-Sb1']), ('Sb1', ['N-L1-Sb0-Sb1', 'OUT'])])
has to be unconnected
['VIN - C - L - VOUT', 'VIN - C - L - VOUT', 'VIN - C - L - L - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - L - C - C - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('L1', ['N-C1-L1', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - L - VOUT', 'VIN - C - L - L - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - L - C - C - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('L1', ['N-C1-L1', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - L - C - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - L - C - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-L1-Sb0-Sb1']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['0', 'N-C0-L1-Sb0-Sb1']), ('Sb0', ['N-C0-L1-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-L1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb1', 'OUT']), ('C1', ['N-C0-C1-L0-Sb1', 'N-C1-L0-Sb0']), ('L0', ['N-C0-C1-L0-Sb1', 'N-C1-L0-Sb0']), ('Sb0', ['0', 'N-C1-L0-Sb0']), ('Sb1', ['IN', 'N-C0-C1-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb1', 'OUT']), ('C1', ['N-C0-C1-L0-Sb1', 'N-C1-L0-Sb0']), ('L0', ['N-C0-C1-L0-Sb1', 'N-C1-L0-Sb0']), ('Sb0', ['0', 'N-C1-L0-Sb0']), ('Sb1', ['IN', 'N-C0-C1-L0-Sb1'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - C - L - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - C - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - L - L - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb1-Sb2']), ('L1', ['0', 'N-L1-Sb0-Sb2']), ('Sb0', ['N-L1-Sb0-Sb2', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb1-Sb2', 'N-L1-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - L - L - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sb1-Sb2']), ('L1', ['0', 'N-L1-Sb0-Sb2']), ('Sb0', ['N-L1-Sb0-Sb2', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb1-Sb2', 'N-L1-Sb0-Sb2'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - C - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb2']), ('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1']), ('Sb2', ['IN', 'N-C0-Sb2'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - Sb - C - Sb - GND', 'VIN - C - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-C1-Sb1']), ('C1', ['N-C0-C1-Sb0', 'N-C0-C1-Sb1']), ('C2', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-C1-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - C - Sb - GND', 'VIN - C - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-C1-Sb1']), ('C1', ['N-C0-C1-Sb0', 'N-C0-C1-Sb1']), ('C2', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-C1-Sb1'])])
PCC-17859 violations

has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 2.0810469600026466e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 23 cumulate planning time: 91
sim.current.step 2
root offset is:  1
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - C - L - GND', 'VIN - L - C - C - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('C1', ['N-C1-L1-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('L1', ['IN', 'N-C1-L1-Sb0']), ('Sb0', ['N-C1-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - L - Sb - VOUT', 'VIN - C - C - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - Sb - C - GND', 'VIN - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-L0-Sb0']), ('L0', ['0', 'N-C1-L0-Sb0']), ('Sb0', ['N-C1-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - C - L - GND', 'VIN - Sb - C - L - L - GND', 'VOUT - C - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['N-C1-L0-L1', 'OUT']), ('L0', ['N-C1-L0-L1', 'OUT']), ('L1', ['0', 'N-C1-L0-L1']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - C - L - GND', 'VIN - Sb - C - L - L - GND', 'VOUT - C - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['N-C1-L0-L1', 'OUT']), ('L0', ['N-C1-L0-L1', 'OUT']), ('L1', ['0', 'N-C1-L0-L1']), ('Sb0', ['IN', 'N-C0-Sb0'])])
has to be unconnected
['VIN - C - Sb - C - VOUT', 'VIN - C - Sb - Sb - GND', 'VIN - C - Sb - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-L0-Sb0-Sb1', 'OUT']), ('L0', ['0', 'N-C1-L0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-C1-L0-Sb0-Sb1']), ('Sb1', ['0', 'N-C1-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sb - C - VOUT', 'VIN - C - Sb - Sb - GND', 'VIN - C - Sb - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-L0-Sb0-Sb1', 'OUT']), ('L0', ['0', 'N-C1-L0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-C1-L0-Sb0-Sb1']), ('Sb1', ['0', 'N-C1-L0-Sb0-Sb1'])])
has to be unconnected
['VIN - C - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - C - L - Sb - GND', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-L1-L2-Sb0']), ('L1', ['IN', 'N-L0-L1-L2-Sb0']), ('L2', ['N-L0-L1-L2-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-L2-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on 3
action child  0  avg_return: 0.0003203444083226025
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.00010017399712570096
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 7 cumulate planning time: 98
sim.current.step 3
root offset is:  1
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sb - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('L0', ['0', 'N-L0-Sb0-Sb1-Sb2']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sb0-Sb1-Sb2']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb0-Sb1-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - C - Sb - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb1', 'N-C0-Sb0']), ('C1', ['N-C0-C1-L0-Sb1', 'OUT']), ('L0', ['IN', 'N-C0-C1-L0-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-C1-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - L - Sb - L - VOUT', 'VIN - C - L - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['N-L0-Sb0', 'OUT']), ('L1', ['N-C1-L1', 'N-L1-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - L - Sb - L - VOUT', 'VIN - C - L - Sb - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['N-L0-Sb0', 'OUT']), ('L1', ['N-C1-L1', 'N-L1-Sb0']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - L - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb2', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['0', 'N-C0-L0-Sb2'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - C - Sb - Sb - GND', 'VOUT - L - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-Sb1']), ('L0', ['IN', 'N-C0-L0-L1']), ('L1', ['N-C0-L0-L1', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - C - Sb - Sb - GND', 'VOUT - L - C - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-L1', 'N-C0-Sb1']), ('L0', ['IN', 'N-C0-L0-L1']), ('L1', ['N-C0-L0-L1', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-Sb1', 'N-Sb0-Sb1'])])
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 3.348605670759337e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.000548288362744219
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 4 cumulate planning time: 102
sim.current.step 4
root offset is:  1
['VIN - Sb - C - L - VOUT', 'VIN - Sb - C - L - VOUT', 'VIN - Sb - C - L - C - GND', 'VIN - Sb - C - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0-Sb1']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - L - VOUT', 'VIN - Sb - C - L - VOUT', 'VIN - Sb - C - L - C - GND', 'VIN - Sb - C - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0-Sb1']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])
PCC-17859 violations

['VIN - L - C - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - L - Sb - L - GND', 'VOUT - C - Sb - Sb - GND', 'VOUT - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1-Sb1', 'OUT']), ('L0', ['0', 'N-L0-Sb0-Sb1']), ('L1', ['IN', 'N-C0-L1-Sb1']), ('Sb0', ['0', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-C0-L1-Sb1', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - C - Sb - GND', 'VOUT - L - Sb - C - Sb - GND', 'VOUT - L - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('L0', ['N-L0-Sb1-Sb2', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1-Sb2']), ('Sb2', ['IN', 'N-L0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - C - Sb - GND', 'VOUT - L - Sb - C - Sb - GND', 'VOUT - L - Sb - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('L0', ['N-L0-Sb1-Sb2', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-L0-Sb1-Sb2']), ('Sb2', ['IN', 'N-L0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 3
action child  0  avg_return: 0.0013224444127268853
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 4.688829316528294e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 1
action child  2  avg_return: 7.142596114990059e-06
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right']
state child 2 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 3 cumulate planning time: 105
sim.current.step 5
root offset is:  1
has to be unconnected
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sb - C - C - Sb - GND', 'VIN - Sb - C - C - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['N-C1-L0-Sb1', 'OUT']), ('L0', ['0', 'N-C1-L0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['0', 'N-C1-L0-Sb1'])])
find_one_analytics_result using:  0
action  0  : edge on [1, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  1  : edge on [1, 7]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  2  : edge on [1, 3]
action child  2  avg_return: 0.006171382099885625
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  3  : edge on [1, 11]
action child  3  avg_return: 2.515950650500858e-08
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  4  : edge on [1, 9]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 6
root offset is:  1
has to be unconnected
action  0  : edge on [2, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {9}, 9: {2}})
action  1  : edge on [2, 5]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {5}, 5: {2}})
action  2  : edge on [2, 11]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {11}, 11: {2}})
action  3  : edge on [2, 4]
action child  3  avg_return: 0.018514070821137363
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2}})
action  4  : edge on [2, 7]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 7
root offset is:  1
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [0, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2}, 0: {11}, 11: {0}})
action  1  : edge on [0, 5]
action child  1  avg_return: 1.5095703903005151e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2}, 0: {5}, 5: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 8
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2}, 0: {5}, 5: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 9
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - C - L - GND', 'VIN - Sb - C - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['N-C0-C1-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - C - L - GND', 'VIN - Sb - C - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'OUT']), ('C1', ['N-C0-C1-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

action  0  : edge on [4, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0}, 11: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 10
root offset is:  1
find_one_analytics_result using:  0
action  0  : edge on [5, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {4}, 7: {5}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {4}, 7: {5}, 6: {8}, 8: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 12
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {4}, 7: {5}, 6: {8}, 8: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 13
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {4}, 7: {5}, 6: {8}, 8: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 14
root offset is:  1
action  0  : edge on [9, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {9, 4}, 7: {5}, 6: {8}, 8: {6}, 9: {11}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 15
root offset is:  1
action  0  : edge on [10, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {9, 4}, 7: {5}, 6: {8}, 8: {6}, 9: {11}, 10: {12}, 12: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 16
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {9, 4}, 7: {5}, 6: {8}, 8: {6}, 9: {11}, 10: {12}, 12: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
sim.current.step 17
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2, 11}, 0: {5}, 5: {0, 7}, 11: {9, 4}, 7: {5}, 6: {8}, 8: {6}, 9: {11}, 10: {12}, 12: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 105
effis of topo: [{'parameter': '0.1', 'efficiency': {'efficiency': 0.04, 'output_voltage': 47.0}, 'output_voltage': 47.0}]
#####################Game:   steps:  19   average cumulate reward:  0
title result with parameter:0.1 
-1 , 10 : 19.0
[{'parameter': '0.1', 'efficiency': {'efficiency': 0.04, 'output_voltage': 47.0}, 'output_voltage': 47.0}]
hash counter 0
hash length 106

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - C - Sb - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - C - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('C2', ['0', 'N-C2-Sb0-Sb1']), ('Sb0', ['N-C0-C1-Sb0', 'N-C2-Sb0-Sb1']), ('Sb1', ['N-C2-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - C - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('C2', ['0', 'N-C2-Sb0-Sb1']), ('Sb0', ['N-C0-C1-Sb0', 'N-C2-Sb0-Sb1']), ('Sb1', ['N-C2-Sb0-Sb1', 'OUT'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - L - Sa - VOUT', 'VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa2-Sb0', 'N-L0-Sa1-Sa2']), ('Sa0', ['N-L0-Sa0-Sa2-Sb0', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1-Sa2']), ('Sa2', ['N-L0-Sa0-Sa2-Sb0', 'N-L0-Sa1-Sa2']), ('Sb0', ['0', 'N-L0-Sa0-Sa2-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - Sb - Sa - GND', 'VIN - C - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - C - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - L - Sa - Sa - GND', 'VOUT - Sa - L - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('L1', ['IN', 'N-L1-Sa1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['N-L1-Sa1', 'N-Sa1-Sa2']), ('Sa2', ['0', 'N-Sa1-Sa2'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - Sa - GND', 'VOUT - Sa - L - L - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('L1', ['IN', 'N-L1-Sa1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['N-L1-Sa1', 'N-Sa1-Sa2']), ('Sa2', ['0', 'N-Sa1-Sa2'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - Sa - GND', 'VIN - L - L - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L2-Sa0', 'OUT']), ('L1', ['N-L1-L2-L3', 'OUT']), ('L2', ['N-L0-L2-Sa0', 'N-L1-L2-L3']), ('L3', ['IN', 'N-L1-L2-L3']), ('Sa0', ['0', 'N-L0-L2-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - Sa - GND', 'VIN - L - L - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L2-Sa0', 'OUT']), ('L1', ['N-L1-L2-L3', 'OUT']), ('L2', ['N-L0-L2-Sa0', 'N-L1-L2-L3']), ('L3', ['IN', 'N-L1-L2-L3']), ('Sa0', ['0', 'N-L0-L2-Sa0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - Sa - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa1-Sb0', 'N-L0-Sa0']), ('L1', ['0', 'N-L0-L1-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['N-L0-L1-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - L - L - GND', 'VIN - L - L - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L3-Sb0']), ('L1', ['IN', 'N-L1-L2-L3']), ('L2', ['IN', 'N-L1-L2-L3']), ('L3', ['N-L0-L3-Sb0', 'N-L1-L2-L3']), ('Sb0', ['N-L0-L3-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - L - L - GND', 'VIN - L - L - L - GND', 'VOUT - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L3-Sb0']), ('L1', ['IN', 'N-L1-L2-L3']), ('L2', ['IN', 'N-L1-L2-L3']), ('L3', ['N-L0-L3-Sb0', 'N-L1-L2-L3']), ('Sb0', ['N-L0-L3-Sb0', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - C - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - Sb - Sa - Sb - GND', 'VIN - Sa - Sb - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1-Sb1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1-Sb1']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-C0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sb - Sa - VOUT', 'VIN - C - L - GND', 'VOUT - Sa - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - C - Sa - VOUT', 'VIN - L - C - C - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2-Sa0', 'N-C0-L0']), ('C1', ['0', 'N-C1-C2']), ('C2', ['N-C0-C2-Sa0', 'N-C1-C2']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['N-C0-C2-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - Sa - VOUT', 'VIN - L - C - C - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2-Sa0', 'N-C0-L0']), ('C1', ['0', 'N-C1-C2']), ('C2', ['N-C0-C2-Sa0', 'N-C1-C2']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['N-C0-C2-Sa0', 'OUT'])])
['VIN - Sb - C - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-C0-L0-L1-Sa0-Sb0']), ('Sa0', ['N-C0-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa4', 'N-Sa2-Sa3']), ('Sa3', ['IN', 'N-Sa2-Sa3']), ('Sa4', ['N-Sa1-Sa2-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa4', 'N-Sa2-Sa3']), ('Sa3', ['IN', 'N-Sa2-Sa3']), ('Sa4', ['N-Sa1-Sa2-Sa4', 'OUT'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - C - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sb1', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-L1-Sb1', 'N-C0-L0-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-L0-L1-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - C - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-L1-Sb1', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-L1-Sb1', 'N-C0-L0-Sb0']), ('L1', ['IN', 'N-C0-L0-L1-Sb1']), ('Sb0', ['N-C0-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-L0-L1-Sb1'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - L - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - C - GND', 'VIN - C - Sb - L - C - GND', 'VOUT - Sb - C - C - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C2-L0']), ('C1', ['IN', 'N-C1-Sb0']), ('C2', ['IN', 'N-C0-C2-L0']), ('L0', ['N-C0-C2-L0', 'OUT']), ('Sb0', ['N-C1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - Sb - VOUT', 'VIN - C - C - GND', 'VIN - C - Sb - L - C - GND', 'VOUT - Sb - C - C - C - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C2-L0']), ('C1', ['IN', 'N-C1-Sb0']), ('C2', ['IN', 'N-C0-C2-L0']), ('L0', ['N-C0-C2-L0', 'OUT']), ('Sb0', ['N-C1-Sb0', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sa - L - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - C - L - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - Sb - Sa - GND', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sb - Sa - GND', 'VIN - C - L - Sa - GND', 'VIN - C - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sb - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - Sb - VOUT', 'VIN - L - C - Sb - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - Sb - VOUT', 'VIN - L - C - Sb - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sb0']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - Sa - Sb - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-L0-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - C - Sb - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['N-C1-L0', 'N-C1-Sa0']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C1-Sa0']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - C - Sb - Sa - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['N-C1-L0', 'N-C1-Sa0']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'N-C1-Sa0']), ('Sb0', ['IN', 'N-C0-Sb0'])])
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - L - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - Sa - Sb - GND', 'VIN - L - Sa - Sa - GND', 'VOUT - L - Sa - Sb - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - Sb - L - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - Sb - L - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0']), ('Sb0', ['IN', 'N-L0-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - C - Sb - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0-Sa1-Sb0']), ('Sa0', ['N-C1-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-C1-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-C1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  1
['VIN - Sb - L - C - Sb - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - C - GND', 'VIN - Sa - L - L - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['N-C0-L1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - C - GND', 'VIN - Sa - L - L - C - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L1']), ('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['N-C0-L1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])
title effi: 0.49 vout: 49.0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sa - C - L - GND', 'VIN - Sb - Sa - Sa - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-Sa0-Sa1']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sb - Sa - C - Sb - GND', 'VOUT - Sb - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb1-Sb2']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sb - Sa - C - Sb - GND', 'VOUT - Sb - Sa - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb1-Sb2']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-Sb1-Sb2'])])
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.022978934659256604
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 45 cumulate planning time: 45
sim.current.step 1
root offset is:  1
['VIN - C - Sb - Sa - VOUT', 'VIN - C - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - Sa - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - Sb - L - VOUT', 'VIN - C - Sb - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('L0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb1', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['N-C0-Sb1', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb0', 'N-C0-C2']), ('C1', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('C2', ['N-C0-C2', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb0', 'N-C0-C2']), ('C1', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('C2', ['N-C0-C2', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
PCC-17859 violations

['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['IN', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-Sa1-Sa2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sb - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['IN', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['N-C0-Sb0', 'N-Sa1-Sa2-Sb0'])])
['VIN - C - Sb - L - Sa - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sa - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1-Sb0']), ('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1-Sb0']), ('Sb0', ['N-C0-Sa1-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sa - C - Sb - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('C1', ['N-C1-Sa0', 'N-C1-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C1-Sa0']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sb0', ['N-C1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - C - Sb - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1']), ('C1', ['N-C1-Sa0', 'N-C1-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C1-Sa0']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sb0', ['N-C1-Sb0', 'OUT'])])
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - Sb - GND', 'VIN - Sa - Sb - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa1-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - L - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sa - Sb - Sa - Sb - GND', 'VOUT - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb1']), ('Sa0', ['N-C0-Sa0-Sb1', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'IN']), ('C2', ['0', 'IN']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('C1', ['0', 'IN']), ('C2', ['0', 'IN']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0', 'N-Sa2-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa2-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sa - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0', 'N-Sa2-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa2-Sb0-Sb1'])])
['VIN - Sa - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - L - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sb0']), ('C1', ['N-C0-C1-L0-Sb0', 'OUT']), ('L0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - L - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - L - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sb0']), ('C1', ['N-C0-C1-L0-Sb0', 'OUT']), ('L0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - Sa - GND', 'VOUT - C - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - L - C - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - L - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - L - C - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - L - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - L - Sb - GND', 'VOUT - Sb - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['N-L0-L1', 'N-L1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - L - L - Sb - GND', 'VOUT - Sb - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb0']), ('L1', ['N-L0-L1', 'N-L1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L1-Sb1'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sa - Sb - GND', 'VIN - Sa - Sb - Sa - Sa - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sa - Sb - GND', 'VIN - Sa - Sb - Sa - Sa - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['N-C0-C1-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['N-C0-C1-L0-Sb0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sa - Sa - C - VOUT', 'VIN - Sb - L - GND', 'VOUT - C - Sa - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-C0-Sa1', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.002827317455816564
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.015078461839400011
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 18 cumulate planning time: 63
sim.current.step 2
root offset is:  1
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - L - GND', 'VIN - Sa - C - L - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - Sa - Sa - GND', 'VOUT - Sb - L - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - Sa - Sa - GND', 'VOUT - Sb - L - L - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa0']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sa - L - C - GND', 'VIN - C - L - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - L - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sa - L - C - GND', 'VIN - C - L - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - L - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2', 'N-L0-Sa0-Sb0']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['N-L0-L1-L2', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - L - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-L2', 'N-L0-Sa0-Sb0']), ('L1', ['N-L0-L1-L2', 'OUT']), ('L2', ['N-L0-L1-L2', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - C - Sa - L - VOUT', 'VIN - C - C - L - VOUT', 'VIN - C - Sa - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-L0-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - C - C - GND', 'VIN - Sb - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'N-C1-Sa0-Sb1']), ('Sa0', ['N-C1-Sa0-Sb1', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'OUT']), ('Sb1', ['IN', 'N-C1-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - C - C - GND', 'VIN - Sb - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'N-C1-Sa0-Sb1']), ('Sa0', ['N-C1-Sa0-Sb1', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'OUT']), ('Sb1', ['IN', 'N-C1-Sa0-Sb1'])])
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1-Sb0-Sb1']), ('Sb0', ['N-C0-Sa1-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sa1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - Sa - L - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - Sa - L - VOUT', 'VIN - C - GND', 'VOUT - L - Sa - Sb - C - GND', 'VOUT - L - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - C - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - L - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0', 'N-C1-Sa0-Sb0']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['N-C1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - C - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - L - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0', 'N-C1-Sa0-Sb0']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['N-C1-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sa0-Sb0'])])
PCC-17859 violations

action  0  : node on 2
action child  0  avg_return: 0.017103158541664113
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.0022528808615359507
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 7 cumulate planning time: 70
sim.current.step 3
root offset is:  1
['VIN - Sb - Sa - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - Sa - L - Sb - GND', 'VIN - Sb - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - L - Sb - GND', 'VIN - C - L - Sa - GND', 'VIN - C - L - Sb - GND', 'VIN - C - L - Sa - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sb - VOUT', 'VIN - C - L - Sb - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - C - L - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'N-L0-Sa0-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'N-C0-L0-Sb0']), ('Sb1', ['N-L0-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('L2', ['IN', 'N-L2-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sb0', ['N-L2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - C - GND', 'VOUT - L - Sb - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1-Sb0']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1-Sb0']), ('Sb0', ['N-C0-Sa0-Sa1-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - L - Sa - Sb - VOUT', 'VIN - L - L - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sa1']), ('L1', ['0', 'N-L0-L1-Sa0-Sa1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sa1']), ('Sa1', ['N-L0-L1-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
action  0  : node on 3
action child  0  avg_return: 0.024046594111085683
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 5.178458044943451e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 71
sim.current.step 4
root offset is:  1
['VIN - C - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - C - Sb - Sa - GND', 'VOUT - L - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - L - Sb - C - VOUT', 'VIN - L - Sa - C - Sb - GND', 'VIN - L - L - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sa - L - VOUT', 'VIN - Sb - Sb - L - C - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-L0-Sa0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.057162244771029644
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.0005872431167352141
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 2
action child  2  avg_return: 0.028577340993754058
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
action  3  : node on 3
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'C1-left', 'C1-right']
state child 3 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 5
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
action  0  : edge on [1, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  1  : edge on [1, 3]
action child  1  avg_return: 3.140537596556277e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  2  : edge on [1, 5]
action child  2  avg_return: 0.24290764210641166
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  3  : edge on [1, 7]
action child  3  avg_return: 2.46397249374916e-07
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  4  : edge on [1, 11]
action child  4  avg_return: 2.4639724937491606e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 6
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [2, 3]
action child  0  avg_return: 9.74638008638557e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}})
action  1  : edge on [2, 11]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}})
action  2  : edge on [2, 6]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {6}, 6: {2}})
action  3  : edge on [2, 7]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}})
action  4  : edge on [2, 9]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {9}, 9: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 7
root offset is:  1
['VIN - Sb - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'N-L0-Sa1']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [0, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}, 0: {11}, 11: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 8
root offset is:  1
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - C - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'N-L0-Sa1-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [-1, -1]
action child  0  avg_return: 3.37512033323873e-14
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}, 0: {11}, 11: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 9
root offset is:  1
action  0  : edge on [4, 6]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 10
root offset is:  1
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [5, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {4}, 9: {5}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {10, 4}, 9: {5}, 10: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 12
root offset is:  1
['VIN - Sb - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND', 'VOUT - Sa - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1-Sb0']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-C0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [7, 9]
action child  0  avg_return: 1.919310924810655e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {10, 4}, 9: {5, 7}, 10: {6}, 7: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 13
root offset is:  1
has to be unconnected
action  0  : edge on [8, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {10, 4}, 9: {5, 7}, 10: {8, 6}, 7: {9}, 8: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 14
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {10, 4}, 9: {5, 7}, 10: {8, 6}, 7: {9}, 8: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 15
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {10, 4}, 9: {5, 7}, 10: {8, 6}, 7: {9}, 8: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 16
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {10, 4}, 9: {5, 7}, 10: {8, 6}, 7: {9}, 8: {10}})
has to be unconnected
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
sim.current.step 17
has to be unconnected
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1, 9}, 2: {3}, 3: {2}, 0: {11}, 11: {0}, 4: {6}, 6: {10, 4}, 9: {5, 7}, 10: {8, 6}, 7: {9}, 8: {10}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 71
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  18   average cumulate reward:  0
title result with parameter:0.5 
-1 , 10 : 18.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 0
hash length 84

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2-Sa4', 'N-Sa0-Sa1-Sa3']), ('Sa1', ['N-Sa0-Sa1-Sa2-Sa4', 'N-Sa0-Sa1-Sa3']), ('Sa2', ['N-Sa0-Sa1-Sa2-Sa4', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa1-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa1-Sa2-Sa4'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - L - Sb - GND', 'VIN - L - L - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['IN', 'N-L0-L1-L2']), ('L2', ['N-L0-L1-L2', 'OUT']), ('L3', ['N-L3-Sb0', 'OUT']), ('Sb0', ['0', 'N-L3-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - L - Sb - GND', 'VIN - L - L - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['IN', 'N-L0-L1-L2']), ('L2', ['N-L0-L1-L2', 'OUT']), ('L3', ['N-L3-Sb0', 'OUT']), ('Sb0', ['0', 'N-L3-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - L - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - Sb - Sa - VOUT', 'VIN - Sa - Sb - Sb - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb1', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - C - L - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa1']), ('L0', ['0', 'N-C0-L0-Sa1']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-C0-L0-Sa1', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - C - GND', 'VIN - L - Sa - GND', 'VIN - L - L - C - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-L2-Sa0']), ('L1', ['N-L0-L1-L2-Sa0', 'OUT']), ('L2', ['N-L0-L1-L2-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-L2-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - C - GND', 'VIN - L - Sa - GND', 'VIN - L - L - C - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND', 'VOUT - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-L2-Sa0']), ('L1', ['N-L0-L1-L2-Sa0', 'OUT']), ('L2', ['N-L0-L1-L2-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-L2-Sa0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sa - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa2']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-C0-Sa2']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sb - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sa2', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sa2', ['IN', 'N-Sa0-Sa2']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sb - L - GND', 'VOUT - Sa - Sb - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sa2', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sa2', ['IN', 'N-Sa0-Sa2']), ('Sb0', ['N-L0-Sb0', 'N-Sa1-Sb0'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sb - GND', 'VIN - Sb - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sb1-Sb2-Sb3', 'N-Sb1-Sb4']), ('Sb2', ['N-Sb1-Sb2-Sb3', 'OUT']), ('Sb3', ['N-Sb1-Sb2-Sb3', 'OUT']), ('Sb4', ['0', 'N-Sb1-Sb4'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0-Sa1-Sa2']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1-Sa2']), ('Sa1', ['N-C0-Sa0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-C0-Sa0-Sa1-Sa2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0-Sa1-Sa2']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1-Sa2']), ('Sa1', ['N-C0-Sa0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-C0-Sa0-Sa1-Sa2', 'OUT'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa0-Sa1-Sa2-Sa3', 'OUT']), ('Sa3', ['N-Sa0-Sa1-Sa2-Sa3', 'OUT']), ('Sa4', ['0', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sa0', ['N-C0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sb0', ['0', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-Sa0-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - C - GND', 'VIN - L - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0']), ('C1', ['N-C0-C1-L0-Sa0', 'N-C1-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0']), ('Sa0', ['N-C0-C1-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - C - GND', 'VIN - L - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0']), ('C1', ['N-C0-C1-L0-Sa0', 'N-C1-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0']), ('Sa0', ['N-C0-C1-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - Sa - Sb - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sb - Sa - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1-Sb2']), ('Sa0', ['IN', 'N-Sa0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb1-Sb2', 'N-Sa0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - L - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - C - L - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('C1', ['IN', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sa - L - L - Sb - GND', 'VOUT - Sa - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['IN', 'N-L1-Sa0-Sa1']), ('Sa0', ['N-L1-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L1-Sa0-Sa1']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - L - Sb - Sa - GND', 'VOUT - C - Sb - Sb - GND', 'VOUT - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-C0-L0-Sb1', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VIN - L - L - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0']), ('L0', ['IN', 'N-C0-L0-L1-Sa0']), ('L1', ['0', 'N-C0-L0-L1-Sa0']), ('Sa0', ['0', 'N-C0-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sa - L - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - Sa - Sa - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sa2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-L0-Sa1-Sa2', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-L0-Sa1-Sa2']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sa - VOUT', 'VIN - C - Sa - L - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - Sa - L - Sb - C - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0-Sb0', 'N-L0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on 0
action child  0  avg_return: 0.0017891896547672659
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.001718188973229837
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 14 cumulate planning time: 14
sim.current.step 1
root offset is:  1
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - C - L - L - GND', 'VIN - Sb - C - Sa - GND', 'VOUT - C - L - L - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1-Sa0', 'OUT']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-C0-L1-Sa0', 'N-L0-L1']), ('Sa0', ['0', 'N-C0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - L - L - GND', 'VIN - Sb - C - Sa - GND', 'VOUT - C - L - L - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L1-Sa0', 'OUT']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-C0-L1-Sa0', 'N-L0-L1']), ('Sa0', ['0', 'N-C0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0-Sb1']), ('Sb1', ['N-L0-Sa1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sb - C - GND', 'VIN - C - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sb - C - GND', 'VIN - C - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])
PCC-17859 violations

['VIN - Sa - Sb - Sb - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sb - Sb - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb2']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT']), ('Sb2', ['IN', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C2']), ('C1', ['0', 'N-C1-C2-Sa0-Sb0']), ('C2', ['N-C0-C2', 'N-C1-C2-Sa0-Sb0']), ('Sa0', ['IN', 'N-C1-C2-Sa0-Sb0']), ('Sb0', ['N-C1-C2-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C2']), ('C1', ['0', 'N-C1-C2-Sa0-Sb0']), ('C2', ['N-C0-C2', 'N-C1-C2-Sa0-Sb0']), ('Sa0', ['IN', 'N-C1-C2-Sa0-Sb0']), ('Sb0', ['N-C1-C2-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - Sa - L - GND', 'VIN - C - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - C - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sa - L - Sa - GND', 'VOUT - Sa - Sb - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - Sb - Sb - C - Sa - GND', 'VOUT - Sb - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sb1']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - Sb - Sb - C - Sa - GND', 'VOUT - Sb - Sa - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'N-C0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sb1']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sa - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['N-L0-L1-Sa0-Sb0', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - Sb - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - Sb - Sa - Sb - C - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb2']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sb0-Sb2']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['N-Sa0-Sb0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - Sb - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - Sb - Sa - Sb - C - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb2']), ('Sb0', ['N-C0-Sb0', 'N-Sa0-Sb0-Sb2']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['N-Sa0-Sb0-Sb2', 'OUT'])])
['VIN - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sb - C - L - GND', 'VIN - Sb - C - L - GND', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - C - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-L1-Sa0']), ('L1', ['0', 'N-C0-L0-L1-Sa0']), ('Sa0', ['IN', 'N-C0-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - L - VOUT', 'VIN - C - Sb - L - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-Sa0-Sb0']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - L - VOUT', 'VIN - C - Sb - L - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-Sa0-Sb0']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-L0-Sb0'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sa0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sa - VOUT', 'VIN - Sa - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'N-C0-Sa1']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa1', ['N-C0-Sa1', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - L - Sb - VOUT', 'VIN - C - Sb - L - GND', 'VIN - Sa - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - C - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'N-L1-Sa0']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - Sb - L - VOUT', 'VIN - L - Sb - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sb0']), ('Sb0', ['N-L1-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - C - Sb - C - VOUT', 'VIN - C - Sb - C - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - C - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-C1-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-C1-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - Sa - L - Sa - GND', 'VIN - L - L - Sa - GND', 'VOUT - Sb - L - L - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - GND', 'VIN - L - Sb - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - L - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1-Sb0']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('L1', ['IN', 'N-C0-L1-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-L1-Sb0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 50.0
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.009058451251391944
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.00512991519759695
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 11 cumulate planning time: 25
sim.current.step 1
root offset is:  1
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sa - L - VOUT', 'VIN - L - Sa - L - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1']), ('L1', ['N-L1-Sa1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-L0-Sa1', 'N-L1-Sa1'])])
find_one_analytics_result using:  0
['VIN - L - Sa - L - VOUT', 'VIN - L - Sa - L - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1']), ('L1', ['N-L1-Sa1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-L0-Sa1', 'N-L1-Sa1'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - C - L - GND', 'VIN - Sa - Sa - C - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - C - L - GND', 'VIN - Sa - Sa - C - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('C1', ['IN', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - L - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - L - C - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('C1', ['N-C1-L1', 'N-C1-Sa0']), ('L0', ['N-C0-L0', 'OUT']), ('L1', ['0', 'N-C1-L1']), ('Sa0', ['IN', 'N-C1-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - L - C - Sa - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('C1', ['N-C1-L1', 'N-C1-Sa0']), ('L0', ['N-C0-L0', 'OUT']), ('L1', ['0', 'N-C1-L1']), ('Sa0', ['IN', 'N-C1-Sa0'])])
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['IN', 'N-L0-L1-L2']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-L1-L2']), ('L1', ['IN', 'N-L0-L1-L2']), ('L2', ['0', 'N-L0-L1-L2']), ('Sa0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - L - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - L - VOUT', 'VIN - C - GND', 'VOUT - L - Sa - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1-Sa0-Sa1', 'OUT']), ('L1', ['N-L0-L1-Sa0-Sa1', 'OUT']), ('Sa0', ['N-L0-L1-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-L1-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - L - Sa - C - C - GND', 'VOUT - L - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-C2', 'N-C1-Sa0']), ('C2', ['0', 'N-C1-C2']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C1-Sa0', 'N-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - L - Sa - C - C - GND', 'VOUT - L - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-C2', 'N-C1-Sa0']), ('C2', ['0', 'N-C1-C2']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-C1-Sa0', 'N-L0-Sa0'])])
['VIN - Sa - Sa - VOUT', 'VIN - Sa - C - L - Sa - GND', 'VOUT - Sa - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa1-Sa2']), ('L0', ['N-C0-L0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-C0-Sa1-Sa2']), ('Sa2', ['N-C0-Sa1-Sa2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - C - L - Sa - GND', 'VOUT - Sa - C - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa1-Sa2']), ('L0', ['N-C0-L0', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-C0-Sa1-Sa2']), ('Sa2', ['N-C0-Sa1-Sa2', 'OUT'])])
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - L - GND', 'VOUT - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('C1', ['N-C1-L0-L1-Sa0', 'OUT']), ('L0', ['N-C0-L0', 'N-C1-L0-L1-Sa0']), ('L1', ['0', 'N-C1-L0-L1-Sa0']), ('Sa0', ['IN', 'N-C1-L0-L1-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - C - GND', 'VOUT - C - L - GND', 'VOUT - C - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('C1', ['N-C1-L0-L1-Sa0', 'OUT']), ('L0', ['N-C0-L0', 'N-C1-L0-L1-Sa0']), ('L1', ['0', 'N-C1-L0-L1-Sa0']), ('Sa0', ['IN', 'N-C1-L0-L1-Sa0'])])
has to be unconnected
find_one_analytics_result using:  0
['VIN - C - Sa - Sa - VOUT', 'VIN - C - Sa - Sa - VOUT', 'VIN - C - L - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa2']), ('L0', ['0', 'N-C0-L0-Sa2']), ('Sa0', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-C0-L0-Sa2', 'N-Sa0-Sa1-Sa2'])])
find_one_analytics_result using:  0
['VIN - C - Sa - Sa - VOUT', 'VIN - C - Sa - Sa - VOUT', 'VIN - C - L - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - Sa - Sa - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa2']), ('L0', ['0', 'N-C0-L0-Sa2']), ('Sa0', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-C0-L0-Sa2', 'N-Sa0-Sa1-Sa2'])])
['VIN - L - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['IN', 'N-C2-L0-Sa0']), ('L0', ['IN', 'N-C2-L0-Sa0']), ('Sa0', ['N-C2-L0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['IN', 'N-C2-L0-Sa0']), ('L0', ['IN', 'N-C2-L0-Sa0']), ('Sa0', ['N-C2-L0-Sa0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - L - C - Sa - VOUT', 'VIN - L - C - C - VOUT', 'VIN - L - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L1-Sa0', 'OUT']), ('C1', ['N-C0-C1-L1-Sa0', 'N-C1-L0']), ('L0', ['IN', 'N-C1-L0']), ('L1', ['0', 'N-C0-C1-L1-Sa0']), ('Sa0', ['N-C0-C1-L1-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - Sa - VOUT', 'VIN - L - C - C - VOUT', 'VIN - L - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L1-Sa0', 'OUT']), ('C1', ['N-C0-C1-L1-Sa0', 'N-C1-L0']), ('L0', ['IN', 'N-C1-L0']), ('L1', ['0', 'N-C0-C1-L1-Sa0']), ('Sa0', ['N-C0-C1-L1-Sa0', 'OUT'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - L - C - Sa - VOUT', 'VIN - L - C - L - VOUT', 'VIN - L - C - C - GND', 'VOUT - Sa - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0']), ('C1', ['N-C0-C1-L0-Sa0', 'N-C1-L1']), ('L0', ['N-C0-C1-L0-Sa0', 'OUT']), ('L1', ['IN', 'N-C1-L1']), ('Sa0', ['N-C0-C1-L0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - Sa - VOUT', 'VIN - L - C - L - VOUT', 'VIN - L - C - C - GND', 'VOUT - Sa - C - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0']), ('C1', ['N-C0-C1-L0-Sa0', 'N-C1-L1']), ('L0', ['N-C0-C1-L0-Sa0', 'OUT']), ('L1', ['IN', 'N-C1-L1']), ('Sa0', ['N-C0-C1-L0-Sa0', 'OUT'])])
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - L - C - Sa - GND', 'VOUT - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa2']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-C0-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - L - C - Sa - GND', 'VOUT - L - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa2']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-C0-Sa2'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - C - L - Sa - L - VOUT', 'VIN - C - L - VOUT', 'VIN - C - L - GND', 'VIN - C - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - C - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sa0']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['0', 'N-C1-L0']), ('L1', ['N-C0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L1-Sa0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sa - L - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - L - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1', 'OUT']), ('L1', ['IN', 'N-L1-Sa1-Sa2']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-L1-Sa1-Sa2']), ('Sa2', ['0', 'N-L1-Sa1-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - C - L - GND', 'VIN - Sa - C - L - GND', 'VOUT - C - C - L - GND', 'VOUT - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['N-C1-C2-L0', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2-L0']), ('L0', ['0', 'N-C1-C2-L0']), ('Sa0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - C - L - GND', 'VIN - Sa - C - L - GND', 'VOUT - C - C - L - GND', 'VOUT - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['N-C1-C2-L0', 'OUT']), ('C2', ['N-C0-C2', 'N-C1-C2-L0']), ('L0', ['0', 'N-C1-C2-L0']), ('Sa0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sa - L - L - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - L - GND', 'VOUT - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-L3-Sa0']), ('L1', ['0', 'N-L0-L1-L3-Sa0']), ('L2', ['N-L2-L3', 'OUT']), ('L3', ['N-L0-L1-L3-Sa0', 'N-L2-L3']), ('Sa0', ['IN', 'N-L0-L1-L3-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - L - L - VOUT', 'VIN - Sa - L - GND', 'VIN - Sa - L - GND', 'VOUT - L - L - L - GND', 'VOUT - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1-L3-Sa0']), ('L1', ['0', 'N-L0-L1-L3-Sa0']), ('L2', ['N-L2-L3', 'OUT']), ('L3', ['N-L0-L1-L3-Sa0', 'N-L2-L3']), ('Sa0', ['IN', 'N-L0-L1-L3-Sa0'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - L - Sa - VOUT', 'VIN - C - Sa - C - Sa - VOUT', 'VIN - L - C - Sa - GND', 'VIN - C - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0-Sa1', 'N-C1-Sa0']), ('L0', ['IN', 'N-C1-L0-Sa1']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sa1', ['N-C1-L0-Sa1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - L - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sa - L - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['N-C0-L0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sa1', ['N-L0-Sa1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - Sa - VOUT', 'VIN - L - Sa - GND', 'VOUT - Sa - L - C - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['N-C0-L0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sa1', ['N-L0-Sa1', 'OUT'])])
find_one_analytics_result using:  0
action  0  : node on 2
action child  0  avg_return: 6.379152185343172e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.03622945229354052
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 41 cumulate planning time: 66
sim.current.step 1
root offset is:  1
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C3']), ('C1', ['0', 'N-C1-C3-Sa0']), ('C2', ['IN', 'OUT']), ('C3', ['N-C0-C3', 'N-C1-C3-Sa0']), ('Sa0', ['N-C1-C3-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C3']), ('C1', ['0', 'N-C1-C3-Sa0']), ('C2', ['IN', 'OUT']), ('C3', ['N-C0-C3', 'N-C1-C3-Sa0']), ('Sa0', ['N-C1-C3-Sa0', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2', 'OUT']), ('Sa2', ['IN', 'N-Sa1-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2', 'OUT']), ('Sa2', ['IN', 'N-Sa1-Sa2'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('C1', ['IN', 'N-C1-Sa0']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sa1', ['0', 'N-C0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('C1', ['IN', 'N-C1-Sa0']), ('C2', ['IN', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sa1', ['0', 'N-C0-Sa1'])])
['VIN - C - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - C - C - GND', 'VIN - C - Sa - GND', 'VIN - C - C - C - GND', 'VIN - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C3-Sa0']), ('C1', ['IN', 'N-C0-C1-C3-Sa0']), ('C2', ['0', 'OUT']), ('C3', ['N-C0-C1-C3-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - C - C - C - GND', 'VIN - C - Sa - GND', 'VIN - C - C - C - GND', 'VIN - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C3-Sa0']), ('C1', ['IN', 'N-C0-C1-C3-Sa0']), ('C2', ['0', 'OUT']), ('C3', ['N-C0-C1-C3-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-C3-Sa0'])])
PCC-17859 violations

has to be unconnected
['VIN - C - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['IN', 'N-C1-C2']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C2', 'OUT']), ('C2', ['IN', 'N-C1-C2']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])
PCC-17859 violations

['VIN - Sa - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - C - Sa - GND', 'VIN - Sa - Sa - C - Sa - GND', 'VOUT - Sa - Sa - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1-Sa2', 'N-C0-Sa3']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1-Sa2', 'OUT']), ('Sa2', ['IN', 'N-C0-Sa1-Sa2']), ('Sa3', ['0', 'N-C0-Sa3'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - C - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - C - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sa0']), ('C1', ['N-C0-C1', 'N-C1-Sa1']), ('C2', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-C1-Sa1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - C - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-Sa0']), ('C1', ['N-C0-C1', 'N-C1-Sa1']), ('C2', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-C1-Sa1'])])
['VIN - C - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C3']), ('C1', ['0', 'N-C1-C3-Sa0']), ('C2', ['IN', 'OUT']), ('C3', ['N-C0-C3', 'N-C1-C3-Sa0']), ('Sa0', ['IN', 'N-C1-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C3']), ('C1', ['0', 'N-C1-C3-Sa0']), ('C2', ['IN', 'OUT']), ('C3', ['N-C0-C3', 'N-C1-C3-Sa0']), ('Sa0', ['IN', 'N-C1-C3-Sa0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - C - C - Sa - C - GND', 'VIN - C - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-C3-Sa0', 'OUT']), ('C3', ['0', 'N-C2-C3-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-C2-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - C - Sa - C - GND', 'VIN - C - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-C3-Sa0', 'OUT']), ('C3', ['0', 'N-C2-C3-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-C2-C3-Sa0'])])
PCC-17859 violations

['VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa1-Sa2', 'OUT']), ('C1', ['N-C0-C1-Sa1-Sa2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-C0-C1-Sa1-Sa2', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-C0-C1-Sa1-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - C - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa1-Sa2', 'OUT']), ('C1', ['N-C0-C1-Sa1-Sa2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-C0-C1-Sa1-Sa2', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-C0-C1-Sa1-Sa2'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - C - C - GND', 'VIN - C - C - GND', 'VIN - C - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-C2-C3']), ('C1', ['IN', 'N-C0-C1-C2-C3']), ('C2', ['IN', 'N-C0-C1-C2-C3']), ('C3', ['IN', 'N-C0-C1-C2-C3']), ('Sa0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - C - C - GND', 'VIN - C - C - GND', 'VIN - C - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-C2-C3']), ('C1', ['IN', 'N-C0-C1-C2-C3']), ('C2', ['IN', 'N-C0-C1-C2-C3']), ('C3', ['IN', 'N-C0-C1-C2-C3']), ('Sa0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa2-Sa3-Sa4']), ('Sa4', ['N-Sa2-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa2-Sa3-Sa4']), ('Sa4', ['N-Sa2-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - Sa - VOUT', 'VIN - C - Sa - C - C - GND', 'VIN - C - Sa - C - C - GND', 'VOUT - C - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'N-C1-C2-C3']), ('C2', ['0', 'N-C1-C2-C3']), ('C3', ['N-C1-C2-C3', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - C - C - GND', 'VIN - C - Sa - C - C - GND', 'VOUT - C - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'N-C1-C2-C3']), ('C2', ['0', 'N-C1-C2-C3']), ('C3', ['N-C1-C2-C3', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sa - C - GND', 'VOUT - Sa - Sa - Sa - C - GND', 'VOUT - C - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa2']), ('Sa0', ['IN', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['N-C1-Sa2', 'N-Sa0-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - Sa - Sa - C - GND', 'VOUT - Sa - Sa - Sa - C - GND', 'VOUT - C - Sa - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa2']), ('Sa0', ['IN', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['N-C1-Sa2', 'N-Sa0-Sa2'])])
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - C - C - VOUT', 'VIN - C - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - C - Sa - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa1', 'N-C0-Sa0']), ('C1', ['N-C0-C1-Sa1', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['0', 'N-C0-C1-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - C - C - VOUT', 'VIN - C - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - C - Sa - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa1', 'N-C0-Sa0']), ('C1', ['N-C0-C1-Sa1', 'OUT']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['0', 'N-C0-C1-Sa1'])])
['VIN - Sa - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - C - GND', 'VIN - Sa - C - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-C2-Sa0', 'OUT']), ('C1', ['N-C0-C1-C2-Sa0', 'OUT']), ('C2', ['N-C0-C1-C2-Sa0', 'OUT']), ('C3', ['0', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-C2-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - C - C - GND', 'VIN - Sa - C - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-C2-Sa0', 'OUT']), ('C1', ['N-C0-C1-C2-Sa0', 'OUT']), ('C2', ['N-C0-C1-C2-Sa0', 'OUT']), ('C3', ['0', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-C2-Sa0'])])
PCC-17859 violations

has to be unconnected
['VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sa1']), ('C1', ['IN', 'N-C0-C1-Sa0-Sa1']), ('C2', ['0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0-Sa1', 'OUT']), ('Sa1', ['N-C0-C1-Sa0-Sa1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sa1']), ('C1', ['IN', 'N-C0-C1-Sa0-Sa1']), ('C2', ['0', 'OUT']), ('Sa0', ['N-C0-C1-Sa0-Sa1', 'OUT']), ('Sa1', ['N-C0-C1-Sa0-Sa1', 'OUT'])])
PCC-17859 violations

find_one_analytics_result using:  0
action  0  : node on 3
action child  0  avg_return: 2.7989187765469415e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.05257991943355782
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 27 cumulate planning time: 93
sim.current.step 1
root offset is:  1
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa3']), ('Sa2', ['0', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'N-Sa1-Sa3']), ('Sa4', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa4', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa4', 'N-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa2-Sa3']), ('Sa4', ['N-Sa0-Sa4', 'N-Sa1-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['N-Sa1-Sa3', 'OUT']), ('Sa4', ['IN', 'N-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['N-Sa1-Sa3', 'OUT']), ('Sa4', ['IN', 'N-Sa2-Sa4'])])
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['N-Sa2-Sa3', 'N-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa3', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sa3']), ('Sa2', ['0', 'N-Sa0-Sa2']), ('Sa3', ['N-Sa0-Sa1-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa1-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa1-Sa2-Sa4'])])
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sa3-Sa4']), ('Sa1', ['N-Sa0-Sa1-Sa3-Sa4', 'N-Sa1-Sa2']), ('Sa2', ['0', 'N-Sa1-Sa2']), ('Sa3', ['N-Sa0-Sa1-Sa3-Sa4', 'OUT']), ('Sa4', ['N-Sa0-Sa1-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa4']), ('Sa1', ['N-Sa1-Sa4', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['N-Sa0-Sa4', 'N-Sa1-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa4']), ('Sa1', ['N-Sa1-Sa4', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['N-Sa0-Sa4', 'N-Sa1-Sa4'])])
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'N-Sa1-Sa2-Sa4']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'N-Sa1-Sa2-Sa4']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['0', 'N-Sa1-Sa2-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa4', 'N-Sa0-Sa2-Sa3']), ('Sa1', ['N-Sa0-Sa1-Sa4', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa1-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'N-Sa0-Sa3']), ('Sa1', ['N-Sa1-Sa4', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sa4', ['IN', 'N-Sa1-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'N-Sa0-Sa3']), ('Sa1', ['N-Sa1-Sa4', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sa4', ['IN', 'N-Sa1-Sa4'])])
has to be unconnected
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa3']), ('Sa1', ['IN', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa2-Sa4']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['N-Sa2-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa3']), ('Sa1', ['IN', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa2-Sa4']), ('Sa3', ['N-Sa0-Sa3', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['N-Sa2-Sa4', 'OUT'])])
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa2-Sa4', 'OUT']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa2-Sa4', 'N-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa2-Sa4', 'OUT']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa2-Sa4', 'N-Sa3-Sa4'])])
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'OUT']), ('Sa1', ['N-Sa1-Sa3', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['IN', 'N-Sa1-Sa3']), ('Sa4', ['0', 'N-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'OUT']), ('Sa1', ['N-Sa1-Sa3', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['IN', 'N-Sa1-Sa3']), ('Sa4', ['0', 'N-Sa2-Sa4'])])
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa2-Sa4']), ('Sa3', ['N-Sa1-Sa2-Sa3', 'OUT']), ('Sa4', ['IN', 'N-Sa2-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'N-Sa2-Sa4']), ('Sa3', ['N-Sa1-Sa2-Sa3', 'OUT']), ('Sa4', ['IN', 'N-Sa2-Sa4'])])
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'N-Sa0-Sa3-Sa4']), ('Sa1', ['N-Sa1-Sa4', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2']), ('Sa3', ['IN', 'N-Sa0-Sa3-Sa4']), ('Sa4', ['N-Sa0-Sa3-Sa4', 'N-Sa1-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['IN', 'OUT'])])
action  0  : node on 0
action child  0  avg_return: 0.015121071485522001
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 22 cumulate planning time: 115
sim.current.step 5
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [1, 7]
action child  0  avg_return: 1.4723723598218488e-05
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  1  : edge on [1, 5]
action child  1  avg_return: 0.018595426362508244
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  2  : edge on [1, 3]
action child  2  avg_return: 0.0190971341528309
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  3  : edge on [1, 9]
action child  3  avg_return: 0.02101990843101181
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  4  : edge on [1, 11]
action child  4  avg_return: 0.00691862943478575
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 115
sim.current.step 6
root offset is:  1
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'N-Sa1-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['N-Sa0-Sa1-Sa2', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'N-Sa1-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['IN', 'OUT'])])
action  0  : edge on [2, 11]
action child  0  avg_return: 0.035
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {11}, 11: {2}})
action  1  : edge on [2, 5]
action child  1  avg_return: 3.328539886704497e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {5}, 5: {2}})
action  2  : edge on [2, 3]
action child  2  avg_return: 0.046667459087584184
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2}})
action  3  : edge on [2, 10]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {10}, 10: {2}})
action  4  : edge on [2, 7]
action child  4  avg_return: 6.62567561919832e-05
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 116
sim.current.step 7
root offset is:  1
has to be unconnected
action  0  : edge on [0, 11]
action child  0  avg_return: 0.07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2}, 0: {11}, 11: {0}})
action  1  : edge on [0, 5]
action child  1  avg_return: 2.3772627525590706e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2}, 0: {5}, 5: {0}})
action  2  : edge on [0, 7]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2}, 0: {7}, 7: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 116
sim.current.step 8
root offset is:  1
has to be unconnected
action  0  : edge on [3, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 116
sim.current.step 9
root offset is:  1
has to be unconnected
action  0  : edge on [4, 6]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}, 4: {6}, 6: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 116
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}, 4: {6}, 6: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 116
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}, 4: {6}, 6: {4, 7}, 7: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 116
sim.current.step 12
root offset is:  1
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT']), ('Sa4', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT']), ('Sa4', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT'])])
action  0  : edge on [7, 10]
action child  0  avg_return: 0.0591154184220686
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}, 4: {6}, 6: {4, 7}, 7: {10, 6}, 10: {7}})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 117
sim.current.step 13
root offset is:  1
action  0  : edge on [8, 12]
action child  0  avg_return: 0.0591154184220686
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}, 4: {6}, 6: {4, 7}, 7: {10, 6}, 10: {7}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 117
sim.current.step 14
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0591154184220686
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}, 4: {6}, 6: {4, 7}, 7: {10, 6}, 10: {7}, 8: {12}, 12: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 117
sim.current.step 15
root offset is:  1
action  0  : terminal on 0
action child  0  avg_return: 0.0591154184220686
state child  0  reward: 0.0591154184220686
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2, 5}, 0: {11}, 11: {0}, 5: {3}, 4: {6}, 6: {4, 7}, 7: {10, 6}, 10: {7}, 8: {12}, 12: {8}})
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT']), ('Sa4', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT']), ('Sa4', ['N-Sa1-Sa2-Sa3-Sa4', 'OUT'])])
instant reward: 0 cumulate reward:  0.0591154184220686 planning time: 0 cumulate planning time: 117
effis of topo: [{'parameter': '0.9', 'efficiency': {'efficiency': 0.49, 'output_voltage': 50.0}, 'output_voltage': 50.0}]
#####################Game:   steps:  16   average cumulate reward:  0.0591154184220686
title result with parameter:0.9 
-1 , 10 : 16.0
[{'parameter': '0.9', 'efficiency': {'efficiency': 0.49, 'output_voltage': 50.0}, 'output_voltage': 50.0}]
hash counter 3
hash length 112

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - GND', 'VOUT - L - L - L - Sa - GND', 'VOUT - L - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L2-L3', 'OUT']), ('L1', ['IN', 'N-L1-Sa0']), ('L2', ['IN', 'N-L0-L2-L3']), ('L3', ['IN', 'N-L0-L2-L3']), ('Sa0', ['0', 'N-L1-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - GND', 'VOUT - L - L - L - Sa - GND', 'VOUT - L - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L2-L3', 'OUT']), ('L1', ['IN', 'N-L1-Sa0']), ('L2', ['IN', 'N-L0-L2-L3']), ('L3', ['IN', 'N-L0-L2-L3']), ('Sa0', ['0', 'N-L1-Sa0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - GND', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-C2-Sa0']), ('C2', ['IN', 'N-C1-C2-Sa0']), ('C3', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C1-C2-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - GND', 'VIN - Sa - C - GND', 'VIN - C - C - GND', 'VOUT - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-C2-Sa0']), ('C2', ['IN', 'N-C1-C2-Sa0']), ('C3', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C1-C2-Sa0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - C - Sb - GND', 'VIN - Sb - L - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb2', 'N-C0-Sb1']), ('L0', ['N-C0-L0-Sb2', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT']), ('Sb2', ['0', 'N-C0-L0-Sb2'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sb - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2', 'OUT']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['IN', 'N-L0-L1-L2']), ('L3', ['IN', 'N-L3-Sb0']), ('Sb0', ['0', 'N-L3-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-L2', 'OUT']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['IN', 'N-L0-L1-L2']), ('L3', ['IN', 'N-L3-Sb0']), ('Sb0', ['0', 'N-L3-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - L - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - C - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1', 'OUT']), ('L0', ['N-C0-L0-L1', 'N-L0-Sb0']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - C - L - GND', 'VOUT - C - L - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-L1', 'OUT']), ('L0', ['N-C0-L0-L1', 'N-L0-Sb0']), ('L1', ['0', 'N-C0-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-Sb0-Sb2-Sb3']), ('Sb1', ['0', 'N-L0-Sb0-Sb1']), ('Sb2', ['N-Sb0-Sb2-Sb3', 'OUT']), ('Sb3', ['N-Sb0-Sb2-Sb3', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - C - L - VOUT', 'VIN - L - C - L - VOUT', 'VIN - L - C - Sa - GND', 'VIN - L - C - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-L1-L2']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('L1', ['IN', 'N-C0-L1-L2']), ('L2', ['IN', 'N-C0-L1-L2']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - C - Sa - GND', 'VOUT - L - L - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['IN', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - C - Sa - GND', 'VOUT - L - L - L - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0']), ('L0', ['IN', 'N-C0-L0']), ('L1', ['IN', 'N-L1-L2']), ('L2', ['N-L1-L2', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - C - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sa2']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-C0-Sa2']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - L - C - L - VOUT', 'VIN - Sa - L - C - GND', 'VIN - Sa - L - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('C2', ['IN', 'N-C2-Sa0-Sb0']), ('Sa0', ['N-C1-Sa0', 'N-C2-Sa0-Sb0']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('C2', ['IN', 'N-C2-Sa0-Sb0']), ('Sa0', ['N-C1-Sa0', 'N-C2-Sa0-Sb0']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - Sa - VOUT', 'VIN - L - Sb - L - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L2-Sb0']), ('L1', ['N-L1-Sa0-Sb0', 'OUT']), ('L2', ['IN', 'N-L0-L2-Sb0']), ('Sa0', ['N-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['N-L0-L2-Sb0', 'N-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sa - GND', 'VIN - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-Sb1-Sb2-Sb3']), ('Sb2', ['IN', 'N-Sb1-Sb2-Sb3']), ('Sb3', ['N-Sb1-Sb2-Sb3', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - L - L - GND', 'VIN - L - Sa - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['0', 'N-L1-L2']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - L - L - GND', 'VIN - L - Sa - L - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('L1', ['N-L1-L2', 'OUT']), ('L2', ['0', 'N-L1-L2']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - L - C - GND', 'VIN - C - L - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'N-C2-L0-Sa0']), ('L0', ['N-C2-L0-Sa0', 'OUT']), ('Sa0', ['N-C2-L0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - C - L - C - GND', 'VIN - C - L - C - GND', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('C2', ['IN', 'N-C2-L0-Sa0']), ('L0', ['N-C2-L0-Sa0', 'OUT']), ('Sa0', ['N-C2-L0-Sa0', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2-Sa3-Sa4', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sa3-Sa4']), ('Sa2', ['IN', 'N-Sa0-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa0-Sa2-Sa3-Sa4', 'N-Sa1-Sa3-Sa4']), ('Sa4', ['N-Sa0-Sa2-Sa3-Sa4', 'N-Sa1-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - GND', 'VOUT - L - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - GND', 'VOUT - L - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - Sb - C - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - Sa - Sa - GND', 'VIN - Sb - L - Sa - Sa - GND', 'VOUT - Sb - Sa - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  1
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VIN - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sa0', ['N-L0-L1-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  1
has to be unconnected
has to be unconnected
['VIN - L - Sa - C - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-L0-Sa0-Sb0']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'N-L0-Sb2']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb2', ['IN', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - Sb - C - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - Sb - GND', 'VOUT - Sa - Sb - L - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb1']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-C0-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - L - VOUT', 'VIN - C - L - VOUT', 'VIN - C - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sa0']), ('L0', ['N-C0-L0-L1-Sa0', 'OUT']), ('L1', ['N-C0-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-C0-L0-L1-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - C - C - GND', 'VOUT - Sb - L - C - C - GND', 'VOUT - Sa - L - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0']), ('C1', ['0', 'N-C0-C1']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - C - C - GND', 'VOUT - Sb - L - C - C - GND', 'VOUT - Sa - L - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0']), ('C1', ['0', 'N-C0-C1']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - Sb - Sa - VOUT', 'VIN - C - Sa - C - Sa - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'N-C1-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-C1-Sa1-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-C1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - VOUT', 'VIN - C - Sa - C - Sa - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'N-C1-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['0', 'N-C1-Sa1-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'N-C1-Sa1-Sb0'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - L - Sb - L - GND', 'VIN - Sa - L - Sb - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['0', 'N-C0-L1-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['N-C0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - C - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb1', 'N-C0-Sa0-Sb0']), ('C1', ['N-C0-C1-Sa0-Sb1', 'OUT']), ('Sa0', ['N-C0-C1-Sa0-Sb1', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'N-C0-C1-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa1-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-C1-Sa1-Sb0']), ('Sb0', ['N-C0-C1-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - Sb - C - GND', 'VIN - Sa - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - Sa - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa1-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-C1-Sa1-Sb0']), ('Sb0', ['N-C0-C1-Sa1-Sb0', 'OUT'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.00150191070187599
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 1.2182975107981962e-07
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 29 cumulate planning time: 29
sim.current.step 1
root offset is:  1
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0-Sb1', 'N-C0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0-Sb1', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-C0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0-Sb1', 'N-C0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0-Sb1', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-C0-Sa0-Sb0-Sb1'])])
['VIN - Sb - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - L - Sb - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['IN', 'N-L1-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - C - C - Sb - Sa - GND', 'VOUT - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['IN', 'N-C0-C1']), ('C2', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - GND', 'VOUT - C - C - Sb - Sa - GND', 'VOUT - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['IN', 'N-C0-C1']), ('C2', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VOUT - L - Sb - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb2', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1']), ('Sb2', ['IN', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VOUT - L - Sb - Sb - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sb2', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-Sa0-Sb1']), ('Sb2', ['IN', 'N-L0-Sb2'])])
['VIN - Sb - C - Sa - VOUT', 'VIN - L - C - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - C - Sb - C - GND', 'VOUT - Sa - C - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0-Sb0', 'N-C1-Sa0']), ('L0', ['IN', 'N-C1-L0-Sb0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C1-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - Sa - C - Sb - VOUT', 'VIN - L - Sb - Sb - C - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - L - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VOUT - L - Sa - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['N-Sa1-Sb0', 'N-Sa1-Sb1']), ('Sb0', ['0', 'N-Sa1-Sb0']), ('Sb1', ['IN', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sa - Sa - VOUT', 'VIN - C - Sb - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sb0-Sb1']), ('Sb0', ['0', 'N-Sa1-Sb0-Sb1']), ('Sb1', ['N-C0-Sb1', 'N-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sa - GND', 'VIN - C - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sa - GND', 'VIN - C - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sa - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - L - Sa - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'N-Sa1-Sa2-Sb0']), ('Sa2', ['0', 'N-Sa1-Sa2-Sb0']), ('Sb0', ['N-Sa1-Sa2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sa2', 'N-Sa1-Sa3-Sb0']), ('Sa2', ['IN', 'N-Sa1-Sa2']), ('Sa3', ['N-Sa1-Sa3-Sb0', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'N-Sa1-Sa3-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sa2', 'N-Sa1-Sa3-Sb0']), ('Sa2', ['IN', 'N-Sa1-Sa2']), ('Sa3', ['N-Sa1-Sa3-Sb0', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'N-Sa1-Sa3-Sb0'])])
['VIN - Sa - Sa - C - VOUT', 'VIN - Sa - C - Sb - GND', 'VOUT - C - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa1', 'N-C0-Sb0']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0-Sa1', 'N-C1-Sa0']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - C - Sa - VOUT', 'VIN - Sb - L - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - C - Sa - VOUT', 'VIN - Sb - L - C - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0']), ('C1', ['0', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-Sb0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - Sa - Sb - GND', 'VIN - Sb - L - Sa - L - GND', 'VOUT - L - Sa - Sb - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('L1', ['N-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-L1-Sa0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - Sb - Sb - L - GND', 'VOUT - Sa - Sb - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - L - L - Sb - GND', 'VOUT - Sa - Sb - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb1']), ('L1', ['N-L0-L1', 'N-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L1-Sb0']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - L - L - Sb - GND', 'VOUT - Sa - Sb - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sb1']), ('L1', ['N-L0-L1', 'N-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L1-Sb0']), ('Sb1', ['0', 'N-L0-Sb1'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - Sb - Sa - C - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - Sb - C - GND', 'VIN - L - C - GND', 'VOUT - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0']), ('C1', ['N-C1-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'N-C1-Sa0']), ('Sb0', ['IN', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
action  0  : node on 1
action child  0  avg_return: 0.0005729382253261645
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.0038133779305047385
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 12 cumulate planning time: 41
sim.current.step 1
root offset is:  1
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - Sa - L - GND', 'VIN - L - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('C1', ['0', 'IN']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - C - L - VOUT', 'VIN - Sa - VOUT', 'VIN - C - Sa - GND', 'VOUT - L - C - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['N-C1-L0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - C - L - VOUT', 'VIN - C - Sa - L - VOUT', 'VIN - C - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sa0-Sa1']), ('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['N-C0-L1-Sa0-Sa1', 'OUT']), ('Sa0', ['N-C0-L1-Sa0-Sa1', 'N-L0-Sa0']), ('Sa1', ['0', 'N-C0-L1-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - Sa - L - VOUT', 'VIN - C - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sa0-Sa1']), ('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['N-C0-L1-Sa0-Sa1', 'OUT']), ('Sa0', ['N-C0-L1-Sa0-Sa1', 'N-L0-Sa0']), ('Sa1', ['0', 'N-C0-L1-Sa0-Sa1'])])
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - L - C - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - C - L - Sa - GND', 'VIN - L - Sa - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L1-Sa1', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['IN', 'N-C0-L1-Sa1']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['N-C0-L1-Sa1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-L2-Sa0', 'OUT']), ('L0', ['N-C0-L0-L1-L2-Sa0', 'OUT']), ('L1', ['N-C0-L0-L1-L2-Sa0', 'OUT']), ('L2', ['IN', 'N-C0-L0-L1-L2-Sa0']), ('Sa0', ['0', 'N-C0-L0-L1-L2-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sa - GND', 'VIN - L - C - GND', 'VIN - C - GND', 'VOUT - Sa - L - Sa - GND', 'VOUT - Sa - L - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('C1', ['0', 'IN']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - Sa - L - Sa - GND', 'VIN - Sa - C - GND', 'VIN - L - L - C - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - C - VOUT', 'VIN - Sa - L - Sa - GND', 'VIN - Sa - C - GND', 'VIN - L - L - C - GND', 'VIN - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0']), ('Sa1', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - C - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - Sa - L - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - Sa - VOUT', 'VIN - L - L - C - Sa - VOUT', 'VIN - L - C - C - GND', 'VIN - L - L - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'N-C1-L0-L1']), ('L0', ['0', 'N-C1-L0-L1']), ('L1', ['IN', 'N-C1-L0-L1']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - L - GND', 'VIN - Sa - C - GND', 'VOUT - C - Sa - L - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sa1']), ('C1', ['N-C0-C1-Sa0-Sa1', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-C0-C1-Sa0-Sa1', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-C0-C1-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - Sa - L - GND', 'VIN - Sa - C - GND', 'VOUT - C - Sa - L - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sa1']), ('C1', ['N-C0-C1-Sa0-Sa1', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-C0-C1-Sa0-Sa1', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-C0-C1-Sa0-Sa1'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - C - Sa - VOUT', 'VIN - Sa - C - L - VOUT', 'VIN - Sa - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-L1-Sa0', 'N-C0-Sa1']), ('L0', ['N-C0-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-C0-L0-L1-Sa0']), ('Sa0', ['N-C0-L0-L1-Sa0', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - C - L - L - C - VOUT', 'VIN - Sa - L - L - GND', 'VIN - C - GND', 'VOUT - C - L - L - GND', 'VOUT - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L1-Sa0', 'OUT']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-C1-L1-Sa0', 'N-L0-L1']), ('Sa0', ['IN', 'N-C1-L1-Sa0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - C - L - L - C - VOUT', 'VIN - Sa - L - L - GND', 'VIN - C - GND', 'VOUT - C - L - L - GND', 'VOUT - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L1-Sa0', 'OUT']), ('L0', ['0', 'N-L0-L1']), ('L1', ['N-C1-L1-Sa0', 'N-L0-L1']), ('Sa0', ['IN', 'N-C1-L1-Sa0'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - GND', 'VOUT - L - L - L - Sa - GND', 'VOUT - L - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('L1', ['N-L1-L2-L3', 'OUT']), ('L2', ['N-L1-L2-L3', 'OUT']), ('L3', ['IN', 'N-L1-L2-L3']), ('Sa0', ['0', 'N-L0-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - GND', 'VOUT - L - L - L - Sa - GND', 'VOUT - L - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('L1', ['N-L1-L2-L3', 'OUT']), ('L2', ['N-L1-L2-L3', 'OUT']), ('L3', ['IN', 'N-L1-L2-L3']), ('Sa0', ['0', 'N-L0-Sa0'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
action  0  : node on 2
action child  0  avg_return: 6.064608595288474e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.016524312819517654
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 8 cumulate planning time: 49
sim.current.step 1
root offset is:  1
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - C - Sa - GND', 'VIN - Sa - Sa - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sa3']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['0', 'N-C0-Sa3'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - C - VOUT', 'VIN - Sa - C - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa2-Sa3', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa2']), ('Sa2', ['N-C0-Sa2-Sa3', 'N-Sa1-Sa2']), ('Sa3', ['0', 'N-C0-Sa2-Sa3'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - C - C - C - Sa - GND', 'VOUT - C - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C2-Sa1']), ('C1', ['IN', 'OUT']), ('C2', ['N-C0-C2-Sa1', 'N-C2-Sa0']), ('Sa0', ['0', 'N-C2-Sa0']), ('Sa1', ['IN', 'N-C0-C2-Sa1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sa0']), ('C1', ['IN', 'N-C0-C1-C2-Sa0']), ('C2', ['N-C0-C1-C2-Sa0', 'N-C2-Sa1']), ('Sa0', ['0', 'N-C0-C1-C2-Sa0']), ('Sa1', ['N-C2-Sa1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - Sa - GND', 'VIN - C - Sa - GND', 'VOUT - Sa - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sa0']), ('C1', ['IN', 'N-C0-C1-C2-Sa0']), ('C2', ['N-C0-C1-C2-Sa0', 'N-C2-Sa1']), ('Sa0', ['0', 'N-C0-C1-C2-Sa0']), ('Sa1', ['N-C2-Sa1', 'OUT'])])
PCC-17859 violations

['VIN - C - C - VOUT', 'VIN - C - C - C - GND', 'VIN - C - C - C - Sa - GND', 'VOUT - C - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-C2']), ('C2', ['N-C1-C2', 'OUT']), ('C3', ['N-C3-Sa0', 'OUT']), ('Sa0', ['0', 'N-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - C - C - GND', 'VIN - C - C - C - Sa - GND', 'VOUT - C - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-C2']), ('C2', ['N-C1-C2', 'OUT']), ('C3', ['N-C3-Sa0', 'OUT']), ('Sa0', ['0', 'N-C3-Sa0'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - Sa - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - Sa - C - VOUT', 'VIN - C - Sa - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - C - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa1', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])
PCC-17859 violations

['VIN - C - Sa - C - VOUT', 'VIN - C - Sa - C - C - VOUT', 'VIN - C - Sa - C - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('C2', ['0', 'OUT']), ('C3', ['IN', 'N-C3-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'N-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - C - VOUT', 'VIN - C - Sa - C - C - VOUT', 'VIN - C - Sa - C - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('C2', ['0', 'OUT']), ('C3', ['IN', 'N-C3-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'N-C3-Sa0'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - C - C - Sa - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['N-C1-Sa1', 'OUT']), ('C2', ['0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'N-C1-Sa1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - C - C - Sa - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['N-C1-Sa1', 'OUT']), ('C2', ['0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'N-C1-Sa1'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - C - C - GND', 'VIN - Sa - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'N-C2-C3-Sa0']), ('C3', ['IN', 'N-C2-C3-Sa0']), ('Sa0', ['IN', 'N-C2-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - VOUT', 'VIN - C - C - GND', 'VIN - Sa - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - C - C - GND', 'VOUT - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['0', 'N-C2-C3-Sa0']), ('C3', ['IN', 'N-C2-C3-Sa0']), ('Sa0', ['IN', 'N-C2-C3-Sa0'])])
PCC-17859 violations

['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - C - Sa - GND', 'VIN - Sa - Sa - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa2', 'OUT']), ('C1', ['N-C0-C1-Sa2', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-C0-C1-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - C - Sa - GND', 'VIN - Sa - Sa - C - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa2', 'OUT']), ('C1', ['N-C0-C1-Sa2', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-C0-C1-Sa2'])])
PCC-17859 violations

has to be unconnected
['VIN - C - VOUT', 'VIN - C - C - Sa - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sa - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0-Sa1', 'OUT']), ('C2', ['N-C2-Sa0', 'OUT']), ('Sa0', ['N-C1-Sa0-Sa1', 'N-C2-Sa0']), ('Sa1', ['0', 'N-C1-Sa0-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - C - Sa - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sa - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0-Sa1', 'OUT']), ('C2', ['N-C2-Sa0', 'OUT']), ('Sa0', ['N-C1-Sa0-Sa1', 'N-C2-Sa0']), ('Sa1', ['0', 'N-C1-Sa0-Sa1'])])
['VIN - C - Sa - C - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - Sa - C - Sa - GND', 'VOUT - Sa - C - Sa - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa1', 'N-C0-Sa2']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sa2', ['N-C0-Sa2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - C - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VIN - Sa - Sa - C - Sa - GND', 'VOUT - Sa - C - Sa - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa1', 'N-C0-Sa2']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1']), ('Sa2', ['N-C0-Sa2', 'OUT'])])
['VIN - C - C - C - Sa - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sa - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-C2-Sa0']), ('C1', ['N-C0-C1', 'N-C1-Sa1']), ('C2', ['IN', 'N-C0-C2-Sa0']), ('Sa0', ['0', 'N-C0-C2-Sa0']), ('Sa1', ['N-C1-Sa1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - C - C - Sa - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sa - C - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-C2-Sa0']), ('C1', ['N-C0-C1', 'N-C1-Sa1']), ('C2', ['IN', 'N-C0-C2-Sa0']), ('Sa0', ['0', 'N-C0-C2-Sa0']), ('Sa1', ['N-C1-Sa1', 'OUT'])])
has to be unconnected
['VIN - C - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - C - GND', 'VOUT - Sa - C - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa2']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['N-C1-Sa2', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C2-Sa1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - C - C - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VIN - C - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C2-Sa1'])])
PCC-17859 violations

['VIN - C - C - C - VOUT', 'VIN - C - Sa - C - GND', 'VOUT - C - C - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['IN', 'N-C1-C2-Sa0']), ('C2', ['N-C0-C2', 'N-C1-C2-Sa0']), ('C3', ['0', 'N-C3-Sa0']), ('Sa0', ['N-C1-C2-Sa0', 'N-C3-Sa0'])])
find_one_analytics_result using:  0
['VIN - C - C - C - VOUT', 'VIN - C - Sa - C - GND', 'VOUT - C - C - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['IN', 'N-C1-C2-Sa0']), ('C2', ['N-C0-C2', 'N-C1-C2-Sa0']), ('C3', ['0', 'N-C3-Sa0']), ('Sa0', ['N-C1-C2-Sa0', 'N-C3-Sa0'])])
['VIN - Sa - VOUT', 'VIN - Sa - C - Sa - C - GND', 'VIN - Sa - C - Sa - Sa - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('C1', ['N-C1-Sa1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'N-C1-Sa1']), ('Sa2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - C - Sa - C - GND', 'VIN - Sa - C - Sa - Sa - GND', 'VOUT - C - Sa - C - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('C1', ['N-C1-Sa1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'N-C1-Sa1']), ('Sa2', ['IN', 'OUT'])])
action  0  : node on 3
action child  0  avg_return: 7.746244865662258e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.02478646922927648
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 31 cumulate planning time: 80
sim.current.step 1
root offset is:  1
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa2-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa4'])])
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa2-Sa4', 'N-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa2']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['0', 'N-Sa3-Sa4']), ('Sa4', ['N-Sa2-Sa4', 'N-Sa3-Sa4'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa4', 'N-Sa0-Sa2-Sa3']), ('Sa1', ['N-Sa0-Sa1-Sa4', 'OUT']), ('Sa2', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa0-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa1-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2-Sa4', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sa2-Sa4', 'OUT']), ('Sa2', ['N-Sa0-Sa1-Sa2-Sa4', 'N-Sa2-Sa3']), ('Sa3', ['0', 'N-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa1-Sa2-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2-Sa3-Sa4', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa0-Sa2-Sa3-Sa4', 'N-Sa1-Sa2-Sa3']), ('Sa3', ['N-Sa0-Sa2-Sa3-Sa4', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa2-Sa3-Sa4'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa2-Sa3-Sa4']), ('Sa1', ['0', 'N-Sa1-Sa2-Sa3']), ('Sa2', ['N-Sa0-Sa2-Sa3-Sa4', 'N-Sa1-Sa2-Sa3']), ('Sa3', ['N-Sa0-Sa2-Sa3-Sa4', 'N-Sa1-Sa2-Sa3']), ('Sa4', ['N-Sa0-Sa2-Sa3-Sa4', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['N-Sa0-Sa1-Sa2-Sa3', 'OUT']), ('Sa2', ['IN', 'N-Sa0-Sa1-Sa2-Sa3']), ('Sa3', ['IN', 'N-Sa0-Sa1-Sa2-Sa3']), ('Sa4', ['0', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa2-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['N-Sa0-Sa1-Sa2-Sa3', 'OUT']), ('Sa2', ['IN', 'N-Sa0-Sa1-Sa2-Sa3']), ('Sa3', ['IN', 'N-Sa0-Sa1-Sa2-Sa3']), ('Sa4', ['0', 'N-Sa0-Sa4'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'OUT']), ('Sa3', ['N-Sa1-Sa2-Sa3', 'OUT']), ('Sa4', ['0', 'N-Sa1-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sa2-Sa3', 'N-Sa1-Sa4']), ('Sa2', ['N-Sa1-Sa2-Sa3', 'OUT']), ('Sa3', ['N-Sa1-Sa2-Sa3', 'OUT']), ('Sa4', ['0', 'N-Sa1-Sa4'])])
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.005186031451147095
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 9 cumulate planning time: 89
sim.current.step 5
root offset is:  1
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sa3-Sa4']), ('Sa1', ['N-Sa0-Sa1-Sa3-Sa4', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa0-Sa1-Sa3-Sa4', 'N-Sa2-Sa3-Sa4']), ('Sa4', ['N-Sa0-Sa1-Sa3-Sa4', 'N-Sa2-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa2-Sa3-Sa4']), ('Sa4', ['0', 'N-Sa2-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa2', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa2-Sa3-Sa4']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa2-Sa3-Sa4']), ('Sa4', ['0', 'N-Sa2-Sa3-Sa4'])])
action  0  : edge on [1, 9]
action child  0  avg_return: 0.0008539926653085509
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  1  : edge on [1, 5]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  2  : edge on [1, 11]
action child  2  avg_return: 0.012148416055458168
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  3  : edge on [1, 7]
action child  3  avg_return: 2.641403058398968e-07
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  4  : edge on [1, 3]
action child  4  avg_return: 0.015826129533917453
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 91
sim.current.step 6
root offset is:  1
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa3', 'N-Sa0-Sa4']), ('Sa1', ['IN', 'OUT']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sa4', ['IN', 'N-Sa0-Sa4'])])
find_one_analytics_result using:  0
action  0  : edge on [2, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {5}, 5: {2}})
action  1  : edge on [2, 7]
action child  1  avg_return: 0.02478646922927648
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}})
action  2  : edge on [2, 11]
action child  2  avg_return: 0.019705175916626995
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {11}, 11: {2}})
action  3  : edge on [2, 9]
action child  3  avg_return: 0.02478646922927648
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {9}, 9: {2}})
action  4  : edge on [2, 4]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {4}, 4: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 91
sim.current.step 7
root offset is:  1
has to be unconnected
action  0  : edge on [0, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}})
action  1  : edge on [0, 9]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}, 0: {9}, 9: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 91
sim.current.step 8
root offset is:  1
['VIN - Sa - Sa - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1-Sa3']), ('Sa1', ['N-Sa0-Sa1-Sa3', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa1-Sa2', 'OUT']), ('Sa3', ['N-Sa0-Sa1-Sa3', 'N-Sa3-Sa4']), ('Sa4', ['IN', 'N-Sa3-Sa4'])])
find_one_analytics_result using:  0
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.00015737459827490203
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 91
sim.current.step 9
root offset is:  1
action  0  : edge on [4, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}, 4: {8}, 8: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 91
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [5, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}, 4: {8}, 8: {4, 5}, 5: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 91
sim.current.step 11
root offset is:  1
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa2-Sa3-Sa4', 'OUT']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa2-Sa3-Sa4']), ('Sa4', ['IN', 'N-Sa2-Sa3-Sa4'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'N-Sa1-Sa3']), ('Sa2', ['N-Sa2-Sa3-Sa4', 'OUT']), ('Sa3', ['N-Sa1-Sa3', 'N-Sa2-Sa3-Sa4']), ('Sa4', ['IN', 'N-Sa2-Sa3-Sa4'])])
action  0  : edge on [6, 9]
action child  0  avg_return: 0.046044420445047037
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}, 4: {8}, 8: {4, 5}, 5: {8}, 6: {9}, 9: {6}})
instant reward: 0 cumulate reward:  0 planning time: 2 cumulate planning time: 93
sim.current.step 12
root offset is:  1
has to be unconnected
action  0  : edge on [7, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {9, 2}, 0: {11}, 11: {0}, 4: {8}, 8: {4, 5}, 5: {8}, 6: {9}, 9: {6, 7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 93
sim.current.step 13
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {9, 2}, 0: {11}, 11: {0}, 4: {8}, 8: {4, 5}, 5: {8}, 6: {9}, 9: {6, 7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 93
sim.current.step 14
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {9, 2}, 0: {11}, 11: {0}, 4: {8}, 8: {4, 5}, 5: {8}, 6: {9}, 9: {6, 7}})
has to be unconnected
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 93
sim.current.step 15
has to be unconnected
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right', 'Sa3-left', 'Sa3-right', 'Sa4-left', 'Sa4-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}, 2: {7}, 7: {9, 2}, 0: {11}, 11: {0}, 4: {8}, 8: {4, 5}, 5: {8}, 6: {9}, 9: {6, 7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 93
effis of topo: [{'parameter': '0.9', 'efficiency': {'efficiency': 0.09, 'output_voltage': 57.0}, 'output_voltage': 57.0}]
#####################Game:   steps:  16   average cumulate reward:  0
title result with parameter:0.9 
-1 , 10 : 16.0
[{'parameter': '0.9', 'efficiency': {'efficiency': 0.09, 'output_voltage': 57.0}, 'output_voltage': 57.0}]
hash counter 0
hash length 106

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - L - Sa - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa2', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-L0-Sa2'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - L - Sa - GND', 'VIN - Sa - Sa - C - GND', 'VOUT - L - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa2', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sa2', ['0', 'N-L0-Sa2'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sa2-Sa3-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['N-Sa0-Sa2-Sa3-Sb0', 'OUT']), ('Sa3', ['N-Sa0-Sa2-Sa3-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa2-Sa3-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - C - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0-Sb1', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0-Sb1']), ('Sb0', ['N-C0-C1-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-C1-Sb0-Sb1', 'N-Sb1-Sb2']), ('Sb2', ['0', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - C - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb0-Sb1', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0-Sb1']), ('Sb0', ['N-C0-C1-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-C1-Sb0-Sb1', 'N-Sb1-Sb2']), ('Sb2', ['0', 'N-Sb1-Sb2'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sa - Sb - Sa - GND', 'VIN - L - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sa2']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1-Sa2', 'OUT']), ('Sa2', ['N-L0-Sa1-Sa2', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sa3-Sa4', 'OUT']), ('Sa1', ['N-Sa0-Sa1-Sa3-Sa4', 'N-Sa1-Sa2']), ('Sa2', ['0', 'N-Sa1-Sa2']), ('Sa3', ['IN', 'N-Sa0-Sa1-Sa3-Sa4']), ('Sa4', ['IN', 'N-Sa0-Sa1-Sa3-Sa4'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - Sb - Sa - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - Sb - Sa - GND', 'VOUT - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb1']), ('L0', ['IN', 'N-C0-L0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-L0-Sb1', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - C - Sb - VOUT', 'VIN - L - C - Sa - Sb - VOUT', 'VIN - L - C - Sa - GND', 'VIN - L - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0']), ('C1', ['N-C0-C1-L0', 'N-C1-Sa0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sa0', ['0', 'N-C1-Sa0-Sb0']), ('Sb0', ['N-C1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - Sb - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1-Sb0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - L - L - Sa - GND', 'VOUT - Sa - Sb - L - Sa - GND', 'VOUT - Sa - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sb - L - L - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-L2']), ('L1', ['0', 'N-L0-L1-Sa0']), ('L2', ['N-L0-L2', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - L - L - VOUT', 'VIN - Sb - L - L - L - GND', 'VIN - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-L2']), ('L1', ['0', 'N-L0-L1-Sa0']), ('L2', ['N-L0-L2', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - L - Sa - L - VOUT', 'VIN - L - C - L - Sa - GND', 'VIN - L - Sa - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa1', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa1']), ('L1', ['N-L1-Sa0-Sa1', 'OUT']), ('Sa0', ['0', 'N-L1-Sa0-Sa1']), ('Sa1', ['N-C0-L0-Sa1', 'N-L1-Sa0-Sa1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sb - C - VOUT', 'VIN - Sb - Sb - L - L - GND', 'VOUT - C - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'OUT']), ('L0', ['N-C0-L0-Sb1', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-L0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - C - VOUT', 'VIN - Sb - Sb - L - L - GND', 'VOUT - C - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'OUT']), ('L0', ['N-C0-L0-Sb1', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-L0-Sb1', 'N-Sb0-Sb1'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - C - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - Sb - L - GND', 'VOUT - C - Sb - L - GND', 'VOUT - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'OUT']), ('L0', ['0', 'N-L0-L1-Sb1']), ('L1', ['0', 'N-L0-L1-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-L0-L1-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - L - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('C1', ['0', 'N-C1-L0-L1']), ('L0', ['N-C0-L0', 'N-C1-L0-L1']), ('L1', ['IN', 'N-C1-L0-L1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - Sa - C - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sa0']), ('L0', ['0', 'N-C0-L0-L1-Sa0']), ('L1', ['0', 'N-C0-L0-L1-Sa0']), ('Sa0', ['N-C0-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sb - C - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-Sa1-Sb1', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sb - Sa - Sb - C - Sa - GND', 'VOUT - Sb - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0', 'N-C0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['N-Sa1-Sb1', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-Sa1-Sb1'])])
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sa - Sb - Sb - GND', 'VIN - Sb - Sa - Sb - GND', 'VOUT - Sa - Sb - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sb1-Sb3', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1-Sb3']), ('Sb2', ['0', 'N-Sb2-Sb3']), ('Sb3', ['N-Sa0-Sb1-Sb3', 'N-Sb2-Sb3'])])
find_one_analytics_result using:  0
['VIN - Sb - L - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VOUT - C - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('C1', ['N-C1-L0-Sb0', 'N-C1-Sa0']), ('L0', ['N-C0-L0', 'N-C1-L0-Sb0']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sb0', ['IN', 'N-C1-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VOUT - C - L - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('C1', ['N-C1-L0-Sb0', 'N-C1-Sa0']), ('L0', ['N-C0-L0', 'N-C1-L0-Sb0']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sb0', ['IN', 'N-C1-L0-Sb0'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sa - Sb - Sa - L - GND', 'VOUT - Sa - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sa - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sa - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'N-Sa0-Sa2']), ('Sa1', ['0', 'N-L0-Sa0-Sa1-Sb0']), ('Sa2', ['N-Sa0-Sa2', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - C - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - C - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - Sb - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - C - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sb - Sa - L - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0-Sb2']), ('Sb0', ['N-Sa0-Sb0-Sb2', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-Sa0-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sa - L - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sb0-Sb2']), ('Sb0', ['N-Sa0-Sb0-Sb2', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1']), ('Sb2', ['0', 'N-Sa0-Sb0-Sb2'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - Sb - L - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sa - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sa - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('L1', ['0', 'N-L1-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0']), ('Sb1', ['IN', 'N-L1-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.97 vout: 49.0
['VIN - Sb - L - Sa - Sb - VOUT', 'VIN - Sb - L - Sa - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb1']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - Sa - L - GND', 'VIN - C - Sb - Sa - Sa - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'N-L0-Sa2-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sa2', ['0', 'N-L0-Sa2-Sb0']), ('Sb0', ['IN', 'N-L0-Sa2-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - Sb - Sb - VOUT', 'VIN - C - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sa0', ['0', 'N-Sa0-Sb2']), ('Sb0', ['N-Sb0-Sb1-Sb2', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-Sb0-Sb1-Sb2']), ('Sb2', ['N-Sa0-Sb2', 'N-Sb0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.015157850489877235
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 7.039921410711887e-08
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 20 cumulate planning time: 20
sim.current.step 1
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - Sb - L - Sa - GND', 'VOUT - Sb - Sb - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - Sb - C - Sb - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'N-C0-Sb1']), ('C1', ['IN', 'N-C1-Sa0-Sb1']), ('Sa0', ['0', 'N-C1-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-C1-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sb - C - Sb - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'N-C0-Sb1']), ('C1', ['IN', 'N-C1-Sa0-Sb1']), ('Sa0', ['0', 'N-C1-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-C1-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - C - C - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('C2', ['0', 'N-C2-Sb0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - C - Sa - C - GND', 'VOUT - C - GND', 'VOUT - Sa - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('C2', ['0', 'N-C2-Sb0']), ('Sa0', ['N-C1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-C2-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - L - Sb - GND', 'VOUT - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - Sa - VOUT', 'VIN - C - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - L - GND', 'VOUT - Sa - L - GND', 'VOUT - Sa - C - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1-Sa0']), ('L0', ['0', 'N-L0-Sb0']), ('L1', ['0', 'N-C0-L1-Sa0']), ('Sa0', ['N-C0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - Sa - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sb - C - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - C - Sb - Sa - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
['VIN - L - Sb - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-C0-L0-Sa0-Sa1-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - L - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa1-Sb0']), ('L1', ['N-L0-L1-Sa1-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-L0-L1-Sa1-Sb0']), ('Sb0', ['N-L0-L1-Sa1-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sb - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sa2', 'N-C0-Sb0']), ('Sa0', ['N-C0-Sa0-Sa2', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-C0-Sa0-Sa2']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - C - Sb - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sb - C - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sa2', 'N-C0-Sb0']), ('Sa0', ['N-C0-Sa0-Sa2', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sa2', ['IN', 'N-C0-Sa0-Sa2']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
['VIN - Sb - Sa - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sa - GND', 'VIN - C - L - Sa - Sa - GND', 'VOUT - L - Sa - Sa - GND', 'VOUT - C - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sa - L - Sb - GND', 'VOUT - Sb - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['IN', 'N-Sa1-Sb1']), ('Sb0', ['0', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sb - Sa - Sa - GND', 'VOUT - Sa - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'N-Sa0-Sa3']), ('Sa1', ['0', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sa3', ['0', 'N-Sa0-Sa3']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
action  0  : node on -1
action child  0  avg_return: 0.001047819006851326
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.009619202814256855
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 17 cumulate planning time: 37
sim.current.step 2
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sa - VOUT', 'VIN - Sb - L - GND', 'VIN - C - GND', 'VOUT - Sa - Sa - Sb - L - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - C - VOUT', 'VIN - L - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - C - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - C - VOUT', 'VIN - L - C - VOUT', 'VIN - Sa - Sb - C - VOUT', 'VIN - Sa - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - C - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - Sa - C - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - L - C - GND', 'VOUT - C - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - C - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - L - C - GND', 'VOUT - C - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - Sa - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C2', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sa0-Sb0'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - C - Sa - Sa - GND', 'VOUT - C - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa2', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['0', 'N-Sa1-Sa2']), ('Sa2', ['N-C0-Sa2', 'N-Sa1-Sa2']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - Sa - L - Sb - Sa - GND', 'VIN - L - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND', 'VOUT - Sa - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 2.0765999354081018e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.011185086728193327
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 3 cumulate planning time: 40
sim.current.step 3
root offset is:  1
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0-Sb1']), ('Sb1', ['N-L0-L1-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - Sa - L - Sa - GND', 'VOUT - Sb - Sa - L - Sb - GND', 'VOUT - Sb - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0', 'N-L0-Sa1-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['0', 'N-L0-Sa1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sa1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - L - Sb - GND', 'VIN - Sa - Sb - L - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['0', 'N-C0-L0-Sb0']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - L - Sb - Sa - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['N-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.025311724052381492
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 3
action child  1  avg_return: 1.2524389624380672e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 40
sim.current.step 3
root offset is:  1
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb2']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT']), ('Sb2', ['N-Sa0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - Sb - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['0', 'N-Sa0-Sb2']), ('Sb0', ['N-L0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT']), ('Sb2', ['N-Sa0-Sb2', 'OUT'])])
has to be unconnected
has to be unconnected
['VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sa - L - Sb - GND', 'VIN - L - Sa - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('L2', ['N-L2-Sb0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['0', 'N-L2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - Sa - Sb - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sa - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb1', 'OUT']), ('Sa0', ['N-L0-Sa0-Sa1-Sb1', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1-Sb1']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L0-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['VIN - L - Sa - L - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - Sa - L - Sa - Sb - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('L1', ['IN', 'N-L1-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'N-L1-Sa1-Sb0']), ('Sb0', ['0', 'N-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - L - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('L1', ['IN', 'N-L1-Sa0-Sb0-Sb1']), ('Sa0', ['0', 'N-L1-Sa0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sa0-Sb0-Sb1']), ('Sb1', ['N-L1-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - L - Sb - VOUT', 'VIN - Sb - Sb - L - Sa - GND', 'VOUT - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'N-L0-Sb2']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'N-Sb0-Sb2']), ('Sb1', ['N-L0-Sa0-Sb1', 'OUT']), ('Sb2', ['N-L0-Sb2', 'N-Sb0-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.04181378114469123
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.03737535061896962
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 3 cumulate planning time: 43
sim.current.step 3
root offset is:  1
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - L - L - L - GND', 'VOUT - Sb - Sa - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L2']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2', 'N-L1-L2']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - L - L - L - GND', 'VOUT - Sb - Sa - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L2']), ('L1', ['0', 'N-L1-L2']), ('L2', ['N-L0-L2', 'N-L1-L2']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - L - Sb - GND', 'VIN - Sa - L - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('L1', ['N-L1-Sa0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-L1-Sa0-Sb1']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['N-L1-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 4.860107096407009e-13
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.060313823467369035
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 44
sim.current.step 4
root offset is:  1
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - L - Sb - Sb - GND', 'VOUT - Sb - Sa - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb2']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1']), ('Sb2', ['N-Sa0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sa - Sb - L - Sb - GND', 'VOUT - Sa - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb1', 'N-L0-Sb0']), ('L1', ['0', 'N-L0-L1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['0', 'N-L0-L1-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - L - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1']), ('Sb2', ['IN', 'N-Sa0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - Sa - VOUT', 'VIN - L - Sb - GND', 'VOUT - L - Sb - L - Sb - GND', 'VOUT - Sa - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-L1-Sa0-Sb1', 'OUT']), ('Sa0', ['N-L1-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'N-L1-Sa0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
action  0  : node on 1
action child  0  avg_return: 1.7820245510347466e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.10740814161998263
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 5
root offset is:  1
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - L - Sb - L - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sb - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('L1', ['IN', 'N-L1-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'N-L1-Sb0']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.98 vout: 49.0
['VIN - Sb - VOUT', 'VIN - Sb - L - L - VOUT', 'VIN - Sb - L - L - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa0-Sb1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - L - VOUT', 'VIN - Sb - L - L - Sa - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - L - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'N-L0-Sa0-Sb1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sa0-Sb1'])])
PCC-17859 violations

action  0  : edge on [1, 11]
action child  0  avg_return: 0.12145394288295691
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  1  : edge on [1, 3]
action child  1  avg_return: 0.12145369922345475
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  2  : edge on [1, 7]
action child  2  avg_return: 0.2429073984469356
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  3  : edge on [1, 5]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  4  : edge on [1, 9]
action child  4  avg_return: 2.4365950215963923e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 6
root offset is:  1
has to be unconnected
find_one_analytics_result using:  0
action  0  : edge on [2, 5]
action child  0  avg_return: 1.0443772455897661e-13
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {5}, 5: {2}})
action  1  : edge on [2, 3]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {3}, 3: {2}})
action  2  : edge on [2, 11]
action child  2  avg_return: 0.485814796893819
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {11}, 11: {2}})
action  3  : edge on [2, 9]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {9}, 9: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 7
root offset is:  1
['VIN - L - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - Sb - GND', 'VOUT - Sa - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['N-L0-L1-Sa0-Sb0', 'OUT']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['0', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
action  0  : edge on [0, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {11}, 11: {2}, 0: {9}, 9: {0}})
action  1  : edge on [0, 5]
action child  1  avg_return: 5.908238356853384e-10
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}, 2: {11}, 11: {2}, 0: {5}, 5: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 8
root offset is:  1
has to be unconnected
action  0  : edge on [3, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0}, 3: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 9
root offset is:  1
['VIN - L - L - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - Sa - Sb - L - Sb - GND', 'VOUT - Sb - Sa - L - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb1', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sb1'])])
find_one_analytics_result using:  0
action  0  : edge on [4, 9]
action child  0  avg_return: 1.1248376871701635e-09
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0}, 3: {7}, 4: {9}, 9: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [5, 10]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {4}, 10: {5}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {4, 6}, 10: {5}, 6: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 12
root offset is:  1
['VIN - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND', 'VOUT - L - L - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-Sa0-Sb0-Sb1'])])
PCC-17859 violations

action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {4, 6}, 10: {5}, 6: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 13
root offset is:  1
has to be unconnected
action  0  : edge on [8, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {8, 4, 6}, 10: {5}, 6: {9}, 8: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 14
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {8, 4, 6}, 10: {5}, 6: {9}, 8: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 15
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {8, 4, 6}, 10: {5}, 6: {9}, 8: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 16
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {8, 4, 6}, 10: {5}, 6: {9}, 8: {9}})
has to be unconnected
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
sim.current.step 17
has to be unconnected
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sb1-left', 'Sb1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1, 3}, 2: {11}, 11: {2}, 0: {5}, 5: {0, 10}, 3: {7}, 4: {9}, 9: {8, 4, 6}, 10: {5}, 6: {9}, 8: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 44
effis of topo: [{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  20   average cumulate reward:  0
title result with parameter:0.5 
-1 , 10 : 20.0
[{'parameter': '0.5', 'efficiency': {'efficiency': 0.98, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 0
hash length 85

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - C - Sa - VOUT', 'VIN - C - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa3']), ('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['N-Sa1-Sa2', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2']), ('Sa3', ['N-C0-Sa3', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa3']), ('Sa0', ['0', 'N-Sa0-Sa2']), ('Sa1', ['N-Sa1-Sa2', 'OUT']), ('Sa2', ['N-Sa0-Sa2', 'N-Sa1-Sa2']), ('Sa3', ['N-C0-Sa3', 'OUT'])])
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - Sa - VOUT', 'VIN - C - Sa - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa2']), ('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['N-C0-Sa2', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sa - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sa2']), ('Sa0', ['N-Sa0-Sa1', 'N-Sa0-Sb0']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['N-C0-Sa2', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sa - C - GND', 'VIN - Sa - C - Sb - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'N-C1-Sa0-Sb0']), ('Sa0', ['N-C1-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sa - C - GND', 'VIN - Sa - C - Sb - C - GND', 'VOUT - Sa - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'N-C1-Sa0-Sb0']), ('Sa0', ['N-C1-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-C1-Sa0-Sb0'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - C - VOUT', 'VIN - C - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - C - Sb - C - Sa - GND', 'VOUT - Sb - C - L - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C1-L0-Sa0']), ('Sa0', ['0', 'N-C1-L0-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - L - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - C - GND', 'VOUT - Sb - L - Sb - C - GND', 'VOUT - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - C - GND', 'VOUT - Sb - L - Sb - C - GND', 'VOUT - Sb - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-Sb0-Sb1', 'N-Sb1-Sb3']), ('Sb2', ['N-Sb2-Sb4', 'OUT']), ('Sb3', ['0', 'N-Sb1-Sb3']), ('Sb4', ['IN', 'N-Sb2-Sb4'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-Sb0-Sb1', 'N-Sb1-Sb3']), ('Sb2', ['N-Sb2-Sb4', 'OUT']), ('Sb3', ['0', 'N-Sb1-Sb3']), ('Sb4', ['IN', 'N-Sb2-Sb4'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - C - VOUT', 'VIN - Sa - L - Sa - GND', 'VOUT - C - Sb - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('L0', ['N-L0-Sa0', 'N-L0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'N-L0-Sa1']), ('Sb0', ['IN', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - Sa - VOUT', 'VIN - C - VOUT', 'VIN - L - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - Sa - L - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - Sa - VOUT', 'VIN - Sb - Sa - Sa - L - GND', 'VIN - Sb - L - L - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0', 'N-L0-Sa1-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sa1', ['N-L0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - C - Sb - C - VOUT', 'VIN - L - C - VOUT', 'VIN - C - Sb - GND', 'VIN - L - C - C - GND', 'VOUT - C - L - C - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['N-C2-L0', 'OUT']), ('L0', ['IN', 'N-C2-L0']), ('Sb0', ['0', 'N-C0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - C - VOUT', 'VIN - L - C - VOUT', 'VIN - C - Sb - GND', 'VIN - L - C - C - GND', 'VOUT - C - L - C - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('C2', ['N-C2-L0', 'OUT']), ('L0', ['IN', 'N-C2-L0']), ('Sb0', ['0', 'N-C0-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - L - L - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - L - Sb - C - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - Sa - GND', 'VOUT - L - L - Sb - C - GND', 'VOUT - L - L - Sb - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('L0', ['IN', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - C - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - C - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - Sb - C - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VOUT - Sa - Sb - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0', 'N-C0-Sa0']), ('L0', ['N-C0-L0', 'N-L0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - L - Sb - L - VOUT', 'VIN - Sa - L - Sb - GND', 'VIN - L - Sb - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - Sa - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-L1-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sb0-Sb1']), ('Sb1', ['0', 'N-L1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - L - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - L - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'N-C1-L0']), ('C2', ['IN', 'OUT']), ('L0', ['N-C1-L0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - L - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - L - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'N-C1-L0']), ('C2', ['IN', 'OUT']), ('L0', ['N-C1-L0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - C - L - VOUT', 'VIN - Sa - C - Sa - GND', 'VOUT - L - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-L0']), ('C1', ['N-C0-C1-Sa0', 'N-C1-Sa1']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-Sa0']), ('Sa1', ['0', 'N-C1-Sa1'])])
find_one_analytics_result using:  0
['VIN - Sa - C - L - VOUT', 'VIN - Sa - C - Sa - GND', 'VOUT - L - C - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sa0', 'N-C0-L0']), ('C1', ['N-C0-C1-Sa0', 'N-C1-Sa1']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-Sa0']), ('Sa1', ['0', 'N-C1-Sa1'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - C - C - VOUT', 'VIN - L - C - C - VOUT', 'VIN - L - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-C2-Sb0', 'OUT']), ('C1', ['N-C0-C1-C2-Sb0', 'OUT']), ('C2', ['N-C0-C1-C2-Sb0', 'N-C2-L0']), ('L0', ['IN', 'N-C2-L0']), ('Sb0', ['0', 'N-C0-C1-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - C - C - VOUT', 'VIN - L - C - C - VOUT', 'VIN - L - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-C2-Sb0', 'OUT']), ('C1', ['N-C0-C1-C2-Sb0', 'OUT']), ('C2', ['N-C0-C1-C2-Sb0', 'N-C2-L0']), ('L0', ['IN', 'N-C2-L0']), ('Sb0', ['0', 'N-C0-C1-C2-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sa1-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VIN - L - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('L0', ['IN', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sa0', ['N-C0-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sa0-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sa - Sb - L - GND', 'VIN - Sa - Sa - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - Sa - Sb - VOUT', 'VIN - Sb - L - Sb - GND', 'VOUT - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb1', 'N-L0-Sb2']), ('Sa0', ['N-L0-Sa0-Sb1', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-L0-Sa0-Sb1']), ('Sb2', ['IN', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - C - VOUT', 'VIN - Sa - Sb - L - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - C - L - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-L0-Sa0-Sb0']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - Sb - VOUT', 'VIN - Sb - Sa - Sa - GND', 'VOUT - Sb - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'N-L0-Sb1']), ('Sa0', ['N-L0-Sa0-Sb0', 'N-Sa0-Sa1']), ('Sa1', ['0', 'N-Sa0-Sa1']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - Sb - L - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VIN - C - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND', 'VOUT - C - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - Sa - Sb - GND', 'VIN - L - Sa - Sb - GND', 'VOUT - Sa - L - Sa - Sb - GND', 'VOUT - Sa - L - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-Sa0-Sa1-Sb0']), ('Sa2', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 2.0457165594595435e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.008282316902828182
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 31 cumulate planning time: 31
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2-L3-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-L2-L3-Sb0']), ('L2', ['0', 'N-L0-L1-L2-L3-Sb0']), ('L3', ['0', 'N-L0-L1-L2-L3-Sb0']), ('Sb0', ['0', 'N-L0-L1-L2-L3-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - Sb - L - L - VOUT', 'VIN - L - C - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - L - GND', 'VOUT - L - L - GND', 'VOUT - L - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'N-C0-L1-L2']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('L1', ['N-C0-L1-L2', 'OUT']), ('L2', ['0', 'N-C0-L1-L2']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - C - GND', 'VIN - L - Sb - Sb - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - C - GND', 'VIN - L - Sb - Sb - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sb1', 'N-Sb0-Sb1'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - C - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - L - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L2', 'OUT']), ('L1', ['0', 'N-L1-L2-Sb0']), ('L2', ['N-L0-L2', 'N-L1-L2-Sb0']), ('Sb0', ['N-L1-L2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - L - L - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-L2', 'OUT']), ('L1', ['0', 'N-L1-L2-Sb0']), ('L2', ['N-L0-L2', 'N-L1-L2-Sb0']), ('Sb0', ['N-L1-L2-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - Sb - C - Sb - GND', 'VIN - L - Sb - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1-Sb2', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - C - L - GND', 'VOUT - Sb - Sb - C - L - GND', 'VOUT - Sb - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('L1', ['0', 'N-C0-L1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - C - L - GND', 'VOUT - Sb - Sb - C - L - GND', 'VOUT - Sb - L - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L1']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('L1', ['0', 'N-C0-L1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])
['VIN - Sb - VOUT', 'VIN - Sb - C - C - L - L - GND', 'VOUT - C - C - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0']), ('C1', ['N-C0-C1', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - C - L - L - GND', 'VOUT - C - C - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'N-C0-L0']), ('C1', ['N-C0-C1', 'OUT']), ('L0', ['N-C0-L0', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - C - L - C - GND', 'VIN - C - L - C - GND', 'VOUT - L - C - GND', 'VOUT - L - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('C2', ['IN', 'OUT']), ('L0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - C - L - C - GND', 'VIN - C - L - C - GND', 'VOUT - L - C - GND', 'VOUT - L - C - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('C2', ['IN', 'OUT']), ('L0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - Sb - VOUT', 'VIN - L - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb1-Sb2-Sb3']), ('Sb0', ['N-Sb0-Sb1-Sb2', 'OUT']), ('Sb1', ['N-L0-Sb1-Sb2-Sb3', 'N-Sb0-Sb1-Sb2']), ('Sb2', ['N-L0-Sb1-Sb2-Sb3', 'N-Sb0-Sb1-Sb2']), ('Sb3', ['0', 'N-L0-Sb1-Sb2-Sb3'])])
find_one_analytics_result using:  0
['VIN - L - Sb - C - C - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-C1-Sb0', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - C - C - VOUT', 'VIN - L - Sb - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-C1-Sb0', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - C - L - VOUT', 'VIN - C - L - Sb - C - GND', 'VIN - C - L - L - C - GND', 'VOUT - Sb - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('L1', ['N-C1-L1', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - C - L - Sb - C - GND', 'VIN - C - L - L - C - GND', 'VOUT - Sb - C - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('L1', ['N-C1-L1', 'OUT']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])
['VIN - L - Sb - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - Sb - Sb - C - GND', 'VIN - L - L - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1-Sb1', 'N-L0-Sb0-Sb1']), ('L1', ['IN', 'N-L0-L1-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-L1-Sb1', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - Sb - VOUT', 'VIN - L - L - Sb - VOUT', 'VIN - L - Sb - Sb - C - GND', 'VIN - L - L - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-L1-Sb1', 'N-L0-Sb0-Sb1']), ('L1', ['IN', 'N-L0-L1-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-L1-Sb1', 'N-L0-Sb0-Sb1'])])
PCC-17859 violations

['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - C - C - GND', 'VIN - C - L - C - C - GND', 'VOUT - L - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C2']), ('C1', ['IN', 'OUT']), ('C2', ['N-C0-C2', 'N-C2-L0']), ('L0', ['N-C2-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - C - C - GND', 'VIN - C - L - C - C - GND', 'VOUT - L - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C2']), ('C1', ['IN', 'OUT']), ('C2', ['N-C0-C2', 'N-C2-L0']), ('L0', ['N-C2-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sb - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('L2', ['IN', 'N-L2-Sb0-Sb1']), ('Sb0', ['N-L0-L1-Sb0', 'N-L2-Sb0-Sb1']), ('Sb1', ['0', 'N-L2-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('L2', ['IN', 'N-L2-Sb0-Sb1']), ('Sb0', ['N-L0-L1-Sb0', 'N-L2-Sb0-Sb1']), ('Sb1', ['0', 'N-L2-Sb0-Sb1'])])
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sb - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-L3']), ('L1', ['N-L0-L1-L2-L3', 'OUT']), ('L2', ['N-L0-L1-L2-L3', 'OUT']), ('L3', ['0', 'N-L0-L1-L2-L3']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sb - L - L - GND', 'VIN - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-L3']), ('L1', ['N-L0-L1-L2-L3', 'OUT']), ('L2', ['N-L0-L1-L2-L3', 'OUT']), ('L3', ['0', 'N-L0-L1-L2-L3']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - C - L - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0-Sb1', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0-Sb1']), ('L0', ['0', 'N-C0-C1-L0-Sb0-Sb1']), ('Sb0', ['N-C0-C1-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-C1-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - C - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - C - GND', 'VOUT - C - L - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0-Sb1', 'OUT']), ('C1', ['0', 'N-C0-C1-L0-Sb0-Sb1']), ('L0', ['0', 'N-C0-C1-L0-Sb0-Sb1']), ('Sb0', ['N-C0-C1-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-C1-L0-Sb0-Sb1'])])
PCC-17859 violations

['VIN - C - L - VOUT', 'VIN - Sb - L - C - GND', 'VOUT - L - C - Sb - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('C1', ['0', 'N-C1-L1']), ('L0', ['N-C0-L0', 'OUT']), ('L1', ['N-C1-L1', 'N-L1-Sb0']), ('Sb0', ['IN', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - L - VOUT', 'VIN - Sb - L - C - GND', 'VOUT - L - C - Sb - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('C1', ['0', 'N-C1-L1']), ('L0', ['N-C0-L0', 'OUT']), ('L1', ['N-C1-L1', 'N-L1-Sb0']), ('Sb0', ['IN', 'N-L1-Sb0'])])
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - C - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - C - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - C - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - C - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['0', 'N-C0-C1-L0-Sb0']), ('Sb0', ['IN', 'N-C0-C1-L0-Sb0']), ('Sb1', ['N-C0-Sb1', 'OUT'])])
['VIN - L - Sb - VOUT', 'VIN - L - C - C - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - C - GND', 'VIN - L - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-C2-L0-Sb0', 'OUT']), ('C2', ['0', 'N-C1-C2-L0-Sb0']), ('L0', ['IN', 'N-C1-C2-L0-Sb0']), ('Sb0', ['N-C1-C2-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - C - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - C - GND', 'VIN - L - C - GND', 'VIN - L - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-C2-L0-Sb0', 'OUT']), ('C2', ['0', 'N-C1-C2-L0-Sb0']), ('L0', ['IN', 'N-C1-C2-L0-Sb0']), ('Sb0', ['N-C1-C2-L0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - C - L - GND', 'VIN - L - L - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L2-Sb0']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['0', 'N-C0-L2-Sb0']), ('Sb0', ['N-C0-L2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - C - L - GND', 'VIN - L - L - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - C - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L2-Sb0']), ('L0', ['N-L0-L1', 'OUT']), ('L1', ['IN', 'N-L0-L1']), ('L2', ['0', 'N-C0-L2-Sb0']), ('Sb0', ['N-C0-L2-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - L - Sb - VOUT', 'VIN - C - L - C - GND', 'VIN - C - L - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1-Sb0']), ('C1', ['IN', 'N-C1-L1']), ('L0', ['0', 'N-C0-L0-L1-Sb0']), ('L1', ['N-C0-L0-L1-Sb0', 'N-C1-L1']), ('Sb0', ['N-C0-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - L - Sb - Sb - GND', 'VIN - Sb - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1-Sb2', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1-Sb2', 'N-Sb1-Sb2-Sb3']), ('Sb2', ['N-L0-Sb1-Sb2', 'N-Sb1-Sb2-Sb3']), ('Sb3', ['0', 'N-Sb1-Sb2-Sb3'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VIN - C - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-L1-L2']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['IN', 'N-L0-L1-L2']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - GND', 'VIN - L - L - GND', 'VIN - C - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - L - L - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-L1-L2']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['IN', 'N-L0-L1-L2']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - Sb - GND', 'VOUT - Sb - Sb - L - Sb - GND', 'VOUT - C - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'N-L0-Sb2']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['0', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VIN - Sb - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2-Sb0-Sb1', 'OUT']), ('L1', ['0', 'N-L0-L1-L2-Sb0-Sb1']), ('L2', ['0', 'N-L0-L1-L2-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-L1-L2-Sb0-Sb1']), ('Sb1', ['IN', 'N-L0-L1-L2-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb1-Sb2', 'OUT']), ('L1', ['N-L0-L1-Sb1-Sb2', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-L1-Sb1-Sb2', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'N-L0-L1-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - L - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - L - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0', 'OUT']), ('L0', ['0', 'N-C1-L0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - L - C - L - GND', 'VIN - Sb - L - C - GND', 'VOUT - C - L - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-L0', 'OUT']), ('L0', ['0', 'N-C1-L0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L1-Sb0'])])
PCC-17859 violations

has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.001319091255071471
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 32 cumulate planning time: 63
sim.current.step 1
root offset is:  1
has to be unconnected
['VIN - C - L - VOUT', 'VIN - L - L - L - VOUT', 'VIN - C - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - C - L - Sb - GND', 'VOUT - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L1-L2']), ('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-C0-L1-L2', 'N-L0-L1-Sb0']), ('L2', ['N-C0-L1-L2', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - C - Sb - L - VOUT', 'VIN - C - C - C - GND', 'VOUT - L - Sb - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-C2']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('C2', ['0', 'N-C0-C2']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sb - L - VOUT', 'VIN - C - C - C - GND', 'VOUT - L - Sb - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb0', 'N-C0-C2']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('C2', ['0', 'N-C0-C2']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sb0', 'N-L0-Sb0'])])
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - L - Sb - Sb - GND', 'VIN - L - Sb - Sb - GND', 'VOUT - C - L - Sb - Sb - GND', 'VOUT - C - L - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'N-Sb0-Sb1-Sb2']), ('Sb1', ['N-L0-Sb0-Sb1', 'N-Sb0-Sb1-Sb2']), ('Sb2', ['0', 'N-Sb0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - L - C - C - Sb - VOUT', 'VIN - L - C - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0']), ('C1', ['N-C0-C1-L0', 'N-C1-C2-Sb0']), ('C2', ['0', 'N-C1-C2-Sb0']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sb0', ['N-C1-C2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - C - Sb - VOUT', 'VIN - L - C - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0']), ('C1', ['N-C0-C1-L0', 'N-C1-C2-Sb0']), ('C2', ['0', 'N-C1-C2-Sb0']), ('L0', ['IN', 'N-C0-C1-L0']), ('Sb0', ['N-C1-C2-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - Sb - L - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'N-Sb0-Sb2']), ('Sb1', ['IN', 'N-L0-Sb1']), ('Sb2', ['N-Sb0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - L - Sb - GND', 'VOUT - L - Sb - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2-Sb0-Sb1', 'OUT']), ('L1', ['0', 'N-L0-L1-L2-Sb0-Sb1']), ('L2', ['IN', 'N-L0-L1-L2-Sb0-Sb1']), ('Sb0', ['0', 'N-L0-L1-L2-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-L1-L2-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - C - VOUT', 'VIN - C - VOUT', 'VIN - L - Sb - GND', 'VIN - C - C - Sb - Sb - GND', 'VOUT - C - L - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-L0-Sb0-Sb1']), ('Sb1', ['0', 'N-L0-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - C - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - C - L - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - L - C - GND', 'VIN - C - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sb0']), ('C1', ['0', 'OUT']), ('L0', ['0', 'N-C0-L0-L1-Sb0']), ('L1', ['N-C0-L0-L1-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-L1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - C - L - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - L - C - GND', 'VIN - C - L - GND', 'VOUT - Sb - L - GND', 'VOUT - L - L - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-L1-Sb0']), ('C1', ['0', 'OUT']), ('L0', ['0', 'N-C0-L0-L1-Sb0']), ('L1', ['N-C0-L0-L1-Sb0', 'OUT']), ('Sb0', ['N-C0-L0-L1-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND', 'VOUT - C - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sb0', ['N-Sb0-Sb1', 'N-Sb0-Sb2']), ('Sb1', ['0', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'N-Sb0-Sb2']), ('Sb3', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND', 'VOUT - C - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('Sb0', ['N-Sb0-Sb1', 'N-Sb0-Sb2']), ('Sb1', ['0', 'N-Sb0-Sb1']), ('Sb2', ['IN', 'N-Sb0-Sb2']), ('Sb3', ['IN', 'OUT'])])
has to be unconnected
['VIN - Sb - Sb - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - Sb - L - L - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb1-Sb2', 'OUT']), ('L1', ['N-L1-Sb0-Sb1', 'OUT']), ('Sb0', ['IN', 'N-L1-Sb0-Sb1']), ('Sb1', ['N-L0-Sb1-Sb2', 'N-L1-Sb0-Sb1']), ('Sb2', ['0', 'N-L0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - L - Sb - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - GND', 'VOUT - C - Sb - L - C - GND', 'VOUT - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C0-C2-Sb0']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-C0-C2-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - C - VOUT', 'VIN - C - C - VOUT', 'VIN - C - GND', 'VOUT - C - Sb - L - C - GND', 'VOUT - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C0-C2-Sb0']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-C0-C2-Sb0', 'N-L0-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - C - C - VOUT', 'VIN - C - C - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sb0']), ('C1', ['N-C0-C1-C2-Sb0', 'N-C1-C3']), ('C2', ['N-C0-C1-C2-Sb0', 'OUT']), ('C3', ['IN', 'N-C1-C3']), ('Sb0', ['0', 'N-C0-C1-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - VOUT', 'VIN - C - C - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2-Sb0']), ('C1', ['N-C0-C1-C2-Sb0', 'N-C1-C3']), ('C2', ['N-C0-C1-C2-Sb0', 'OUT']), ('C3', ['IN', 'N-C1-C3']), ('Sb0', ['0', 'N-C0-C1-C2-Sb0'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - C - L - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'OUT']), ('L0', ['N-C0-L0-Sb1', 'N-L0-Sb2']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-L0-Sb1']), ('Sb2', ['0', 'N-L0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sb - L - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L2-L3', 'OUT']), ('L1', ['N-L1-L3-Sb0', 'OUT']), ('L2', ['0', 'N-L0-L2-L3']), ('L3', ['N-L0-L2-L3', 'N-L1-L3-Sb0']), ('Sb0', ['IN', 'N-L1-L3-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - L - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sb - L - L - L - GND', 'VOUT - L - L - GND', 'VOUT - L - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L2-L3', 'OUT']), ('L1', ['N-L1-L3-Sb0', 'OUT']), ('L2', ['0', 'N-L0-L2-L3']), ('L3', ['N-L0-L2-L3', 'N-L1-L3-Sb0']), ('Sb0', ['IN', 'N-L1-L3-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
['VIN - L - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - C - Sb - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - C - GND', 'VIN - L - C - Sb - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-L0-Sb0', 'N-C0-Sb1']), ('C1', ['0', 'N-C0-C1-L0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sb0']), ('Sb0', ['N-C0-C1-L0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.009662720392365244
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 1.6864535932086545e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 16 cumulate planning time: 79
sim.current.step 1
root offset is:  1
['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - C - C - GND', 'VIN - Sb - C - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('C2', ['N-C2-Sb0-Sb1', 'OUT']), ('Sb0', ['N-C2-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C2-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - C - C - GND', 'VIN - Sb - C - C - GND', 'VOUT - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('C2', ['N-C2-Sb0-Sb1', 'OUT']), ('Sb0', ['N-C2-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C2-Sb0-Sb1'])])
PCC-17859 violations

['VIN - Sb - VOUT', 'VIN - Sb - Sb - C - Sb - C - GND', 'VOUT - Sb - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'N-C0-Sb2']), ('C1', ['0', 'N-C1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-C1-Sb1']), ('Sb2', ['N-C0-Sb2', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - C - Sb - C - GND', 'VOUT - Sb - C - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb1', 'N-C0-Sb2']), ('C1', ['0', 'N-C1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'N-C1-Sb1']), ('Sb2', ['N-C0-Sb2', 'OUT'])])
['VIN - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - C - C - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C2-Sb0']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C0-C2-Sb0']), ('Sb0', ['IN', 'N-C0-C2-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - C - C - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C2-Sb0']), ('C1', ['0', 'IN']), ('C2', ['IN', 'N-C0-C2-Sb0']), ('Sb0', ['IN', 'N-C0-C2-Sb0']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - Sb - Sb - GND', 'VOUT - C - Sb - C - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1-Sb2', 'OUT']), ('C1', ['0', 'N-C1-Sb0-Sb2']), ('Sb0', ['0', 'N-C1-Sb0-Sb2']), ('Sb1', ['IN', 'N-C0-Sb1-Sb2']), ('Sb2', ['N-C0-Sb1-Sb2', 'N-C1-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1-Sb3', 'OUT']), ('Sb1', ['N-Sb0-Sb1-Sb3', 'N-Sb1-Sb2']), ('Sb2', ['IN', 'N-Sb1-Sb2']), ('Sb3', ['IN', 'N-Sb0-Sb1-Sb3'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sb - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1-Sb3', 'OUT']), ('Sb1', ['N-Sb0-Sb1-Sb3', 'N-Sb1-Sb2']), ('Sb2', ['IN', 'N-Sb1-Sb2']), ('Sb3', ['IN', 'N-Sb0-Sb1-Sb3'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - C - Sb - GND', 'VOUT - Sb - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'N-C0-Sb1-Sb2']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-C0-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-Sb1-Sb2']), ('Sb3', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - C - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - C - GND', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['0', 'N-Sb0-Sb3']), ('Sb1', ['IN', 'N-Sb1-Sb2-Sb3']), ('Sb2', ['N-Sb1-Sb2-Sb3', 'OUT']), ('Sb3', ['N-Sb0-Sb3', 'N-Sb1-Sb2-Sb3'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - C - C - Sb - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sb - C - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-C2']), ('C2', ['N-C1-C2', 'N-C2-Sb0']), ('Sb0', ['N-C2-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - C - Sb - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - Sb - C - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-C2']), ('C2', ['N-C1-C2', 'N-C2-Sb0']), ('Sb0', ['N-C2-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
['VIN - Sb - C - C - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1-Sb1-Sb2', 'OUT']), ('C1', ['N-C0-C1-Sb1-Sb2', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0']), ('Sb1', ['0', 'N-C0-C1-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-C1-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1-Sb1-Sb2', 'OUT']), ('C1', ['N-C0-C1-Sb1-Sb2', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0']), ('Sb1', ['0', 'N-C0-C1-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-C1-Sb1-Sb2'])])
has to be unconnected
has to be unconnected
['VIN - C - VOUT', 'VIN - C - Sb - Sb - Sb - GND', 'VIN - C - Sb - C - Sb - GND', 'VOUT - Sb - Sb - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0-Sb1', 'N-C0-Sb1-Sb2']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-C0-Sb0-Sb1', 'N-C0-Sb1-Sb2']), ('Sb2', ['0', 'N-C0-Sb1-Sb2'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - Sb - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'N-Sb1-Sb2']), ('Sb2', ['0', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sb - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - C - C - GND', 'VOUT - C - GND', 'VOUT - C - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'N-Sb1-Sb2']), ('Sb2', ['0', 'N-Sb1-Sb2'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - C - C - C - Sb - VOUT', 'VIN - Sb - C - C - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C2', 'N-C1-Sb0-Sb1']), ('C2', ['0', 'N-C1-C2']), ('Sb0', ['IN', 'N-C1-Sb0-Sb1']), ('Sb1', ['N-C1-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - C - C - C - Sb - VOUT', 'VIN - Sb - C - C - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-C2', 'N-C1-Sb0-Sb1']), ('C2', ['0', 'N-C1-C2']), ('Sb0', ['IN', 'N-C1-Sb0-Sb1']), ('Sb1', ['N-C1-Sb0-Sb1', 'OUT'])])
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - C - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['N-C0-C1', 'OUT']), ('C2', ['0', 'N-C2-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C2-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - C - VOUT', 'VIN - C - Sb - C - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - C - Sb - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0-Sb2']), ('C1', ['N-C1-Sb1-Sb2', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0-Sb2']), ('Sb1', ['0', 'N-C1-Sb1-Sb2']), ('Sb2', ['N-C0-Sb0-Sb2', 'N-C1-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - C - VOUT', 'VIN - C - Sb - C - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VIN - C - Sb - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0-Sb2']), ('C1', ['N-C1-Sb1-Sb2', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0-Sb2']), ('Sb1', ['0', 'N-C1-Sb1-Sb2']), ('Sb2', ['N-C0-Sb0-Sb2', 'N-C1-Sb1-Sb2'])])
action  0  : node on 3
action child  0  avg_return: 0.0010883476953854312
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 26 cumulate planning time: 105
sim.current.step 2
root offset is:  1
has to be unconnected
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - C - Sb - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb2', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb3']), ('Sb1', ['N-Sb1-Sb3', 'OUT']), ('Sb2', ['0', 'N-C0-Sb2']), ('Sb3', ['N-Sb0-Sb3', 'N-Sb1-Sb3'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
['VIN - Sb - C - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - C - C - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['0', 'OUT']), ('C2', ['N-C0-C2', 'N-C2-Sb0']), ('C3', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C2-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - C - C - VOUT', 'VIN - C - VOUT', 'VIN - Sb - C - C - C - GND', 'VIN - C - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C2', 'OUT']), ('C1', ['0', 'OUT']), ('C2', ['N-C0-C2', 'N-C2-Sb0']), ('C3', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C2-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - C - GND', 'VIN - C - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('C2', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-C1-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - C - GND', 'VIN - C - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('C2', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-C1-Sb0']), ('Sb1', ['IN', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - C - C - VOUT', 'VIN - C - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - C - GND', 'VIN - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'IN']), ('C2', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
PCC-17859 violations

['VIN - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-C3', 'OUT']), ('C2', ['0', 'N-C2-Sb0']), ('C3', ['0', 'N-C1-C3']), ('Sb0', ['N-C2-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - C - GND', 'VIN - C - C - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-C3', 'OUT']), ('C2', ['0', 'N-C2-Sb0']), ('C3', ['0', 'N-C1-C3']), ('Sb0', ['N-C2-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - VOUT', 'VIN - Sb - C - Sb - Sb - GND', 'VIN - C - C - Sb - Sb - GND', 'VOUT - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb2', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sb1-Sb2']), ('Sb2', ['N-C1-Sb2', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0-Sb1']), ('C1', ['IN', 'N-C0-C1-Sb0-Sb1']), ('C2', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-C1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND', 'VOUT - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0-Sb1']), ('C1', ['IN', 'N-C0-C1-Sb0-Sb1']), ('C2', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-C1-Sb0-Sb1'])])
PCC-17859 violations

find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VOUT - Sb - Sb - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'N-C0-Sb1']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-C0-Sb1']), ('Sb2', ['N-Sb2-Sb3', 'OUT']), ('Sb3', ['IN', 'N-Sb2-Sb3'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VOUT - Sb - Sb - Sb - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sb0', 'N-C0-Sb1']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-C0-Sb1']), ('Sb2', ['N-Sb2-Sb3', 'OUT']), ('Sb3', ['IN', 'N-Sb2-Sb3'])])
['VIN - Sb - Sb - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - Sb - C - GND', 'VOUT - C - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-C2-Sb1']), ('C1', ['0', 'N-C0-C1-C2-Sb1']), ('C2', ['N-C0-C1-C2-Sb1', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-C1-C2-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - C - VOUT', 'VIN - Sb - Sb - C - GND', 'VIN - Sb - Sb - C - GND', 'VOUT - C - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-C2-Sb1']), ('C1', ['0', 'N-C0-C1-C2-Sb1']), ('C2', ['N-C0-C1-C2-Sb1', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-C1-C2-Sb1', 'N-Sb0-Sb1'])])
PCC-17859 violations

action  0  : node on -1
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.0009714505309956584
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 10 cumulate planning time: 115
sim.current.step 3
root offset is:  1
['VIN - C - Sb - Sb - VOUT', 'VIN - C - Sb - Sb - C - C - GND', 'VOUT - C - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['0', 'N-C0-C1']), ('C2', ['IN', 'N-C2-Sb0']), ('Sb0', ['N-C2-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - Sb - VOUT', 'VIN - C - Sb - Sb - C - C - GND', 'VOUT - C - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['0', 'N-C0-C1']), ('C2', ['IN', 'N-C2-Sb0']), ('Sb0', ['N-C2-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
PCC-17859 violations

has to be unconnected
has to be unconnected
['VIN - C - Sb - C - VOUT', 'VIN - C - Sb - GND', 'VOUT - C - Sb - C - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-Sb0', 'OUT']), ('C2', ['IN', 'N-C2-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-C1-Sb0']), ('Sb1', ['0', 'N-C2-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - Sb - C - VOUT', 'VIN - C - Sb - GND', 'VOUT - C - Sb - C - C - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['N-C1-Sb0', 'OUT']), ('C2', ['IN', 'N-C2-Sb1']), ('Sb0', ['N-C0-Sb0', 'N-C1-Sb0']), ('Sb1', ['0', 'N-C2-Sb1'])])
find_one_analytics_result using:  0
['VIN - C - VOUT', 'VIN - C - Sb - Sb - C - GND', 'VIN - C - C - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - C - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('C2', ['N-C2-Sb0-Sb1', 'OUT']), ('Sb0', ['N-C0-Sb0', 'N-C2-Sb0-Sb1']), ('Sb1', ['N-C2-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
action  0  : node on 3
action child  0  avg_return: 1.670489826270618e-08
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'C1-left', 'C1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 0.004080026524248598
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 8 cumulate planning time: 123
sim.current.step 3
root offset is:  1
has to be unconnected
['VIN - Sb - Sb - VOUT', 'VIN - Sb - Sb - VOUT', 'VIN - Sb - C - Sb - GND', 'VIN - Sb - C - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'N-C0-Sb1-Sb2-Sb3']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'N-C0-Sb1-Sb2-Sb3']), ('Sb2', ['IN', 'N-C0-Sb1-Sb2-Sb3']), ('Sb3', ['N-C0-Sb1-Sb2-Sb3', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - Sb - C - Sb - VOUT', 'VIN - Sb - Sb - Sb - GND', 'VOUT - Sb - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb0', 'N-C0-Sb1-Sb2']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['N-C0-Sb1-Sb2', 'N-Sb1-Sb3']), ('Sb2', ['0', 'N-C0-Sb1-Sb2']), ('Sb3', ['IN', 'N-Sb1-Sb3'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 1
action child  0  avg_return: 0.002354344907009061
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 124
sim.current.step 5
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sb - C - GND', 'VOUT - Sb - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1-Sb2']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1-Sb2']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1-Sb2']), ('Sb2', ['IN', 'N-C0-Sb0-Sb1-Sb2']), ('Sb3', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : edge on [1, 7]
action child  0  avg_return: 5.999748589953691e-06
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  1  : edge on [1, 11]
action child  1  avg_return: 0.00038423843729717814
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  2  : edge on [1, 9]
action child  2  avg_return: 0.00981208734265172
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  3  : edge on [1, 3]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
action  4  : edge on [1, 5]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 6
root offset is:  1
has to be unconnected
action  0  : edge on [2, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {5}, 5: {2}})
action  1  : edge on [2, 7]
action child  1  avg_return: 6.281075193112554e-05
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}})
action  2  : edge on [2, 11]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {11}, 11: {2}})
action  3  : edge on [2, 10]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {10}, 10: {2}})
action  4  : edge on [2, 3]
action child  4  avg_return: 4.927944987498321e-07
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {3}, 3: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 7
root offset is:  1
has to be unconnected
action  0  : edge on [0, 11]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {11}, 11: {0}})
action  1  : edge on [0, 3]
action child  1  avg_return: 0.0
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}, 2: {7}, 7: {2}, 0: {3}, 3: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 8
root offset is:  1
has to be unconnected
action  0  : edge on [3, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1, 3}, 2: {7}, 7: {2}, 0: {11}, 11: {0}, 3: {9}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 9
root offset is:  1
has to be unconnected
action  0  : edge on [4, 5]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1, 3}, 2: {7}, 7: {2}, 0: {11}, 11: {0}, 3: {9}, 4: {5}, 5: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 10
root offset is:  1
has to be unconnected
action  0  : edge on [5, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1, 3}, 2: {7}, 7: {2, 5}, 0: {11}, 11: {0}, 3: {9}, 4: {5}, 5: {4, 7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 11
root offset is:  1
has to be unconnected
action  0  : edge on [6, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1, 3}, 2: {7}, 7: {2, 5}, 0: {11}, 11: {0}, 3: {9}, 4: {5}, 5: {4, 7}, 6: {8}, 8: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 12
root offset is:  1
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1, 3}, 2: {7}, 7: {2, 5}, 0: {11}, 11: {0}, 3: {9}, 4: {5}, 5: {4, 7}, 6: {8}, 8: {6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 13
root offset is:  1
has to be unconnected
action  0  : edge on [8, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {8, 1, 3}, 2: {7}, 7: {2, 5}, 0: {11}, 11: {0}, 3: {9}, 4: {5}, 5: {4, 7}, 6: {8}, 8: {9, 6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 14
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {8, 1, 3}, 2: {7}, 7: {2, 5}, 0: {11}, 11: {0}, 3: {9}, 4: {5}, 5: {4, 7}, 6: {8}, 8: {9, 6}})
has to be unconnected
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
sim.current.step 15
has to be unconnected
root offset is:  1
has to be unconnected
has to be unconnected
action  0  : terminal on 0
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sb0-left', 'Sb0-right', 'C0-left', 'C0-right', 'Sb1-left', 'Sb1-right', 'Sb2-left', 'Sb2-right', 'Sb3-left', 'Sb3-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {9}, 9: {8, 1, 3}, 2: {7}, 7: {2, 5}, 0: {11}, 11: {0}, 3: {9}, 4: {5}, 5: {4, 7}, 6: {8}, 8: {9, 6}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 124
effis of topo: [{'parameter': '0.1', 'efficiency': {'efficiency': 0.12, 'output_voltage': 52.0}, 'output_voltage': 52.0}]
#####################Game:   steps:  18   average cumulate reward:  0
title result with parameter:0.1 
-1 , 10 : 18.0
[{'parameter': '0.1', 'efficiency': {'efficiency': 0.12, 'output_voltage': 52.0}, 'output_voltage': 52.0}]
hash counter 1
hash length 120

('Sa', 'Sa', 'Sa', 'Sa', 'Sa') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') : 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') : 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') : 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') : 20
('Sa', 'Sa', 'Sa', 'L', 'L') : 10
('Sa', 'Sa', 'Sa', 'L', 'C') : 20
('Sa', 'Sa', 'Sa', 'C', 'C') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') : 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') : 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') : 30
('Sa', 'Sa', 'Sb', 'L', 'L') : 30
('Sa', 'Sa', 'Sb', 'L', 'C') : 60
('Sa', 'Sa', 'Sb', 'C', 'C') : 30
('Sa', 'Sa', 'L', 'L', 'L') : 10
('Sa', 'Sa', 'L', 'L', 'C') : 30
('Sa', 'Sa', 'L', 'C', 'C') : 30
('Sa', 'Sa', 'C', 'C', 'C') : 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') : 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') : 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') : 20
('Sa', 'Sb', 'Sb', 'L', 'L') : 30
('Sa', 'Sb', 'Sb', 'L', 'C') : 60
('Sa', 'Sb', 'Sb', 'C', 'C') : 30
('Sa', 'Sb', 'L', 'L', 'L') : 20
('Sa', 'Sb', 'L', 'L', 'C') : 60
('Sa', 'Sb', 'L', 'C', 'C') : 60
('Sa', 'Sb', 'C', 'C', 'C') : 20
('Sa', 'L', 'L', 'L', 'L') : 5
('Sa', 'L', 'L', 'L', 'C') : 20
('Sa', 'L', 'L', 'C', 'C') : 30
('Sa', 'L', 'C', 'C', 'C') : 20
('Sa', 'C', 'C', 'C', 'C') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') : 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') : 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') : 5
('Sb', 'Sb', 'Sb', 'L', 'L') : 10
('Sb', 'Sb', 'Sb', 'L', 'C') : 20
('Sb', 'Sb', 'Sb', 'C', 'C') : 10
('Sb', 'Sb', 'L', 'L', 'L') : 10
('Sb', 'Sb', 'L', 'L', 'C') : 30
('Sb', 'Sb', 'L', 'C', 'C') : 30
('Sb', 'Sb', 'C', 'C', 'C') : 10
('Sb', 'L', 'L', 'L', 'L') : 5
('Sb', 'L', 'L', 'L', 'C') : 20
('Sb', 'L', 'L', 'C', 'C') : 30
('Sb', 'L', 'C', 'C', 'C') : 20
('Sb', 'C', 'C', 'C', 'C') : 5
('L', 'L', 'L', 'L', 'L') : 1
('L', 'L', 'L', 'L', 'C') : 5
('L', 'L', 'L', 'C', 'C') : 10
('L', 'L', 'C', 'C', 'C') : 10
('L', 'C', 'C', 'C', 'C') : 5
('C', 'C', 'C', 'C', 'C') : 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sa') 	 1
('Sa', 'Sa', 'Sa', 'Sa', 'Sb') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'L') 	 5
('Sa', 'Sa', 'Sa', 'Sa', 'C') 	 5
('Sa', 'Sa', 'Sa', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sa', 'Sb', 'L') 	 20
('Sa', 'Sa', 'Sa', 'Sb', 'C') 	 20
('Sa', 'Sa', 'Sa', 'L', 'L') 	 10
('Sa', 'Sa', 'Sa', 'L', 'C') 	 20
('Sa', 'Sa', 'Sa', 'C', 'C') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'Sb') 	 10
('Sa', 'Sa', 'Sb', 'Sb', 'L') 	 30
('Sa', 'Sa', 'Sb', 'Sb', 'C') 	 30
('Sa', 'Sa', 'Sb', 'L', 'L') 	 30
('Sa', 'Sa', 'Sb', 'L', 'C') 	 60
('Sa', 'Sa', 'Sb', 'C', 'C') 	 30
('Sa', 'Sa', 'L', 'L', 'L') 	 10
('Sa', 'Sa', 'L', 'L', 'C') 	 30
('Sa', 'Sa', 'L', 'C', 'C') 	 30
('Sa', 'Sa', 'C', 'C', 'C') 	 10
('Sa', 'Sb', 'Sb', 'Sb', 'Sb') 	 5
('Sa', 'Sb', 'Sb', 'Sb', 'L') 	 20
('Sa', 'Sb', 'Sb', 'Sb', 'C') 	 20
('Sa', 'Sb', 'Sb', 'L', 'L') 	 30
('Sa', 'Sb', 'Sb', 'L', 'C') 	 60
('Sa', 'Sb', 'Sb', 'C', 'C') 	 30
('Sa', 'Sb', 'L', 'L', 'L') 	 20
('Sa', 'Sb', 'L', 'L', 'C') 	 60
('Sa', 'Sb', 'L', 'C', 'C') 	 60
('Sa', 'Sb', 'C', 'C', 'C') 	 20
('Sa', 'L', 'L', 'L', 'L') 	 5
('Sa', 'L', 'L', 'L', 'C') 	 20
('Sa', 'L', 'L', 'C', 'C') 	 30
('Sa', 'L', 'C', 'C', 'C') 	 20
('Sa', 'C', 'C', 'C', 'C') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'Sb') 	 1
('Sb', 'Sb', 'Sb', 'Sb', 'L') 	 5
('Sb', 'Sb', 'Sb', 'Sb', 'C') 	 5
('Sb', 'Sb', 'Sb', 'L', 'L') 	 10
('Sb', 'Sb', 'Sb', 'L', 'C') 	 20
('Sb', 'Sb', 'Sb', 'C', 'C') 	 10
('Sb', 'Sb', 'L', 'L', 'L') 	 10
('Sb', 'Sb', 'L', 'L', 'C') 	 30
('Sb', 'Sb', 'L', 'C', 'C') 	 30
('Sb', 'Sb', 'C', 'C', 'C') 	 10
('Sb', 'L', 'L', 'L', 'L') 	 5
('Sb', 'L', 'L', 'L', 'C') 	 20
('Sb', 'L', 'L', 'C', 'C') 	 30
('Sb', 'L', 'C', 'C', 'C') 	 20
('Sb', 'C', 'C', 'C', 'C') 	 5
('L', 'L', 'L', 'L', 'L') 	 1
('L', 'L', 'L', 'L', 'C') 	 5
('L', 'L', 'L', 'C', 'C') 	 10
('L', 'L', 'C', 'C', 'C') 	 10
('L', 'C', 'C', 'C', 'C') 	 5
('C', 'C', 'C', 'C', 'C') 	 1
[]
[78, 45, 23, 12, 6, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]
sim.current.step 0
root offset is:  1
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sa - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa1-Sa2', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sa - Sa - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sa2']), ('Sa2', ['N-Sa1-Sa2', 'OUT']), ('Sb0', ['IN', 'OUT'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - C - GND', 'VOUT - L - Sa - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-L1-L2-Sa0']), ('L1', ['N-L0-L1-L2-Sa0', 'OUT']), ('L2', ['N-L0-L1-L2-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-L0-L1-L2-Sa0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - C - GND', 'VOUT - L - Sa - C - GND', 'VOUT - L - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('L0', ['IN', 'N-L0-L1-L2-Sa0']), ('L1', ['N-L0-L1-L2-Sa0', 'OUT']), ('L2', ['N-L0-L1-L2-Sa0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-L0-L1-L2-Sa0'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sb - Sb - Sa - VOUT', 'VIN - L - C - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - Sa - Sb - GND', 'VOUT - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb1']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['0', 'N-C0-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sa - Sb - GND', 'VOUT - Sb - Sb - Sa - Sb - GND', 'VOUT - L - Sb - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb2']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb2', ['0', 'N-Sa0-Sb2'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - C - L - GND', 'VIN - C - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - C - L - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-L0']), ('L0', ['0', 'N-C1-L0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L3']), ('L1', ['IN', 'N-L1-L2-Sb0']), ('L2', ['IN', 'N-L1-L2-Sb0']), ('L3', ['N-L0-L3', 'OUT']), ('Sb0', ['0', 'N-L1-L2-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - VOUT', 'VIN - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - L - L - L - Sb - GND', 'VOUT - L - L - L - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['IN', 'N-L0-L3']), ('L1', ['IN', 'N-L1-L2-Sb0']), ('L2', ['IN', 'N-L1-L2-Sb0']), ('L3', ['N-L0-L3', 'OUT']), ('Sb0', ['0', 'N-L1-L2-Sb0'])])
PCC-17859 violations

['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - C - Sb - L - Sa - VOUT', 'VIN - Sb - Sa - L - Sb - GND', 'VIN - C - GND', 'VOUT - Sb - C - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'N-L0-Sb1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - C - L - VOUT', 'VIN - Sb - Sb - C - C - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0']), ('C1', ['N-C0-C1-L0', 'N-C1-Sb0']), ('L0', ['N-C0-C1-L0', 'OUT']), ('Sb0', ['N-C1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - C - L - VOUT', 'VIN - Sb - Sb - C - C - GND', 'VOUT - L - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0']), ('C1', ['N-C0-C1-L0', 'N-C1-Sb0']), ('L0', ['N-C0-C1-L0', 'OUT']), ('Sb0', ['N-C1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - L - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-L2-Sa0-Sb0']), ('L1', ['IN', 'N-L0-L1-L2-Sa0-Sb0']), ('L2', ['0', 'N-L0-L1-L2-Sa0-Sb0']), ('Sa0', ['N-L0-L1-L2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-L2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - L - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - L - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - L - L - C - GND', 'VIN - L - Sa - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])
PCC-17859 violations

['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - C - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - Sb - GND', 'VIN - C - Sb - GND', 'VIN - Sa - Sb - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sa1', ['N-C0-Sa0-Sa1-Sb0-Sb1', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sa1-Sb0-Sb1']), ('Sb1', ['0', 'N-C0-Sa0-Sa1-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sa - Sb - Sa - C - GND', 'VOUT - Sa - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0-Sb1']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sb - Sa - C - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sa - Sb - Sa - C - GND', 'VOUT - Sa - Sb - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'N-Sa0-Sb0-Sb1']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - L - Sa - VOUT', 'VIN - Sb - Sa - L - Sb - GND', 'VIN - L - Sb - GND', 'VOUT - Sb - L - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sb1', 'N-L0-Sa0']), ('L1', ['IN', 'N-L0-L1-Sb1']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-L1-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - C - Sa - L - VOUT', 'VIN - C - Sa - C - GND', 'VIN - C - Sa - Sa - GND', 'VOUT - L - C - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'N-C1-L0-Sa0-Sa1']), ('L0', ['N-C1-L0-Sa0-Sa1', 'OUT']), ('Sa0', ['N-C0-Sa0', 'N-C1-L0-Sa0-Sa1']), ('Sa1', ['0', 'N-C1-L0-Sa0-Sa1'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['VIN - L - Sa - Sb - VOUT', 'VIN - L - Sa - C - Sb - VOUT', 'VIN - L - Sa - C - GND', 'VIN - L - Sa - GND', 'VOUT - Sb - C - GND', 'VOUT - Sb - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa1-Sb0']), ('L0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa1-Sb0', 'N-L0-Sa0-Sa1']), ('Sb0', ['N-C0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - L - L - Sb - GND', 'VIN - Sa - L - L - C - GND', 'VOUT - L - Sb - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L1-Sb0']), ('L0', ['N-L0-Sa0', 'OUT']), ('L1', ['N-C0-L1-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['0', 'N-C0-L1-Sb0'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sa - VOUT', 'VIN - Sa - Sa - Sa - GND', 'VIN - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND', 'VOUT - Sa - Sa - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sa2']), ('Sa2', ['N-Sa0-Sa1-Sa2', 'N-Sa2-Sa4']), ('Sa3', ['IN', 'OUT']), ('Sa4', ['0', 'N-Sa2-Sa4'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - L - C - L - VOUT', 'VIN - L - Sb - Sb - GND', 'VOUT - L - C - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb1', 'N-C0-L1']), ('L0', ['IN', 'N-C0-L0-Sb1']), ('L1', ['N-C0-L1', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-C0-L0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - Sb - Sb - L - C - GND', 'VIN - Sb - Sb - L - L - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-L1']), ('L0', ['0', 'N-C0-L0-L1']), ('L1', ['N-C0-L0-L1', 'N-L1-Sb0']), ('Sb0', ['N-L1-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'L', 'L']
['Sa', 'Sb', 'L', 'C']
['Sa', 'Sb', 'C', 'C']
['Sa', 'L', 'L', 'L']
['Sa', 'L', 'L', 'C']
['Sa', 'L', 'C', 'C']
['Sa', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'C', 'C']
['Sb', 'L', 'L', 'L']
['Sb', 'L', 'L', 'C']
['Sb', 'L', 'C', 'C']
['Sb', 'C', 'C', 'C']
['L', 'L', 'L', 'L']
['L', 'L', 'L', 'C']
['L', 'L', 'C', 'C']
['L', 'C', 'C', 'C']
['C', 'C', 'C', 'C']
--------------------------------------------------
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('Sb0', ['N-Sb0-Sb1-Sb3', 'N-Sb0-Sb4']), ('Sb1', ['N-Sb0-Sb1-Sb3', 'N-Sb1-Sb2']), ('Sb2', ['0', 'N-Sb1-Sb2']), ('Sb3', ['N-Sb0-Sb1-Sb3', 'OUT']), ('Sb4', ['IN', 'N-Sb0-Sb4'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - Sb - VOUT', 'VIN - Sb - Sb - Sb - Sb - GND', 'VOUT - Sb - Sb - Sb - GND']

 PCC-17859
1
OrderedDict([('Sb0', ['N-Sb0-Sb1-Sb3', 'N-Sb0-Sb4']), ('Sb1', ['N-Sb0-Sb1-Sb3', 'N-Sb1-Sb2']), ('Sb2', ['0', 'N-Sb1-Sb2']), ('Sb3', ['N-Sb0-Sb1-Sb3', 'OUT']), ('Sb4', ['IN', 'N-Sb0-Sb4'])])
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['VIN - Sb - VOUT', 'VIN - L - Sb - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - L - Sb - Sa - GND', 'VOUT - Sb - L - Sb - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb1', 'OUT']), ('L0', ['IN', 'N-L0-Sb1']), ('Sa0', ['0', 'N-C0-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sa0-Sb1', 'N-L0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - L - C - Sa - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0']), ('C1', ['N-C1-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['0', 'N-C1-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'Sa', 'Sa', 'L']
['Sa', 'Sa', 'Sa', 'Sa', 'C']
['Sa', 'Sa', 'Sa', 'Sb', 'Sb']
['Sa', 'Sa', 'Sa', 'Sb', 'L']
['Sa', 'Sa', 'Sa', 'Sb', 'C']
['Sa', 'Sa', 'Sa', 'L', 'L']
['Sa', 'Sa', 'Sa', 'L', 'C']
['Sa', 'Sa', 'Sa', 'C', 'C']
['Sa', 'Sa', 'Sb', 'Sb', 'Sb']
['Sa', 'Sa', 'Sb', 'Sb', 'L']
['Sa', 'Sa', 'Sb', 'Sb', 'C']
['Sa', 'Sa', 'Sb', 'L', 'L']
['Sa', 'Sa', 'Sb', 'L', 'C']
['Sa', 'Sa', 'Sb', 'C', 'C']
['Sa', 'Sa', 'L', 'L', 'L']
['Sa', 'Sa', 'L', 'L', 'C']
['Sa', 'Sa', 'L', 'C', 'C']
['Sa', 'Sa', 'C', 'C', 'C']
['Sa', 'Sb', 'Sb', 'Sb', 'Sb']
['Sa', 'Sb', 'Sb', 'Sb', 'L']
['Sa', 'Sb', 'Sb', 'Sb', 'C']
['Sa', 'Sb', 'Sb', 'L', 'L']
['Sa', 'Sb', 'Sb', 'L', 'C']
['Sa', 'Sb', 'Sb', 'C', 'C']
['Sa', 'Sb', 'L', 'L', 'L']
['Sa', 'Sb', 'L', 'L', 'C']
['Sa', 'Sb', 'L', 'C', 'C']
['Sa', 'Sb', 'C', 'C', 'C']
['Sa', 'L', 'L', 'L', 'L']
['Sa', 'L', 'L', 'L', 'C']
['Sa', 'L', 'L', 'C', 'C']
['Sa', 'L', 'C', 'C', 'C']
['Sa', 'C', 'C', 'C', 'C']
['Sb', 'Sb', 'Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'Sb', 'Sb', 'L']
['Sb', 'Sb', 'Sb', 'Sb', 'C']
['Sb', 'Sb', 'Sb', 'L', 'L']
['Sb', 'Sb', 'Sb', 'L', 'C']
['Sb', 'Sb', 'Sb', 'C', 'C']
['Sb', 'Sb', 'L', 'L', 'L']
['Sb', 'Sb', 'L', 'L', 'C']
['Sb', 'Sb', 'L', 'C', 'C']
['Sb', 'Sb', 'C', 'C', 'C']
['Sb', 'L', 'L', 'L', 'L']
['Sb', 'L', 'L', 'L', 'C']
['Sb', 'L', 'L', 'C', 'C']
['Sb', 'L', 'C', 'C', 'C']
['Sb', 'C', 'C', 'C', 'C']
['L', 'L', 'L', 'L', 'L']
['L', 'L', 'L', 'L', 'C']
['L', 'L', 'L', 'C', 'C']
['L', 'L', 'C', 'C', 'C']
['L', 'C', 'C', 'C', 'C']
['C', 'C', 'C', 'C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - L - Sa - VOUT', 'VIN - Sa - L - Sa - VOUT', 'VIN - Sb - L - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'N-L0-Sa1-Sb1']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1-Sb1', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb1', ['0', 'N-L0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sa1-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - Sb - Sa - C - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1-Sb0']), ('Sa0', ['N-C0-Sa0-Sa1-Sb0', 'N-Sa0-Sb1']), ('Sa1', ['N-C0-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sa1-Sb0']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])
['VIN - C - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - Sb - Sa - GND', 'VIN - C - Sb - L - GND', 'VOUT - Sb - L - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-L1-Sa0-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sb0', ['N-L0-L1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sa - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('L1', ['0', 'N-L1-Sa0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'N-L1-Sa0']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa0-Sa1-Sb0', 'OUT'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - Sb - C - GND', 'VOUT - Sb - C - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])
PCC-17859 violations

has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
find_one_analytics_result using:  0
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa', 'Sa', 'Sa']
['Sa', 'Sa', 'Sb']
['Sa', 'Sa', 'L']
['Sa', 'Sa', 'C']
['Sa', 'Sb', 'Sb']
['Sa', 'Sb', 'L']
['Sa', 'Sb', 'C']
['Sa', 'L', 'L']
['Sa', 'L', 'C']
['Sa', 'C', 'C']
['Sb', 'Sb', 'Sb']
['Sb', 'Sb', 'L']
['Sb', 'Sb', 'C']
['Sb', 'L', 'L']
['Sb', 'L', 'C']
['Sb', 'C', 'C']
['L', 'L', 'L']
['L', 'L', 'C']
['L', 'C', 'C']
['C', 'C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - L - Sa - Sa - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VIN - L - Sa - Sb - GND', 'VOUT - Sb - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa1', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - C - VOUT', 'VIN - Sb - Sa - Sb - GND', 'VOUT - L - Sa - Sb - GND', 'VOUT - C - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0-Sb1', 'OUT']), ('L0', ['N-C0-L0-Sa0-Sb1', 'OUT']), ('Sa0', ['N-C0-L0-Sa0-Sb1', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'N-C0-L0-Sa0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - C - Sa - GND', 'VIN - Sb - L - Sa - Sa - GND', 'VOUT - L - C - Sa - GND', 'VOUT - L - Sa - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'N-C0-Sa0-Sa1']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['N-C0-L0-Sa0', 'N-C0-Sa0-Sa1']), ('Sa1', ['0', 'N-C0-Sa0-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - Sb - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['N-C0-L0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - Sb - VOUT', 'VIN - Sa - Sb - Sb - C - GND', 'VIN - Sa - L - C - GND', 'VOUT - Sb - L - C - GND', 'VOUT - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb1']), ('L0', ['N-C0-L0-Sb1', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb1', ['N-C0-L0-Sb1', 'OUT'])])
has to be unconnected
['VIN - Sb - VOUT', 'VIN - C - L - VOUT', 'VIN - C - VOUT', 'VIN - Sb - L - Sa - GND', 'VIN - C - Sa - GND', 'VIN - C - L - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - C - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-L0-Sa0']), ('L0', ['N-C1-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - Sa - C - L - VOUT', 'VIN - Sa - Sb - L - Sa - GND', 'VIN - Sa - C - Sa - GND', 'VOUT - Sb - C - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa1', 'N-C0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa1', ['0', 'N-C0-L0-Sa1']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - GND', 'VIN - L - Sb - GND', 'VIN - L - L - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sa1-Sb0']), ('L1', ['0', 'N-L0-L1-Sa0-Sa1-Sb0']), ('Sa0', ['IN', 'N-L0-L1-Sa0-Sa1-Sb0']), ('Sa1', ['N-L0-L1-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - L - Sb - GND', 'VIN - L - Sa - C - GND', 'VOUT - L - Sb - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sa - VOUT', 'VIN - L - Sa - L - Sb - GND', 'VIN - L - Sa - C - GND', 'VOUT - L - Sb - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('L1', ['N-L1-Sb0', 'OUT']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['0', 'N-L1-Sb0'])])
PCC-17859 violations

action  0  : node on -1
action child  0  avg_return: 0.001957448595412132
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 0
action child  1  avg_return: 0.009964471201367767
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 27 cumulate planning time: 27
sim.current.step 1
root offset is:  1
['VIN - Sa - Sa - VOUT', 'VIN - Sa - Sb - GND', 'VIN - Sa - L - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - Sa - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb1', 'N-L0-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1-Sb1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1-Sb1']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['0', 'N-L0-Sa0-Sa1-Sb1'])])
find_one_analytics_result using:  0
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - L - C - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - L - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0', 'N-C1-Sa0-Sb0']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['IN', 'N-C1-Sa0-Sb0']), ('Sb0', ['N-C1-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - C - Sb - VOUT', 'VIN - Sa - Sb - VOUT', 'VIN - C - GND', 'VOUT - Sb - C - L - C - GND', 'VOUT - Sb - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-L0', 'N-C1-Sa0-Sb0']), ('L0', ['IN', 'N-C1-L0']), ('Sa0', ['IN', 'N-C1-Sa0-Sb0']), ('Sb0', ['N-C1-Sa0-Sb0', 'OUT'])])
['VIN - Sb - Sa - C - Sa - VOUT', 'VIN - Sb - Sa - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['N-C0-Sa1', 'N-Sa1-Sb1']), ('Sb0', ['0', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - C - Sa - VOUT', 'VIN - Sb - Sa - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'N-C0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['N-C0-Sa1', 'N-Sa1-Sb1']), ('Sb0', ['0', 'N-C0-Sa0-Sb0']), ('Sb1', ['IN', 'N-Sa1-Sb1'])])
['VIN - Sb - Sb - L - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb2', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb2']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-Sb1-Sb2']), ('Sb2', ['N-L0-Sa0-Sb2', 'N-Sb1-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - Sb - L - Sb - VOUT', 'VIN - Sb - Sb - Sa - GND', 'VOUT - Sb - L - Sa - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-Sa0-Sb2', 'N-L0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb2']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'N-Sb1-Sb2']), ('Sb2', ['N-L0-Sa0-Sb2', 'N-Sb1-Sb2'])])
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
[]

--------------------------------------------------
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - Sa - L - Sb - L - GND', 'VOUT - C - L - Sb - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-L0-Sb0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - C - VOUT', 'VIN - Sa - L - Sb - L - GND', 'VOUT - C - L - Sb - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['N-C0-L0-Sa0', 'N-L0-Sb0']), ('L1', ['0', 'N-L1-Sb0']), ('Sa0', ['IN', 'N-C0-L0-Sa0']), ('Sb0', ['N-L0-Sb0', 'N-L1-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - L - Sa - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sa - Sa - L - GND', 'VOUT - Sa - Sb - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'N-L1-Sb0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L1-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - L - Sa - GND', 'VIN - L - Sb - L - Sa - GND', 'VOUT - L - Sa - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('L1', ['N-L1-L2-Sa0', 'OUT']), ('L2', ['N-L1-L2-Sa0', 'OUT']), ('Sa0', ['0', 'N-L1-L2-Sa0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - Sa - VOUT', 'VIN - Sa - C - GND', 'VIN - Sa - C - GND', 'VOUT - Sa - Sb - C - GND', 'VOUT - Sa - Sb - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-Sa1-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sa0-Sb2', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb2']), ('Sb0', ['IN', 'N-Sb0-Sb2']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['N-C0-Sa0-Sb2', 'N-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sb - C - VOUT', 'VIN - Sb - C - Sa - GND', 'VIN - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - Sb - Sa - GND', 'VOUT - C - Sa - GND']

 PCC-17859
1
OrderedDict([('C0', ['N-C0-Sa0-Sb2', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb2']), ('Sb0', ['IN', 'N-Sb0-Sb2']), ('Sb1', ['IN', 'OUT']), ('Sb2', ['N-C0-Sa0-Sb2', 'N-Sb0-Sb2'])])
find_one_analytics_result using:  0
['VIN - L - Sa - C - VOUT', 'VIN - C - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - C - Sb - C - GND', 'VOUT - Sb - C - L - Sa - GND', 'VOUT - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - L - Sa - C - VOUT', 'VIN - C - Sb - VOUT', 'VIN - L - Sa - GND', 'VIN - C - Sb - C - GND', 'VOUT - Sb - C - L - Sa - GND', 'VOUT - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['N-C0-Sb0', 'OUT'])])
PCC-17859 violations

['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2']), ('C1', ['IN', 'N-C0-C1-C2']), ('C2', ['N-C0-C1-C2', 'N-C2-Sa0-Sb0']), ('Sa0', ['N-C2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - C - Sa - VOUT', 'VIN - C - C - Sa - VOUT', 'VIN - C - C - Sb - GND', 'VIN - C - C - Sb - GND', 'VOUT - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-C2']), ('C1', ['IN', 'N-C0-C1-C2']), ('C2', ['N-C0-C1-C2', 'N-C2-Sa0-Sb0']), ('Sa0', ['N-C2-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C2-Sa0-Sb0'])])
PCC-17859 violations

['VIN - L - Sa - VOUT', 'VIN - L - Sa - Sb - GND', 'VIN - L - Sa - C - GND', 'VOUT - Sa - Sa - Sb - GND', 'VOUT - Sa - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('L0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - L - VOUT', 'VIN - Sb - Sb - L - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - L - Sb - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('L1', ['0', 'N-L1-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0-Sb1', 'N-L1-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'N-L1-Sa0-Sb0']), ('Sb1', ['IN', 'N-L0-Sa0-Sb0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - C - Sb - GND', 'VOUT - Sa - Sb - C - Sb - GND', 'VOUT - Sa - Sa - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - L - Sa - L - GND', 'VOUT - Sb - Sa - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L1-Sa1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'N-L1-Sa1']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - Sb - VOUT', 'VIN - L - Sa - L - GND', 'VOUT - Sb - Sa - L - Sa - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('L1', ['IN', 'N-L1-Sa1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['N-L0-Sa1', 'N-L1-Sa1']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
PCC-17859 violations

has to be unconnected
['VIN - Sa - Sb - VOUT', 'VIN - L - Sb - GND', 'VIN - L - C - GND', 'VOUT - Sb - Sa - L - Sb - GND', 'VOUT - Sb - Sa - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sb1']), ('L0', ['IN', 'N-C0-L0-Sb1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-L0-Sb1'])])
find_one_analytics_result using:  0
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa']
['Sb']
['L']
['C']
--------------------------------------------------
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sb - VOUT', 'VIN - Sb - L - L - GND', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - L - L - GND', 'VIN - Sb - Sa - L - GND', 'VOUT - L - L - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - Sb - L - Sb - GND', 'VOUT - Sb - Sb - L - Sb - GND', 'VOUT - Sa - Sb - L - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sb0', 'N-L0-Sb1']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['0', 'N-L0-Sb1']), ('Sb2', ['IN', 'OUT'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - C - Sb - GND', 'VOUT - Sb - Sa - GND', 'VOUT - C - Sb - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])
find_one_analytics_result using:  0
['VIN - Sb - C - VOUT', 'VIN - Sb - L - VOUT', 'VIN - L - Sa - GND', 'VOUT - C - Sb - L - Sa - GND', 'VOUT - L - Sb - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('L1', ['IN', 'N-L1-Sa0']), ('Sa0', ['0', 'N-L1-Sa0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - Sa - L - Sa - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 2.642652878051378e-07
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.006479453118360712
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 22 cumulate planning time: 49
sim.current.step 2
root offset is:  1
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
['Sa', 'Sa']
['Sa', 'Sb']
['Sa', 'L']
['Sa', 'C']
['Sb', 'Sb']
['Sb', 'L']
['Sb', 'C']
['L', 'L']
['L', 'C']
['C', 'C']
--------------------------------------------------
has to be unconnected
has to be unconnected
has to be unconnected
['VIN - Sa - L - VOUT', 'VIN - Sa - C - Sa - Sb - VOUT', 'VIN - Sa - L - Sb - Sa - GND', 'VIN - Sa - C - GND', 'VOUT - Sb - Sa - GND', 'VOUT - L - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-L0-Sa1']), ('L0', ['N-C0-L0-Sa1', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'N-C0-L0-Sa1']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - L - Sb - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - GND', 'VIN - L - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-L2', 'OUT']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['IN', 'N-L0-L1-L2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - L - L - Sb - Sa - VOUT', 'VIN - L - L - VOUT', 'VIN - L - L - GND', 'VIN - L - L - Sa - Sb - GND', 'VOUT - Sa - Sb - GND', 'VOUT - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['N-L0-L1-L2', 'OUT']), ('L1', ['0', 'N-L0-L1-L2']), ('L2', ['IN', 'N-L0-L1-L2']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
PCC-17859 violations

find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - C - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-L0-Sb0'])])
find_one_analytics_result using:  0
['VIN - C - Sa - VOUT', 'VIN - C - Sb - L - GND', 'VIN - C - C - GND', 'VOUT - Sa - Sb - L - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-Sa0-Sb0']), ('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['N-C0-C1-Sa0-Sb0', 'OUT']), ('Sb0', ['N-C0-C1-Sa0-Sb0', 'N-L0-Sb0'])])
has to be unconnected
['VIN - Sa - C - Sb - VOUT', 'VIN - Sa - C - Sa - VOUT', 'VIN - Sa - L - GND', 'VOUT - Sb - C - L - GND', 'VOUT - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['N-C0-L0-Sa1', 'N-C0-Sa0-Sb0']), ('L0', ['0', 'N-C0-L0-Sa1']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'N-C0-L0-Sa1']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sa - Sb - Sb - L - GND', 'VIN - Sa - Sb - Sb - Sa - GND', 'VOUT - Sb - Sb - L - GND', 'VOUT - Sb - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa1-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1-Sb0']), ('Sb0', ['N-L0-Sa1-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
action  0  : node on -1
action child  0  avg_return: 0.0002019662939793558
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 2
action child  1  avg_return: 0.00764388904714603
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 6 cumulate planning time: 55
sim.current.step 3
root offset is:  1
has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - GND', 'VOUT - Sa - Sa - L - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - Sa - Sa - VOUT', 'VIN - L - L - GND', 'VOUT - Sa - Sb - L - L - GND', 'VOUT - Sa - Sa - L - L - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sa1-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - L - C - GND', 'VIN - L - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-device-list
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sb - Sa - VOUT', 'VIN - L - Sa - VOUT', 'VIN - Sb - C - GND', 'VIN - Sb - C - GND', 'VIN - L - C - GND', 'VIN - L - C - GND', 'VOUT - Sa - C - GND', 'VOUT - Sa - C - GND']

 PCC-17859
1
OrderedDict([('C0', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('C1', ['0', 'N-C0-C1-L0-Sa0-Sb0']), ('L0', ['IN', 'N-C0-C1-L0-Sa0-Sb0']), ('Sa0', ['N-C0-C1-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-L0-Sa0-Sb0'])])
PCC-17859 violations

['VIN - C - Sb - VOUT', 'VIN - C - Sa - L - GND', 'VIN - C - L - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - L - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'N-L0-L1-Sa0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'OUT'])])
find_one_analytics_result using:  0
['VIN - C - Sb - VOUT', 'VIN - C - Sa - L - GND', 'VIN - C - L - L - GND', 'VOUT - Sb - Sa - L - GND', 'VOUT - Sb - L - L - GND']

 PCC-17859
1
OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0-Sb0']), ('L0', ['N-C0-L0-Sa0-Sb0', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-C0-L0-Sa0-Sb0', 'N-L0-L1-Sa0']), ('Sb0', ['N-C0-L0-Sa0-Sb0', 'OUT'])])
['VIN - Sa - Sb - VOUT', 'VIN - Sa - L - VOUT', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - Sb - Sa - GND', 'VOUT - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sa1', ['0', 'N-Sa1-Sb1']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'N-Sa1-Sb1'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
has to be unconnected
has to be unconnected
['VIN - Sa - C - VOUT', 'VIN - C - L - Sb - C - VOUT', 'VIN - Sa - Sb - GND', 'VIN - C - L - GND', 'VOUT - C - Sb - GND', 'VOUT - C - Sa - C - L - GND']

 PCC-device-list
1
OrderedDict([('C0', ['IN', 'N-C0-L0']), ('C1', ['N-C1-Sa0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'N-C1-Sa0-Sb0']), ('Sb0', ['0', 'N-C1-Sa0-Sb0'])])
find_one_analytics_result using:  0
action  0  : node on -1
action child  0  avg_return: 0.026517344928812886
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 3
action child  1  avg_return: 0.002617010229409401
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'C0-left', 'C0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 7 cumulate planning time: 62
sim.current.step 3
root offset is:  1
['VIN - L - L - VOUT', 'VIN - L - Sa - VOUT', 'VIN - L - Sb - Sb - GND', 'VOUT - L - Sb - Sb - GND', 'VOUT - Sa - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb1']), ('L1', ['N-L0-L1-Sa0-Sb1', 'OUT']), ('Sa0', ['N-L0-L1-Sa0-Sb1', 'OUT']), ('Sb0', ['0', 'N-Sb0-Sb1']), ('Sb1', ['N-L0-L1-Sa0-Sb1', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - L - L - VOUT', 'VIN - L - Sa - Sb - Sb - GND', 'VOUT - L - Sa - Sb - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['N-L0-L1-Sa0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'N-Sb0-Sb1']), ('Sb1', ['0', 'N-Sb0-Sb1'])])
find_one_analytics_result using:  0
find_one_analytics_result using:  0
['VIN - L - Sb - VOUT', 'VIN - L - Sb - VOUT', 'VIN - Sa - VOUT', 'VIN - L - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VIN - Sa - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sb - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0-Sb1']), ('Sa0', ['0', 'N-L0-Sa0-Sb0-Sb1']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-L0-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['N-L0-Sa0-Sb0-Sb1', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
has to be unconnected
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.03773135244885581
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on -1
action child  1  avg_return: 4.449602205101249e-08
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right']
state child 1 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 63
sim.current.step 4
root offset is:  1
['VIN - Sa - VOUT', 'VIN - L - L - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
find_one_analytics_result using:  0
['VIN - Sa - VOUT', 'VIN - L - L - GND', 'VIN - Sa - Sb - GND', 'VOUT - Sa - L - L - GND', 'VOUT - Sa - Sa - Sb - GND']

 PCC-17859
1
OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])
PCC-17859 violations

has to be unconnected
['VIN - L - Sa - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VOUT - Sa - Sa - L - Sb - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT']), ('Sa2', ['0', 'N-Sa2-Sb0']), ('Sb0', ['IN', 'N-Sa2-Sb0'])])
find_one_analytics_result using:  0
has to be unconnected
action  0  : node on 0
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sa2-left', 'Sa2-right']
state child 0 graph: defaultdict(<class 'set'>, {})
action  1  : node on 1
action child  1  avg_return: 0.04126661692411769
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'Sb1-left', 'Sb1-right']
state child 1 graph: defaultdict(<class 'set'>, {})
action  2  : node on 2
action child  2  avg_return: 0.04416506914371261
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {})
instant reward: 0 cumulate reward:  0 planning time: 1 cumulate planning time: 64
sim.current.step 5
root offset is:  1
['VIN - Sb - VOUT', 'VIN - Sb - L - Sa - L - GND', 'VIN - Sb - L - Sa - GND', 'VOUT - L - Sa - L - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1', 'OUT']), ('L1', ['0', 'N-L1-Sa1']), ('Sa0', ['0', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-L1-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
has to be unconnected
['VIN - Sa - VOUT', 'VIN - Sb - Sa - GND', 'VIN - L - Sa - GND', 'VIN - L - Sa - GND', 'VOUT - Sa - Sb - Sa - GND', 'VOUT - Sa - L - Sa - GND', 'VOUT - Sa - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0-Sb0']), ('L1', ['IN', 'N-L0-L1-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sa0-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [1, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {7}, 7: {1}})
action  1  : edge on [1, 11]
action child  1  avg_return: 2.6822379585725307e-09
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {11}, 11: {1}})
action  2  : edge on [1, 5]
action child  2  avg_return: 9.53810884432699e-07
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}})
action  3  : edge on [1, 9]
action child  3  avg_return: 0.0
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {9}, 9: {1}})
action  4  : edge on [1, 3]
action child  4  avg_return: 0.0
state child  4  reward: 0
state  4 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 4 graph: defaultdict(<class 'set'>, {1: {3}, 3: {1}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 6
root offset is:  1
find_one_analytics_result using:  0
['VIN - Sb - VOUT', 'VIN - Sb - L - Sa - Sa - GND', 'VIN - Sb - L - Sa - L - GND', 'VOUT - L - Sa - Sa - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('L1', ['N-L1-Sa1', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-L1-Sa1']), ('Sb0', ['IN', 'OUT'])])
find_one_analytics_result using:  0
action  0  : edge on [2, 3]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {3}, 3: {2}})
action  1  : edge on [2, 11]
action child  1  avg_return: 1.8977456335206475e-06
state child  1  reward: 0
state  1 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 1 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}})
action  2  : edge on [2, 9]
action child  2  avg_return: 0.0
state child  2  reward: 0
state  2 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 2 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {9}, 9: {2}})
action  3  : edge on [2, 7]
action child  3  avg_return: 9.74638008638557e-07
state child  3  reward: 0
state  3 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 3 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {7}, 7: {2}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 7
root offset is:  1
has to be unconnected
action  0  : edge on [0, 7]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 8
root offset is:  1
['VIN - Sb - Sa - L - VOUT', 'VIN - Sb - Sa - L - GND', 'VIN - Sb - Sa - Sa - GND', 'VOUT - L - L - GND', 'VOUT - L - Sa - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-L1-Sa0-Sa1', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0-Sa1']), ('Sa0', ['0', 'N-L0-L1-Sa0-Sa1']), ('Sa1', ['N-L0-L1-Sa0-Sa1', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [3, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0}, 3: {12}, 12: {3}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 9
root offset is:  1
action  0  : edge on [4, 8]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0}, 3: {12}, 12: {3}, 4: {8}, 8: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 10
root offset is:  1
['VIN - Sb - Sa - VOUT', 'VIN - Sb - L - VOUT', 'VIN - Sb - Sa - L - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('L1', ['0', 'N-L1-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['N-L0-Sa0-Sa1-Sb0', 'N-L1-Sa1']), ('Sb0', ['IN', 'N-L0-Sa0-Sa1-Sb0'])])
find_one_analytics_result using:  0
title effi: 0.49 vout: 49.0
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.485814796893819
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0}, 3: {12}, 12: {3}, 4: {8}, 8: {4}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 11
root offset is:  1
['VIN - Sb - Sa - Sa - VOUT', 'VIN - Sb - Sa - L - VOUT', 'VIN - Sb - L - GND', 'VOUT - Sa - Sa - L - GND', 'VOUT - L - Sa - L - GND']

 PCC-device-list
1
OrderedDict([('L0', ['N-L0-Sa0-Sa1', 'OUT']), ('L1', ['0', 'N-L1-Sa1-Sb0']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['N-L0-Sa0-Sa1', 'N-L1-Sa1-Sb0']), ('Sb0', ['IN', 'N-L1-Sa1-Sb0'])])
find_one_analytics_result using:  0
action  0  : edge on [6, 8]
action child  0  avg_return: 3.37512033323873e-14
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0}, 3: {12}, 12: {3}, 4: {8}, 8: {4, 6}, 6: {8}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 12
root offset is:  1
action  0  : edge on [7, 9]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0, 9}, 3: {12}, 12: {3}, 4: {8}, 8: {4, 6}, 6: {8}, 9: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 13
root offset is:  1
action  0  : edge on [8, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0, 9}, 3: {12}, 12: {8, 3}, 4: {8}, 8: {4, 12, 6}, 6: {8}, 9: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 14
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0, 9}, 3: {12}, 12: {8, 3}, 4: {8}, 8: {4, 12, 6}, 6: {8}, 9: {7}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 15
root offset is:  1
action  0  : edge on [10, 12]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0, 9}, 3: {12}, 12: {8, 10, 3}, 4: {8}, 8: {4, 12, 6}, 6: {8}, 9: {7}, 10: {12}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 16
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0, 9}, 3: {12}, 12: {8, 10, 3}, 4: {8}, 8: {4, 12, 6}, 6: {8}, 9: {7}, 10: {12}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
sim.current.step 17
root offset is:  1
action  0  : edge on [-1, -1]
action child  0  avg_return: 0.0
state child  0  reward: 0
state  0 ports: ['GND', 'VIN', 'VOUT', 'Sa0-left', 'Sa0-right', 'Sb0-left', 'Sb0-right', 'L0-left', 'L0-right', 'Sa1-left', 'Sa1-right', 'L1-left', 'L1-right']
state child 0 graph: defaultdict(<class 'set'>, {1: {5}, 5: {1}, 2: {11}, 11: {2}, 0: {7}, 7: {0, 9}, 3: {12}, 12: {8, 10, 3}, 4: {8}, 8: {4, 12, 6}, 6: {8}, 9: {7}, 10: {12}})
instant reward: 0 cumulate reward:  0 planning time: 0 cumulate planning time: 64
effis of topo: [{'parameter': '0.9', 'efficiency': {'efficiency': 0.49, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
#####################Game:   steps:  19   average cumulate reward:  0
title result with parameter:0.9 
-1 , 10 : 19.0
[{'parameter': '0.9', 'efficiency': {'efficiency': 0.49, 'output_voltage': 49.0}, 'output_voltage': 49.0}]
hash counter 0
hash length 91
figures are saved in:figures/2021-05-21-13-45-10/

outputs are saved in:Results/mutitest_50-2021-05-21-13-45-10-17859.txt

