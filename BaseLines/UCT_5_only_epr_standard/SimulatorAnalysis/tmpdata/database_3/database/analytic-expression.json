{"OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Rb0 + Rin) - Ra0*Rin/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["L0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 0, -1], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "IN", "8"], ["C1", "0", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "8"], ["L0", "8", "0"], ["C0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "0", "7"], ["C0", "OUT", "IN"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "47", "Vout": "-430"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "78", "Vout": "-314"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "89", "Vout": "-208"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "93", "Vout": "-140"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "95", "Vout": "-95"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "96", "Vout": "-64"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "96", "Vout": "-41"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "95", "Vout": "-24"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["L0", "5", "0"], ["Sa0", "IN", "5"]]}, "Efficiency": "89", "Vout": "-10"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -1/L0], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["L0", "IN", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["C0", "5", "0"], ["L0", "IN", "5"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-C0-Sb1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "98", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 0], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["L1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "0"], ["Sa0", "5", "IN"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, -1], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "IN", "6"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["C0", "0", "IN"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["L0", "0", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["C1", "IN", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sa0']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/C0, 1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/C0, 1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 1, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "0"], ["C0", "OUT", "7"], ["L0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sb0", "IN", "OUT"], ["C1", "7", "IN"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 1, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "OUT"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sa0", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), 0], [0, -1/(C0*Rin)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "0", "IN"], ["Sb0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sb0", "OUT", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1*Rin/(L0*Rb1 + L0*Rin) - Rb0/L0, Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1*Rin/(L0*Ra1 + L0*Rin) - Ra0/L0, Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "109"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "122"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "139"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "96", "Vout": "161"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "95", "Vout": "191"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "93", "Vout": "233"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "89", "Vout": "296"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "78", "Vout": "392"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Rb0/(L0*Ra0 + L0*Rb0)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, Ra0/(L0*Ra0 + L0*Rb0)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[-1/L0], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sb0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "47", "Vout": "475"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["L0", "IN", "6"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['0', 'N-L0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['IN', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), 1/L0], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "OUT", "IN"], ["C0", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["C0", "8", "OUT"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['IN', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "IN"], ["C0", "5", "0"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "7", "IN"], ["Sa1", "7", "OUT"]]}, "Efficiency": "83", "Vout": "83"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sa0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0) - 1/(Cout*Ra0), 1/(Cout*Rb0) + 1/(Cout*Ra0)], [1/(C0*Rb0) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Rb0) - 1/(C0*Ra0)]]", "b": "[[0], [1/(C0*Rin)]]", "c": "[[0, 1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "IN", "0"], ["Sa0", "IN", "OUT"], ["Sb0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 1, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "5", "0"], ["Sb0", "5", "OUT"], ["C0", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sa0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [-1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "7", "0"], ["L0", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "OUT"], ["C1", "0", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "0"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 1/L0], [-1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, -1], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["L0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "OUT"], ["C0", "8", "0"], ["Sa0", "IN", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["Sa1", "OUT", "IN"], ["C0", "OUT", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "7"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin) + Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "89", "Vout": "9"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "96", "Vout": "19"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "97", "Vout": "29"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "98", "Vout": "39"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "98", "Vout": "49"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "98", "Vout": "59"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "98", "Vout": "69"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "98", "Vout": "79"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), 1/L0], [-1/Cout, -1/(Cout*Rout)]]", "b": "[[-Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0 + Rin) + Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["L0", "OUT", "6"], ["Sb0", "6", "IN"]]}, "Efficiency": "98", "Vout": "89"}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), 0], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "7"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "7", "OUT"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sa0", "OUT", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['IN', 'N-L0-Sb0-Sb1']), ('Sb1', ['N-L0-Sb0-Sb1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "7", "IN"], ["Sb1", "7", "OUT"]]}, "Efficiency": "95", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["C0", "5", "OUT"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['N-C0-L0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), 1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), 1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["L0", "5", "0"], ["Sa0", "5", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "7", "0"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Rb0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout), 0], [-1/C0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rin)]]", "c": "[[-Ra0, 0, 1], [0, 0, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "IN", "0"], ["Sb0", "IN", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sb0', 'OUT']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[1/L0], [0], [0]]", "c": "[[0, 1, 1], [-Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["L0", "IN", "6"], ["C0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "IN", "6"], ["Sb0", "OUT", "6"], ["C1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rb0/(Rb0 + Rin) + Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Ra0/(Ra0 + Rin) + Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["Sa0", "7", "0"], ["C1", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), 1/L0, Rb0/(L0*Rb0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), 0, -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), 1/L0, Ra0/(L0*Ra0 + L0*Rin)], [-1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), 0, -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "OUT", "6"], ["Sb0", "0", "6"], ["C0", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [1, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "7", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["C0", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "OUT"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0']), ('L0', ['N-C0-L0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 0, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sb0", "IN", "OUT"], ["L0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sa0", "0", "7"], ["L0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["L1", "5", "OUT"], ["Sa0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "OUT", "7"], ["C0", "IN", "7"], ["C1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["C1", "IN", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1) - 1/(Cout*Ra0), -1/(Cout*Ra1) - 1/(Cout*Ra0)], [-1/(C0*Ra1) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra1) - 1/(C0*Ra0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1) - 1/(Cout*Rb0), -1/(Cout*Rb1) - 1/(Cout*Rb0)], [-1/(C0*Rb1) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb1) - 1/(C0*Rb0)]]", "b": "[[0], [-1/(C0*Rin)]]", "c": "[[0, -1], [0, 0], [1, 0]]", "d": "[[0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "IN"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-C0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) + Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "IN", "OUT"], ["Sa1", "0", "7"], ["C0", "7", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[0, 1, -1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "0"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["C0", "0", "6"], ["C1", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), -1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), -1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "OUT"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['0', 'N-L0-L1']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-C0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['IN', 'N-C0-C1-Sa0']), ('Sa0', ['N-C0-C1-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "OUT"], ["C0", "0", "6"], ["C1", "6", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['0', 'N-C0-C1-Sb0']), ('Sb0', ['IN', 'N-C0-C1-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['IN', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/C0, -1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rin/L0, 0, -1/L0], [0, -1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/C0, -1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[0, 0, -1], [Rin, 0, 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["L0", "7", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['N-C0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout), -Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout), -Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra1 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["C0", "0", "6"], ["Sb0", "OUT", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sa0']), ('L0', ['N-C0-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -1/L0, Ra0/(L0*Ra0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Ra0/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [0], [-1/(C0*Ra0 + C0*Rin)]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), 0, Ra0/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), 0, -Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -1/L0, Rb0/(L0*Rb0 + L0*Rin)], [1/Cout, -1/(Cout*Rout), 0], [-Rb0/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [0], [-1/(C0*Rb0 + C0*Rin)]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), 0, Rb0/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), 0, -Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "IN"], ["Sa0", "0", "6"], ["L0", "6", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('Sa0', ['N-C0-Sa0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "OUT", "8"], ["C0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) + Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "0"], ["C0", "OUT", "7"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["Sa0", "8", "OUT"], ["Sa1", "IN", "8"]]}, "Efficiency": "83", "Vout": "83"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['IN', 'N-Sa1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, -1/L1], [0, 1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 0], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "IN"], ["L1", "8", "OUT"], ["Sb0", "0", "8"]]}, "Efficiency": "98", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sa0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['IN', 'N-L0-L1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "IN", "6"], ["L0", "OUT", "6"], ["L1", "6", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "OUT", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0 + Rin) + Ra0*Rin/(Ra0 + Rin) + Rb0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Rb0 + Rin) + Ra0*Rin/(Rb0 + Rin) + Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "IN"], ["L0", "0", "6"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['IN', 'N-C0-Sa0-Sa1']), ('Sa1', ['N-C0-Sa0-Sa1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), -1/(Cout*Ra1)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [-Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), -1/(Cout*Rb1)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [-Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "7", "0"], ["Sb1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-Sa1-Sb0']), ('Sb0', ['N-Sa1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "OUT", "IN"], ["Sa1", "0", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "95", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['N-L0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-L0-Sa0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), -Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0*Ra1/(Ra0 + Ra1 + Rin) + Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), -Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0*Rb1/(Rb0 + Rb1 + Rin) + Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["L0", "0", "8"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["Sb0", "5", "IN"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "OUT"], ["Sa0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["Sa0", "5", "OUT"], ["C0", "IN", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sb0', ['0', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 1, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["L0", "0", "6"], ["C0", "OUT", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, 1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [-1/C0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[-Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["C0", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Ra0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0, -1/L0], [1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), -1/(Cout*Rin)], [1/C0, -1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [1/(C0*Rin)]]", "c": "[[Rb0, 1, 1], [0, 1, 1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "IN", "8"], ["C0", "IN", "OUT"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sb0']), ('C1', ['N-C0-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), -1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "IN"], ["Sb0", "5", "0"], ["C1", "OUT", "5"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin)], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin)], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, 0], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "OUT"], ["C1", "OUT", "IN"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C1-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "47", "Vout": "475"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "78", "Vout": "392"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "89", "Vout": "296"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "93", "Vout": "233"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "95", "Vout": "191"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "96", "Vout": "161"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "97", "Vout": "139"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "98", "Vout": "122"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0-Sb0']), ('Sa0', ['0', 'N-L0-Sa0-Sb0']), ('Sb0', ['N-L0-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Ra0/(L0*Ra0 + L0*Rb0)], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0) - Rin/L0, -Rb0/(L0*Ra0 + L0*Rb0)], [Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)]]", "b": "[[1/L0], [0]]", "c": "[[Ra0*Rb0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [-Rin, 0], [0, 0], [0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "IN", "5"], ["Sa0", "5", "0"], ["Sb0", "5", "OUT"]]}, "Efficiency": "98", "Vout": "109"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['N-L0-Sa1', 'OUT']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['0', 'N-L0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "OUT", "7"], ["Sa0", "OUT", "IN"], ["Sa1", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-L0']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin), -Ra0/(L0*Ra0 + L0*Rin) - Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin) - Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin), -Rb0/(L0*Rb0 + L0*Rin) - Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin) - Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["C0", "IN", "6"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), -Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[0, -1], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "7"], ["Sb0", "7", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout), 0], [0, 0, -1/(C0*Rin)]]", "b": "[[0], [0], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 0, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "0", "IN"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin) - Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin) - Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sa0", "0", "6"], ["C0", "IN", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["Sa1", "OUT", "IN"], ["L0", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0 + Rin/L0, 1/L0], [Rb0/L1 + Rin/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Rb0 + Rin, -Rb0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0 + Rin/L0, 1/L0], [Ra0/L1 + Rin/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[-1/L0], [1/L1], [0]]", "c": "[[Ra0 + Rin, -Ra0 - Rin, 0], [Rin, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["L1", "5", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['IN', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "0"], ["Sb0", "5", "IN"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['IN', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["Sa0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, -1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "L0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "OUT", "5"], ["L0", "5", "0"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['0', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 1/L0], [-Ra0/L1, -Ra0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Ra0, -Ra0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 1/L0], [-Rb0/L1, -Rb0/L1, 1/L1], [-1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [0], [0]]", "c": "[[-Rb0, -Rb0, 1], [Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "IN"], ["Sa0", "OUT", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-L0-Sb0']), ('L0', ['0', 'N-C0-L0-Sb0']), ('Sb0', ['N-C0-L0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin), -Rin/(L0*Rb0 + L0*Rin), Rb0/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), -Rb0/(Rb0 + Rin)], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin), -Rin/(L0*Ra0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), -Ra0/(Ra0 + Rin)], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["Sb0", "OUT", "8"], ["L0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[0, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "0"], ["Sa0", "OUT", "IN"], ["Sb0", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rin), Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rin) - Rb0*Rin/(Rb0 + Rin) - Rb1*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rin)], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Rin), Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Rin) - Ra0*Rin/(Ra0 + Rin) - Ra1*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rin)], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["L0", "7", "0"], ["Sb0", "IN", "OUT"], ["Sb1", "7", "IN"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-Sa0-Sb1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sb0", "OUT", "IN"], ["Sb1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0-Sb1']), ('Sb0', ['N-L0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-L0-Sb0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb1*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb0*Rin/(Rb0 + Rb1 + Rin), Rb1/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb0*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra1*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra0*Rin/(Ra0 + Ra1 + Rin), Ra1/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra0*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "OUT"], ["Sb1", "IN", "6"], ["L0", "6", "0"]]}, "Efficiency": "95", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-C0-Sa1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [-1/(C0*Ra1), -1/(C0*Ra1)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout), -Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [-1/(C0*Rb1), -1/(C0*Rb1)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)], [0]]", "c": "[[0, -1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "OUT", "IN"], ["C0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sa1', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "IN"], ["Sb0", "0", "8"], ["Sa1", "OUT", "8"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "95", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sa1']), ('Sa0', ['IN', 'N-L0-Sa0-Sa1']), ('Sa1', ['N-L0-Sa0-Sa1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra0 + L0*Ra1 + L0*Rin), Ra0/(L0*Ra0 + L0*Ra1 + L0*Rin) + Rin/(L0*Ra0 + L0*Ra1 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra0 + L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra0 + Ra1 + Rin) - Ra1*Rin/(Ra0 + Ra1 + Rin), Ra0/(Ra0 + Ra1 + Rin) + Rin/(Ra0 + Ra1 + Rin)], [-Ra1*Rin/(Ra0 + Ra1 + Rin), Rin/(Ra0 + Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra0 + Ra1 + Rin)], [Ra0/(Ra0 + Ra1 + Rin) + Ra1/(Ra0 + Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb0 + L0*Rb1 + L0*Rin), Rb0/(L0*Rb0 + L0*Rb1 + L0*Rin) + Rin/(L0*Rb0 + L0*Rb1 + L0*Rin)], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb0 + L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb0 + Rb1 + Rin) - Rb1*Rin/(Rb0 + Rb1 + Rin), Rb0/(Rb0 + Rb1 + Rin) + Rin/(Rb0 + Rb1 + Rin)], [-Rb1*Rin/(Rb0 + Rb1 + Rin), Rin/(Rb0 + Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb0 + Rb1 + Rin)], [Rb0/(Rb0 + Rb1 + Rin) + Rb1/(Rb0 + Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "L0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "IN"], ["Sa1", "OUT", "6"], ["L0", "6", "0"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0-Sa0', 'OUT']), ('L0', ['0', 'N-C0-L0-Sa0']), ('Sa0', ['IN', 'N-C0-L0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [-Ra0/(C0*Ra0 + C0*Rin) - Rin/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin), -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [-Rb0/(C0*Rb0 + C0*Rin) - Rin/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin), -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "IN", "7"], ["C0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "89", "Vout": "-10"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "95", "Vout": "-24"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "96", "Vout": "-41"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "96", "Vout": "-64"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "95", "Vout": "-95"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "93", "Vout": "-140"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "89", "Vout": "-208"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "78", "Vout": "-314"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0-Sb0']), ('Sa0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Rb0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), Rb0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Ra0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin) + Rin/(L0*Ra0 + L0*Rb0 + L0*Rin)], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), Ra0/(Ra0 + Rb0 + Rin) + Rin/(Ra0 + Rb0 + Rin)], [-Rb0*Rin/(Ra0 + Rb0 + Rin), Rin/(Ra0 + Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "IN"], ["Sa0", "7", "OUT"], ["L0", "7", "0"]]}, "Efficiency": "47", "Vout": "-430"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'IN']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sb0']), ('L1', ['0', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, Rb0/L0, -1/L0], [Rb0/L1, -Rb0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, -Rb0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, Ra0/L0, -1/L0], [Ra0/L1, -Ra0/L1, 1/L1], [1/Cout, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, -Ra0, 1], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "7", "OUT"], ["L0", "IN", "7"], ["L1", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['N-C0-L0', 'OUT']), ('L0', ['0', 'N-C0-L0']), ('Sa0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Ra0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, -1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), 0], [1/C0, 0, 0]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)], [0]]", "c": "[[0, 1, 1], [0, Rin/(Rb0 + Rin), 0], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["L0", "0", "5"], ["C0", "5", "OUT"], ["Sa0", "IN", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "89", "Vout": "89"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "93", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['N-C0-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "OUT"], ["Sb0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "89", "Vout": "89"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, 1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["C1", "8", "0"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['IN', 'N-L0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, -Rin/(L0*Ra0 + L0*Rin)], [Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[-Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 0], [Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, -Rin/(L0*Rb0 + L0*Rin)], [Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[-Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 0], [Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["Sb0", "0", "5"], ["L0", "5", "IN"], ["Sa0", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "IN", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['IN', 'N-L0-L1']), ('L1', ['0', 'N-L0-L1']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['N-L0-L1', 'OUT']), ('L1', ['0', 'N-L0-L1']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "89"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "79"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "69"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "59"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "49"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "98", "Vout": "39"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "97", "Vout": "29"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "96", "Vout": "19"}, "OrderedDict([('L0', ['N-L0-Sa0-Sb0', 'OUT']), ('Sa0', ['IN', 'N-L0-Sa0-Sb0']), ('Sb0', ['0', 'N-L0-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Rb0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [-Rb0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Rb0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(L0*Ra0 + L0*Rb0 + L0*Rin) - Ra0*Rin/(L0*Ra0 + L0*Rb0 + L0*Rin), -1/L0], [1/Cout, -1/(Cout*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rb0 + L0*Rin)], [0]]", "c": "[[-Ra0*Rb0/(Ra0 + Rb0 + Rin) - Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [-Ra0*Rin/(Ra0 + Rb0 + Rin), 0], [0, 0], [0, 1]]", "d": "[[Ra0/(Ra0 + Rb0 + Rin)], [Ra0/(Ra0 + Rb0 + Rin) + Rb0/(Ra0 + Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["L0", "8", "OUT"], ["Sa0", "IN", "8"]]}, "Efficiency": "89", "Vout": "9"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sa0", "0", "8"], ["Sa1", "OUT", "IN"], ["Sb0", "IN", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb1*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sa0", "IN", "7"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['N-C0-C1', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['IN', 'N-C0-Sb0-Sb1']), ('Sb1', ['N-C0-Sb0-Sb1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb1), 1/(Cout*Rb1)], [Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "b": "[[0], [Rb1/(C0*Rb0*Rb1 + C0*Rb1*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra1), 1/(Cout*Ra1)], [Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "b": "[[0], [Ra1/(C0*Ra0*Ra1 + C0*Ra1*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "6", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "98", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['IN', 'N-L0-L1-Sa0']), ('L1', ['N-L0-L1-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-L1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0, 0], [-Ra0/L1, -Ra0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Ra0, Ra0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0, 0], [-Rb0/L1, -Rb0/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[1/L0], [0], [0]]", "c": "[[Rb0, Rb0, 0], [-Rin, 0, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "IN", "6"], ["Sa0", "0", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout), -Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [-1/(C0*Ra0), -1/(C0*Ra0)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Rb0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout), -Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [-1/(C0*Rb0), -1/(C0*Rb0)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Rb0*Rin*Rout)], [0]]", "c": "[[1, 1], [Rin/(Ra0 + Rin), 0], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "6", "OUT"], ["Sa0", "0", "6"], ["Sb0", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), Ra0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) + Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), Rb0/(Ra0 + Rb0)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "5", "OUT"], ["Sb0", "5", "IN"], ["C0", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['N-L0-Sa0', 'OUT']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "L0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["L0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin), -1/(Cout*Ra0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin), -1/(Cout*Rb0)], [1/(C0*Rin), -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "OUT", "IN"], ["C1", "7", "OUT"], ["Sa0", "7", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "OUT", "6"], ["Sa0", "0", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "83", "Vout": "83"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['N-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sb0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) + Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb1/(Rb0 + Rb1), Rb0/(Rb0 + Rb1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) + Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra1/(Ra0 + Ra1), Ra0/(Ra0 + Ra1)], [0, 1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "OUT", "8"], ["C0", "IN", "0"], ["Sb1", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'OUT']), ('Sb0', ['IN', 'N-C0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, -1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [-1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, -1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [-1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [1/(C0*Rin)], [0]]", "c": "[[1, 0, 1], [0, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "IN", "0"], ["C1", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[0, -1, 1], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "8"], ["C1", "IN", "0"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['0', 'IN']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sb0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0/(Ra0 + Rb0), -Rb0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rb0/(Cout*Ra0*Rout + Cout*Rb0*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout), -Rout/(Cout*Ra0*Rout + Cout*Rb0*Rout)], [-Rin/(C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0/(Ra0 + Rb0), -Ra0/(Ra0 + Rb0)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "OUT", "8"], ["Sa0", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['0', 'N-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Rb0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0, 0], [-1/Cout, -1/(Cout*Rout) - 1/(Cout*Rin), 1/(Cout*Rin)], [0, 1/(C0*Rin), -1/(C0*Rin)]]", "b": "[[0], [1/(Cout*Rin)], [-1/(C0*Rin)]]", "c": "[[Ra0, 0, 0], [0, 1, -1], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "0"], ["L0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "89", "Vout": "89"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "93", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sb0']), ('Sa0', ['IN', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Ra0*Rb0 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb0 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sa0", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "89", "Vout": "89"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['IN', 'N-L0-Sa0']), ('Sa0', ['0', 'N-L0-Sa0']), ('Sb0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rin/(L0*Rb0 + L0*Rin) - Ra0/L0, Rin/(L0*Rb0 + L0*Rin)], [-Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[Rb0/(L0*Rb0 + L0*Rin)], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 0], [-Rb0*Rin/(Rb0 + Rin), Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rin/(L0*Ra0 + L0*Rin) - Rb0/L0, Rin/(L0*Ra0 + L0*Rin)], [-Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[Ra0/(L0*Ra0 + L0*Rin)], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 0], [-Ra0*Rin/(Ra0 + Rin), Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "IN", "OUT"], ["Sa0", "0", "8"], ["L0", "IN", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sb0']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['N-C0-C1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Rin)], [0, -1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[0], [-1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[0, -1, 0], [0, -1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "5"], "net_list": [["C0", "0", "5"], ["Sb0", "5", "OUT"], ["C1", "5", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-Sa0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb1/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sa0", "7", "OUT"], ["Sb0", "OUT", "IN"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['N-L0-L1', 'OUT']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['N-L0-Sa0', 'OUT']), ('Sa1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -1/L0], [Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -1/L0], [Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sa0", "OUT", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sa1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['N-L0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, 1/L0], [-Rb1*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, 1/L0], [-Ra1*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['IN', 'N-C0-C1-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "83", "Vout": "83"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'IN']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rb1/(Cout*Rb0*Rout + Cout*Rb1*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout), -Rout/(Cout*Rb0*Rout + Cout*Rb1*Rout)], [-Rin/(C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rin + C0*Rb1*Rin) - Rb1/(C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[Rb0/(Rb0 + Rb1), -Rb1/(Rb0 + Rb1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Ra1/(Cout*Ra0*Rout + Cout*Ra1*Rout) - Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout), -Rout/(Cout*Ra0*Rout + Cout*Ra1*Rout)], [-Rin/(C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Rin + C0*Ra1*Rin) - Ra1/(C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[Ra0/(Ra0 + Ra1), -Ra1/(Ra0 + Ra1)], [0, -1], [0, 0], [1, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "7"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('Sa0', ['N-Sa0-Sa1-Sb0', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1-Sb0']), ('Sb0', ['0', 'N-Sa0-Sa1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sa0", "OUT", "5"], ["Sa1", "5", "IN"], ["Sb0", "0", "5"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['N-C0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rb0), -1/(C0*Rb0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Ra0), -1/(C0*Ra0), 0], [-1/(C1*Rin), 0, -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[0, 1, 0], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "0"], ["C1", "IN", "OUT"], ["Sb0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0-Sb0']), ('Sa0', ['0', 'N-C0-Sa0-Sb0']), ('Sb0', ['N-C0-Sa0-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [-Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["Sb0", "8", "OUT"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['N-C1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), -1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [-1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), -1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [-1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[0, -1, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "IN"], ["C1", "IN", "7"], ["Sb0", "7", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0']), ('Sb0', ['N-Sa0-Sb0', 'OUT']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sa0", "6", "0"], ["Sb0", "OUT", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('C1', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rb0), -1/(Cout*Rin) - 1/(Cout*Rb0)], [1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rin) - 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Ra0), -1/(Cout*Rin) - 1/(Cout*Ra0)], [1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Rin) - 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 1], [1, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["C0", "IN", "6"], ["C1", "IN", "OUT"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sb0', 'OUT']), ('C1', ['0', 'IN']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["C0", "OUT", "6"], ["Sb0", "0", "6"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1']), ('C1', ['0', 'N-C0-C1']), ('Sa0', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin) + 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Rin) + 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin) + 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rin) + 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[0, 0, 1], [0, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "7", "IN"], ["Sa0", "IN", "OUT"], ["C1", "7", "0"]]}, "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "99", "Vout": "99"}, "OrderedDict([('L0', ['N-L0-L1-Sb0', 'OUT']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['0', 'N-L0-L1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Rb0, -Rb0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, 0], [-1/Cout, 0, -1/(Cout*Rout)]]", "b": "[[0], [-1/L1], [0]]", "c": "[[Ra0, -Ra0, 0], [0, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["L0", "OUT", "6"], ["L1", "6", "IN"]]}, "Efficiency": "98", "Vout": "99"}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['0', 'N-L0-Sa0']), ('Sa0', ['IN', 'N-L0-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['IN', 'N-C0-Sb0']), ('Sa0', ['IN', 'OUT']), ('Sb0', ['0', 'N-C0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Ra0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout), Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin), -Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin) - Rin/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rin*Rout)], [Rb0/(C0*Ra0*Rb0 + C0*Ra0*Rin + C0*Rb0*Rin)]]", "c": "[[Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), -Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin) - Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin), Rb0*Rin/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [0, 0], [1, 0]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["C0", "IN", "7"], ["Sa0", "IN", "OUT"], ["Sb0", "7", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sa1']), ('Sa1', ['N-Sa0-Sa1', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-C1-Sb0', 'OUT']), ('C1', ['IN', 'N-C0-C1-Sb0']), ('Sb0', ['0', 'N-C0-C1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Rin)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Rin)], [-1/(C1*Rin), 1/(C1*Rin), -1/(C1*Rin)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [1/(C1*Rin)]]", "c": "[[1, -1, 0], [1, -1, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["Sb0", "0", "8"], ["C0", "OUT", "8"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 0, 1/(Cout*Rb0)], [0, -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 0, 1/(Cout*Ra0)], [0, -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "8", "0"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0']), ('C1', ['0', 'IN']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0), 0], [1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0), 0], [1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [-1/(C1*Rin)]]", "c": "[[0, 1, 0], [0, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "0"], ["Sa0", "5", "OUT"], ["C1", "0", "IN"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['0', 'OUT']), ('Sa0', ['N-C0-Sa0', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['IN', 'N-Sa0-Sb0-Sb1']), ('Sb1', ['N-Sa0-Sb0-Sb1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [0], [1]]", "d": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "IN"], ["Sa0", "5", "0"], ["Sb1", "5", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rin/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0], [1]]", "d": "[[Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [Ra0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin) + Rb0*Rb1/(Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rin + Ra1*Rb0 + Ra1*Rin + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["Sb0", "0", "6"], ["Sa0", "IN", "6"], ["Sb1", "IN", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-C1']), ('C1', ['N-C0-C1', 'OUT']), ('Sa0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['0', 'N-C1-Sb0']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), -1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [-1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), -1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [-1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[0, 0, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "OUT", "IN"], ["Sb0", "8", "IN"], ["C1", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb0']), ('Sb0', ['IN', 'N-L0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(L0*Rb1 + L0*Rin) - Rb0*Rin/(L0*Rb1 + L0*Rin) - Rb1*Rin/(L0*Rb1 + L0*Rin), Rin/(L0*Rb1 + L0*Rin)], [-Rin*Rout/(Cout*Rb1*Rout + Cout*Rin*Rout), -Rb1/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb1*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "b": "[[Rb1/(L0*Rb1 + L0*Rin)], [Rout/(Cout*Rb1*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb0*Rb1/(Rb1 + Rin) - Rb0*Rin/(Rb1 + Rin) - Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [-Rb1*Rin/(Rb1 + Rin), Rin/(Rb1 + Rin)], [0, 0], [0, 1]]", "d": "[[Rb1/(Rb1 + Rin)], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(L0*Ra1 + L0*Rin) - Ra0*Rin/(L0*Ra1 + L0*Rin) - Ra1*Rin/(L0*Ra1 + L0*Rin), Rin/(L0*Ra1 + L0*Rin)], [-Rin*Rout/(Cout*Ra1*Rout + Cout*Rin*Rout), -Ra1/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra1*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "b": "[[Ra1/(L0*Ra1 + L0*Rin)], [Rout/(Cout*Ra1*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra0*Ra1/(Ra1 + Rin) - Ra0*Rin/(Ra1 + Rin) - Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [-Ra1*Rin/(Ra1 + Rin), Rin/(Ra1 + Rin)], [0, 0], [0, 1]]", "d": "[[Ra1/(Ra1 + Rin)], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["L0", "6", "0"], ["Sb0", "IN", "6"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sa0-Sa1']), ('Sa0', ['N-C0-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0)], [-Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0)], [-Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, -1], [0, -Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "8"], ["Sa1", "8", "IN"], ["C0", "0", "8"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-Sa0']), ('C1', ['IN', 'OUT']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [0], [-1/(C1*Rin)]]", "c": "[[1, 1, -1], [1, 0, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "8", "IN"], ["C1", "OUT", "IN"], ["Sa0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('L0', ['N-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), 1/(Cout*Rin) + 1/(Cout*Rb0), 1/(Cout*Rb0)], [1/(C0*Rin) + 1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), -1/(C0*Rb0)], [1/(C1*Rb0), -1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), 1/(Cout*Rin) + 1/(Cout*Ra0), 1/(Cout*Ra0)], [1/(C0*Rin) + 1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), -1/(C0*Ra0)], [1/(C1*Ra0), -1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [-1/(C0*Rin)], [0]]", "c": "[[1, -1, -1], [1, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "0"], ["C0", "OUT", "IN"], ["C1", "IN", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['N-Sa0-Sa1', 'OUT']), ('Sa1', ['IN', 'N-Sa0-Sa1'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['N-L0-L1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-L0-L1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0 - Rin/L0, -Rb0/L0 - Rin/L0, 0], [-Rb0/L1 - Rin/L1, -Rb0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Rb0 + Rin, Rb0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0 - Rin/L0, -Ra0/L0 - Rin/L0, 0], [-Ra0/L1 - Rin/L1, -Ra0/L1 - Rin/L1, 1/L1], [0, -1/Cout, -1/(Cout*Rout)]]", "b": "[[-1/L0], [-1/L1], [0]]", "c": "[[Ra0 + Rin, Ra0 + Rin, 0], [Rin, Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[1], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "IN", "6"], ["L1", "OUT", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['N-L0-Sb1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "0"], ["Sb1", "7", "OUT"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb1']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["Sb1", "7", "IN"], ["C0", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['IN', 'OUT']), ('Sa1', ['N-Sa1-Sb0', 'OUT']), ('Sb0', ['0', 'N-Sa1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra1*Rin*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra1 + Rb0)], [Rin/(Ra0 + Rin)], [0], [1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout) + Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb1*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb1)], [Rin/(Rb0 + Rin)], [0], [1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "OUT", "IN"], ["Sb0", "8", "0"], ["Sa1", "OUT", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'OUT']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['0', 'N-C1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Rb0), 0, -1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 0], [1/(C1*Ra0), 0, -1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [1, 1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "C1", "Rb0", "Ra0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["C0", "IN", "OUT"], ["C1", "OUT", "8"], ["Sb0", "0", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['N-L0-Sb1', 'OUT']), ('Sb0', ['IN', 'OUT']), ('Sb1', ['0', 'N-L0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, -1/L0], [Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 0], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, -1/L0], [Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) + Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 0], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "L0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "7", "0"], "net_list": [["Sb0", "OUT", "IN"], ["L0", "7", "OUT"], ["Sb1", "7", "0"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('C0', ['0', 'OUT']), ('Sb0', ['IN', 'N-Sb0-Sb1']), ('Sb1', ['N-Sb0-Sb1', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['IN', 'N-C0-C1-Sa0']), ('C1', ['N-C0-C1-Sa0', 'OUT']), ('Sa0', ['0', 'N-C0-C1-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Ra0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Ra0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Ra0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Ra0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rin) - 1/(Cout*Rb0), -1/(Cout*Rin), 1/(Cout*Rin) + 1/(Cout*Rb0)], [-1/(C0*Rin), -1/(C0*Rin), 1/(C0*Rin)], [1/(C1*Rin) + 1/(C1*Rb0), 1/(C1*Rin), -1/(C1*Rin) - 1/(C1*Rb0)]]", "b": "[[1/(Cout*Rin)], [1/(C0*Rin)], [-1/(C1*Rin)]]", "c": "[[1, 0, -1], [1, 1, -1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Ra0", "Rb0", "C0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sa0", "8", "0"], ["C0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'OUT']), ('Sa0', ['IN', 'N-C0-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-L0-Sb0']), ('L0', ['N-C0-L0-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C0-L0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Rb0/(C0*Rb0 + C0*Rin) + Rin/(C0*Rb0 + C0*Rin), 0, -1/(C0*Rb0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Rb0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Rb0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[0, 1/L0, -1/L0], [-1/Cout, -1/(Cout*Rout), 0], [Ra0/(C0*Ra0 + C0*Rin) + Rin/(C0*Ra0 + C0*Rin), 0, -1/(C0*Ra0 + C0*Rin)]]", "b": "[[0], [0], [1/(C0*Ra0 + C0*Rin)]]", "c": "[[0, 0, 1], [0, 0, Rin/(Ra0 + Rin)], [0, 0, 0], [0, 1, 0]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["L0", "OUT", "5"], ["Sb0", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'IN']), ('C1', ['N-C1-Sb0', 'OUT']), ('Sb0', ['IN', 'N-C1-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 1/(Cout*Rb0)], [-1/(C0*Rb0), -1/(C0*Rin) - 1/(C0*Rb0), 1/(C0*Rb0)], [1/(C1*Rb0), 1/(C1*Rb0), -1/(C1*Rb0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 1/(Cout*Ra0)], [-1/(C0*Ra0), -1/(C0*Rin) - 1/(C0*Ra0), 1/(C0*Ra0)], [1/(C1*Ra0), 1/(C1*Ra0), -1/(C1*Ra0)]]", "b": "[[0], [-1/(C0*Rin)], [0]]", "c": "[[1, 0, -1], [0, -1, 0], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Rb0", "Ra0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "0", "8"], "net_list": [["C0", "0", "IN"], ["Sb0", "IN", "8"], ["C1", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sa0']), ('L1', ['IN', 'N-L0-L1-Sa0']), ('Sa0', ['N-L0-L1-Sa0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, Ra0/L0, 1/L0], [Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, Rb0/L0, 1/L0], [Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [-1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[-Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "L1", "Ra0", "Rb0"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["L1", "IN", "8"], ["Sa0", "OUT", "8"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0']), ('Sb0', ['IN', 'N-C0-Sb0']), ('Sb1', ['IN', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb0*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, 1], [Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, 1], [Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "C0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "IN", "5"], ["C0", "5", "0"], ["Sb1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-L1']), ('L1', ['IN', 'N-L0-L1']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['0', 'N-C1-Sa0']), ('Sa0', ['IN', 'N-C1-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('C0', ['0', 'N-C0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['IN', 'N-C0-Sa1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout), -Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "b": "[[Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rin*Rout)], [-Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin + C0*Ra1*Rin)]]", "c": "[[0, -1], [Ra1*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin), -Ra0*Rin/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rin + Ra1*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_7(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0*Rb1/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb0*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rin/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout), -Rin*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "b": "[[Rb1*Rout/(Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout + Cout*Rb1*Rin*Rout)], [-Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin + C0*Rb1*Rin)]]", "c": "[[0, -1], [Rb1*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin), -Rb0*Rin/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb0*Rb1/(Rb0*Rb1 + Rb0*Rin + Rb1*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "0", "7"], "net_list": [["C0", "0", "7"], ["Sa0", "IN", "OUT"], ["Sa1", "7", "IN"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-C1', 'OUT']), ('C1', ['0', 'N-C0-C1']), ('Sb0', ['IN', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "98"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('L0', ['0', 'N-L0-Sa1']), ('Sa0', ['IN', 'OUT']), ('Sa1', ['N-L0-Sa1', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra1/L0, 1/L0], [-Ra0*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rout + Cout*Rin*Rout), -Ra0/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rin/(Cout*Ra0*Rout + Cout*Rin*Rout) - Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Ra0*Rout + Cout*Rin*Rout)]]", "c": "[[-Ra1, 1], [0, Rin/(Ra0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Ra0/(Ra0 + Rin)], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb1/L0, 1/L0], [-Rb0*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin*Rout/(Cout*Rb0*Rout + Cout*Rin*Rout), -Rb0/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rin/(Cout*Rb0*Rout + Cout*Rin*Rout) - Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "b": "[[0], [Rout/(Cout*Rb0*Rout + Cout*Rin*Rout)]]", "c": "[[-Rb1, 1], [0, Rin/(Rb0 + Rin)], [0, 0], [0, 1]]", "d": "[[0], [Rb0/(Rb0 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Ra0", "Rb0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["L0", "8", "0"], ["Sa0", "IN", "OUT"], ["Sa1", "OUT", "8"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['N-C0-C1-Sa0', 'OUT']), ('C1', ['0', 'N-C0-C1-Sa0']), ('Sa0', ['IN', 'N-C0-C1-Sa0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "94", "Vout": "95"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "96", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['0', 'N-Sa0-Sb0-Sb1']), ('Sb0', ['N-Sa0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-Sa0-Sb0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb0/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb0*Rout + Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rin/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [Ra0*Rb0/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Ra0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin) + Rb0*Rb1/(Ra0*Rb0 + Ra0*Rb1 + Ra0*Rin + Rb0*Rb1 + Rb0*Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_8(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rb0*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Rb0*Rin/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [0], [1]]", "d": "[[Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [Ra0*Ra1/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra0*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin) + Ra1*Rb0/(Ra0*Ra1 + Ra0*Rb0 + Ra0*Rin + Ra1*Rb0 + Rb0*Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1"], "node_list": ["IN", "OUT", "IN_exact", "8", "0"], "net_list": [["Sb0", "8", "OUT"], ["Sb1", "IN", "8"], ["Sa0", "0", "8"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['N-C0-Sa0', 'OUT']), ('C1', ['0', 'IN']), ('Sa0', ['0', 'N-C0-Sa0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), -1/(Cout*Ra0), 0], [-1/(C0*Ra0), -1/(C0*Ra0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)], [v_C1(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), -1/(Cout*Rb0), 0], [-1/(C0*Rb0), -1/(C0*Rb0), 0], [0, 0, -1/(C1*Rin)]]", "b": "[[0], [0], [1/(C1*Rin)]]", "c": "[[1, 1, 0], [0, 0, 1], [0, 0, 0], [1, 0, 0]]", "d": "[[0], [0], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "C0", "Ra0", "Rb0", "C1"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["C0", "5", "OUT"], ["Sa0", "5", "0"], ["C1", "IN", "0"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "98", "Vout": "98"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "94", "Vout": "94"}, "OrderedDict([('Sa0', ['N-Sa0-Sb0', 'OUT']), ('Sa1', ['IN', 'OUT']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Ra1/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rb0/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Ra1*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Ra1*Rout + Cout*Ra0*Rin*Rout + Cout*Ra1*Rb0*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Rb0/(Ra0 + Rb0)], [Rin/(Ra1 + Rin)], [0], [1]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rb1/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rin/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rb1*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) - Rin*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "b": "[[Ra0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout) + Rb0*Rout/(Cout*Ra0*Rb1*Rout + Cout*Ra0*Rin*Rout + Cout*Rb0*Rb1*Rout + Cout*Rb0*Rin*Rout)]]", "c": "[[Ra0/(Ra0 + Rb0)], [Rin/(Rb1 + Rin)], [0], [1]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Ra1", "Rb1"], "node_list": ["IN", "OUT", "IN_exact", "6", "0"], "net_list": [["Sb0", "6", "0"], ["Sa0", "OUT", "6"], ["Sa1", "OUT", "IN"]]}, "Efficiency": "89", "Vout": "90"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sa0']), ('Sa0', ['N-C1-Sa0', 'OUT'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'OUT']), ('Sa0', ['IN', 'N-Sa0-Sb0']), ('Sb0', ['0', 'N-Sa0-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.1": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.2": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.3": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.4": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.5": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.6": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.7": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.8": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('L0', ['0', 'N-L0-L1-Sb0']), ('L1', ['IN', 'N-L0-L1-Sb0']), ('Sb0', ['N-L0-L1-Sb0', 'OUT'])])$0.9": {"Expression": {"A state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Rb0/L0, -Rb0/L0, -1/L0], [-Rb0/L1, -Rb0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Rb0, Rb0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "B state": {"x": "[[i_L0(t)], [i_L1(t)], [v_Cout(t)]]", "y": "[[v_6(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-Ra0/L0, -Ra0/L0, -1/L0], [-Ra0/L1, -Ra0/L1 - Rin/L1, -1/L1], [1/Cout, 1/Cout, -1/(Cout*Rout)]]", "b": "[[0], [1/L1], [0]]", "c": "[[Ra0, Ra0, 1], [0, -Rin, 0], [0, 0, 0], [0, 0, 1]]", "d": "[[0], [1], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "L0", "Rb0", "Ra0", "L1"], "node_list": ["IN", "OUT", "IN_exact", "0", "6"], "net_list": [["L0", "0", "6"], ["Sb0", "OUT", "6"], ["L1", "IN", "6"]]}, "Efficiency": "0", "Vout": "0"}, "OrderedDict([('C0', ['0', 'OUT']), ('C1', ['IN', 'N-C1-Sb0']), ('Sb0', ['0', 'N-C1-Sb0'])])$None": {"Expression": "Invalid", "Efficiency": 0, "Vout": -500}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.1": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "82", "Vout": "82"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.2": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "90", "Vout": "90"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.3": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "93", "Vout": "93"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.4": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.5": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "95", "Vout": "95"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.6": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "96", "Vout": "96"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.7": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.8": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "97", "Vout": "97"}, "OrderedDict([('C0', ['0', 'N-C0-Sb0-Sb1']), ('Sb0', ['N-C0-Sb0-Sb1', 'OUT']), ('Sb1', ['IN', 'N-C0-Sb0-Sb1'])])$0.9": {"Expression": {"A state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Rb0), 1/(Cout*Rb0)], [Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) + Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin), -Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rb1/(C0*Rb0*Rb1 + C0*Rb0*Rin) - Rin/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "b": "[[0], [Rb0/(C0*Rb0*Rb1 + C0*Rb0*Rin)]]", "c": "[[0, 1], [0, Rin/(Rb1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Rb1/(Rb1 + Rin)], [1], [0]]"}, "B state": {"x": "[[v_Cout(t)], [v_C0(t)]]", "y": "[[v_5(t)], [v_IN(t)], [v_IN_exact(t)], [v_OUT(t)]]", "a": "[[-1/(Cout*Rout) - 1/(Cout*Ra0), 1/(Cout*Ra0)], [Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) + Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin), -Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Ra1/(C0*Ra0*Ra1 + C0*Ra0*Rin) - Rin/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "b": "[[0], [Ra0/(C0*Ra0*Ra1 + C0*Ra0*Rin)]]", "c": "[[0, 1], [0, Rin/(Ra1 + Rin)], [0, 0], [1, 0]]", "d": "[[0], [Ra1/(Ra1 + Rin)], [1], [0]]"}, "device_list": ["Vin", "Rin", "Rout", "Cout", "Rb0", "Ra0", "Rb1", "Ra1", "C0"], "node_list": ["IN", "OUT", "IN_exact", "5", "0"], "net_list": [["Sb0", "5", "OUT"], ["Sb1", "5", "IN"], ["C0", "5", "0"]]}, "Efficiency": "97", "Vout": "97"}}